#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl5 -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Date$ 
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
#  Parse a CIF file and print out the essential information in the COD
#  REF format
#**

use strict;
use lib "./lib/perl5";
use STAR::Parser;

my $filename = shift(@ARGV);
my $biblio = @ARGV > 0 ? shift(@ARGV) : undef;
my @data;

@data = STAR::Parser->parse(-file=>$filename);

my $n = 0;

for my $dataset (@data) {

    next unless defined $dataset->{DATA};

    my $compounds = $dataset->{DATA};
    my @names = keys %{$compounds};

    ## print int(@data), "\n"; exit;

    my $compound_name = $names[0];
    my $compound = $compounds->{$compound_name};
    my $category = defined $compound ? $compound->{"-"} : undef;
    my $datablok = defined $category ? $category->{"-"} : undef;

    next if !defined $datablok or !defined $datablok->{_atom_site_label};

    print "\n" if $n > 0;

    # Chemical formula:
    my $formula = $datablok->{_chemical_formula_sum}[0];
    if( defined $formula ) {
	$formula =~ s/^\s*|\s*$//g;
    } else {
	$formula = "?";
    }

    # Cell constants:
    my $a = $datablok->{_cell_length_a}[0];
    my $b = $datablok->{_cell_length_b}[0];
    my $c = $datablok->{_cell_length_c}[0];
    my $alpha = $datablok->{_cell_angle_alpha}[0];
    my $beta  = $datablok->{_cell_angle_beta}[0];
    my $gamma = $datablok->{_cell_angle_gamma}[0];

    # Spacegroup:
    my $spacegroup = $datablok->{"_symmetry_space_group_name_H-M"}[0];

    # Atom records:

    my $atom = $datablok->{_atom_site_label};

    my $x = $datablok->{_atom_site_fract_x};
    my $y = $datablok->{_atom_site_fract_y};
    my $z = $datablok->{_atom_site_fract_z};

    my $q = $datablok->{_atom_site_occupancy};
    my $U = $datablok->{_atom_site_U_iso_or_equiv};
    
    if( !defined $U ) {
	$U = $datablok->{_atom_site_Uiso_or_Biso};
    }

    if( !defined $U && defined $datablok->{_atom_site_B_iso_or_equiv} ) {
	my $B = $datablok->{_atom_site_B_iso_or_equiv};
	my $Pi = 3.14159265358979;
	for my $i ( 0..$#{$B} ) {
	    my $b = $B->[$i];
	    $b =~ s/\(.*\)$//;
	    $datablok->{_atom_site_U_iso_or_equiv}[$i] = $b/(8*$Pi**2);
	}
	$U = $datablok->{_atom_site_U_iso_or_equiv};
    }

    my $multiplicity = $datablok->{_atom_site_symmetry_multiplicity};

    if( !defined $multiplicity ) {
	$multiplicity = $datablok->{_atom_site_symetry_multiplicity};
    }

    my $Wyckoff_sym = $datablok->{_atom_site_Wyckoff_symbol};

    # Print it out:

    if( defined $biblio ) {
	open( BIBLIO, $biblio ) or
	    die( "Could not open file '$biblio' for reading: $!" );
	my $reference;
	if( $biblio =~ /\.ref/ ) {
	    $reference = <BIBLIO>; # read the first line
	} elsif( $biblio =~ /\.xrf/ ) {
	    my @reference = grep !/^\#/, <BIBLIO>;
	    $reference = $reference[0]; # read the first non-comment line
	} else {
	    local $/ = undef; # read the whole file
	    $reference = <BIBLIO>;
	}
	close BIBLIO;
	chomp $reference;
	$reference =~ s/\n/ /g;
	print $reference, "\n";
    } else {
	print "Bibliography ...\n";
    }

    do {
	local $, = " ";
	local $\ = "\n";

	print $formula;

	## $a =~ s/\(.*\)//g;
	## $b =~ s/\(.*\)//g;
	## $c =~ s/\(.*\)//g;
	## $alpha =~ s/\(.*\)//g;
	## $beta  =~ s/\(.*\)//g;
	## $gamma =~ s/\(.*\)//g;

	print $a, $b, $c, $alpha, $beta, $gamma;

	$spacegroup =~ s/^\s*|\s*$//g;
	print $spacegroup;

	for my $i (0..$#{$x}) {
	    print
		$atom->[$i],
		defined $multiplicity ? $multiplicity->[$i] : "?",
		defined $Wyckoff_sym ? $Wyckoff_sym->[$i] : "?",
		$x->[$i], $y->[$i], $z->[$i],
		defined $q ? $q->[$i] : "?",
		$U->[$i];
	}
    };

    $n ++;
}
