cod-tools (unreleased)

  * Added:
    - version information is printed by most of the scripts using
      --version command line option.
    - reading/writing of CIF v2.0 format.
  * Changed:
    - using symmetry operators as provided by spglib in
      cif_find_symmetry instead of operators from lookup hashes as ones
      from spglib seem to better describe spacegroups with
      nonconventional settings.
    - using Hall symbol (more precise) for the detection of symmetry
      space group in the output of spglib in cif_find_symmetry.
    - JSON, written/read by cif2json and json2cif, accordingly, is now
      concatenable (relaxed) by default. Strictly conforming JSON can
      now be produced via --strict command line option in cif2json.
      json2cif is able to read both strict and relaxed JSON.
    - interface of C CIF parser:
      - datablock_value() -> datablock_cifvalue() in datablock.h
      - datablock_overwrite_value() -> datablock_overwrite_cifvalue()
        in datablock.h
      - datablock_types() -> datablock_value_type() in datablock.h
      - datablock_insert_value() -> datablock_insert_cifvalue() in
        datablock.h
      - datablock_push_loop_value() -> datablock_push_loop_cifvalue()
        in datablock.h
  * Removed:
    - datablock_values() from datablock.h
  * Fixed:
    - adding perl-XML-Simple as a run dependency for CentOS 6.8.

cod-tools (1.1)

  * Added:
    - cif_find_symmetry and spglib interface (using spglib-1.6.4)
    - dependency list for LinuxMint-18.1.
    - cif_bounding_box: a new script to transform obabel-generated
      non-crystal CIF files (no symmetry information, cell parameters,
      Cartesian coordinates given instead of fractional) to cubic unit
      cells, separated by margins of vacuum.
    - cif2rdf: a new script to generate RDF descriptions directly from
      CIF files.
    - cif_fix_values: adding functionality to fix the most common
      mistakes in the values of
      _atom_sites_solution_{primary,secondary,hydrogens}.
    - cif2cod: validating extracted data against SQL data field
      descriptions from database-description.xml.
    - COD::CIF::Data::CIF2COD: adding validate_SQL_types().
    - JSON schema for validation of output from cif2json and like.
    - oqmd2cif: adding convergence flags and labels, lattice and total
      energies, magnetic moments, band gaps, VASP settings, OQMD
      calculation and structure labels, runtime values, error flags,
      OQMD database codes, references to calculation input structures.
    - cod_predeposition_check: implementing parser selection via
      command line options.
    - COD::RDF: a new module for RDF generation with most of the code
      taken from cod2rdf.
    - COD::AuthorNames: a new module for author name parsing to a new
      Perl module with the code from:
      URL: svn+ssh://www.crystallography.net/home/coder/svn-repositories/codcif2xml/trunk/programs/rdfxml2xml
      Repository Root: svn+ssh://www.crystallography.net/home/coder/svn-repositories/codcif2xml
      Repository UUID: e9639961-1eee-46c2-8ca7-0101a2976781
      Revision: 73
    - COD::Algebra: a new module with common GCD functions
    - COD::AtomNeighbours: adding subroutine
      neighbour_list_from_chemistry_mol() for the construction of
      atom neighbours data structure from the output of
      Chemistry::Mol Perl module.
    - cif_hkl_check: diffraction data files conforming to
      cif_twinning.dic are detected as containing diffraction data.
    - COD::Spacegroups::Lookup::COD: adding an extra space group
      setting 'P n m a (c,a-1/4,b)'.
    - cif2cod: adding '--include-keywords-with-undefined-values' and
      '--exclude-keywords-with-undefined-values' command line options.
    - cif_parse: adding '--(no|dont)-fix-syntax-errors' command line
      options.
    - cif_filter: reporting cases when the symmetry space group can
      not be determined from symmetry operators.
    - COD::Algebra::Vector: adding subroutine vector_len().
    - cif_diff: adding '--ignore-empty-values' command line option.
    - cif_fillcell: adding '_space_group_IT_number' and 
      '_space_group_name_Hall' data items to the output.
    - cif_fillcell: adding '--unit-cell', '--no-supercell',
      '--supercell' command line options.
    - cif_validate: checking the existance of parent links, as defined
      via '_list_link_parent' of ddl_core.dic.
    - cif_cod_check: adding a check to locate disorder groups of the
      same assembly having different numbers of atoms (off by
      default).
    - COD::Cell: adding vectors2cell().
    - COD::CID::Data::CIF2COD: adding fields 'cellformula' and
      'compoundsource'.
    - COD::Algebra::Vector: adding vector_angle().
    - COD::CID::Data::CIF2COD: detecting CIF data blocks without
      fractional coordinates.
    - Build dependencies for CentOS 6.8 and Debian 8.2.
    - AtomProperties pipeline: adding dependencies.
    - cif_reduce_Niggli: adding command line option '--compute-symops'
      to compute symmetry operators as well as estimate space groups
      for reduced cells. Experimental, thus off by default.
    - cif2json: a new script to convert CIF to its JSON representation.
    - json2cif: a new script to convert JSON to CIF data structure.
    - Implementing input/output CIF in JSON carrier format in:
      - cif2cod
      - cif_cod_check
      - cif_cod_numbers
      - cif_correct_tags
      - cif_filter
      - cif_printout
      - cif_split
    - COD::CIF::JSON: adding Yapp-like object-oriented interface.
    - COD::CIF::Data::SymmetryGenerator: adding apply_shifts() and
      shift_atom().
    - Test dependency list for Ubuntu 12.04.
  * Changed:
    - COD::CID::Data::CIF2COD treats CIF value '?' amid white space as
      undefined.
    - CIF parsers:
      - adding the ' -- fixed' suffix to parser warning messages
        informing about unquoted strings with spaces.
      - rephrasing error messages in the CIF parsers: replacing one
        occurence of comma (',') and one occurence of a dash ('-')
        with two dashes ('--') and changing the phrase 'replaced by'
        to 'replaced with'.
    - Messages in scripts:
      - cif_cod_check
      - cif_correct_tags
      - cif_diff
      - cif_filter
      - cif_fix_values
      - cif_hkl_check
      - cif_merge
      - cif_validate
      - cif2cod
    - Messages in Perl modules:
      - COD::Cell::Niggli::KG76
      - COD::CIF::Data
      - COD::CIF::Data::AtomList
      - COD::CIF::Data::CIF2COD
      - COD::CIF::Data::CODNumbers
      - COD::CIF::Data::CODPredepositionCheck
      - COD::CIF::Data::Diff
      - COD::SOptions
      - COD::Spacegroups::Lookup::COD
    - Renamed tools/duplicate_spacegroups ->
      tools/duplicate_space_groups
    - COD XML:
      - adding descriptions of 'Z', 'Zprime', 'cellformula' and
        'compoundsource'.
      - renaming 'CODDictionary' tag to 'Database', 'CODParameter' to
        to 'Field', 'CODCode' to 'Code'.
      - adding SQL data to 'SQLDataType' tags.
    - Ceasing to convert horizontal tabulations ('\t') into spaces in
      both Bison and Yapp CIF parsers, since such treatment of '\t'
      may corrupt data. Furthermore, such conversion caused lots of
      memory reallocations in Bison CIF parser.
    - cif_correct_tags:
      - Adding misspelt variants of the following tags to the
        replacement list (data/replacement-values/replacement_tags.lst):
        - _atom_site_site_symmetry_multiplicity
        - _atom_site_symmetry_multiplicity
        - _exptl_crystal_F_000
        - _geom_*
        - _publ_author_name
        - _publ_author_address
        - _publ_contact_author
      - Correcting several replacement rules.
      - Removing "_exptl_crystal_f_000'" replacement rule.
      - Copying tests/inputs/replacement_tags.lst to
        data/replacement-values/.

        ------------------------------------------------------------------------
        r5005 | antanas | 2017-03-03 13:38:54 +0200 (Fri, 03 Mar 2017) | 5 lines

        trunk/ (antanas@echidna.ibt.lt)
        Bug fix: modifying the 'cif_correct_tags' script to skip
        value comparison if at least one of the data items is within
        a loop structure.

        ------------------------------------------------------------------------
        r4998 | antanas | 2017-03-02 15:24:31 +0200 (Thu, 02 Mar 2017) | 11 lines

        cod-tools/ (antanas@echidna.ibt.lt)
        Enhancement: modifying the way 'cif_correct_tags' script behaves when
        the replacement tag is already in the file. Originally, the replacement
        would silently not be carried at all in cases like these. However, from
        now on the script woll carry out one of the two actions based on the 
        values of the misspelt and the replacement data items:
        1) if the values match, the misspelt data item will be removed and
        reported;
        2) if the values do not match, the misspelt data item will be reported,
        but not modified in any way.

    - cif_cod_numbers: also considering the unit cell formula and
      compound source when searching for duplicate entries.
    - cif_tcod_tree: using more portable way to fetch contents of
      remote file to Perl scalar using WWW::Curl::Easy.
    - pycodcif:
      - Renaming Python bindings of codcif to pycodcif.
      - Making parser options optional.
      - Using python2.6 if python2.7 does not exist, using more
        common Python syntax in order to make Python code more
        backwards-compatible, in particluar with python2.6.
    - COD::CIF::Unicode2CIF: converting named and decimal-numbered
      XML entities into appropriate UTF-8 code points.
    - COD::CIF::Tags::DFT: updating tag list according to
      cif_dft.dic v0.020
    - COD::CIF::Tags::DictTags: updating tag list according to
      cif_core.dic v2.4.5
    - COD::CIF::Tags::TCOD: updating tag list according to
      cif_tcod.dic v0.009
    - Replacing COD::CIF::Data::SymmetryGenerator(),
      COD::CIF::Data::AtomList::copy_struct_deep() and analoguous
      functions with Perl built-in Clone::clone().
    - Eliminating "sponge" from
      makefiles/Makefile-perl-multiscript-tests to enable builts on
      CentOS-6.8.
    - COD::CIF::Data::CIF2COD: removing unused arguments (filename,
      datablock) from subroutine interfaces.
    - cif_fillcell: replacing deprecated CIF tags with their new
      counterparts.
    - COD::CIF::Data::SymmetryGenerator: apply_shifts() returns
      array reference instead of the array.
    - cif_distances: removing extra space from the output.
    - cif_molecule: printing only first five messages about detected
      bumps.
    - codcif and COD::CIF::Parser: removing duplicated line and
      position numbers from parser error messages.
    - Canonicalizing CIF data item names in a bunch of scipts that
      have not used this feature before. Homogenuous treatment of CIF
      data item names in the whole system is neccessary both to
      leverage the reusability of code and to avoid bugs.
    - cif_fillcell: building unit cell by default (instead of the
      3x3x3 supercell).
    - COD::SOptions: renaming interpolateFile() to interpolate_file().
    - Moving atom_groups() and assemblies() from cif_molecule and
      cif_p1 to COD::CIF::Data::AtomList.
    - cexceptions and getoptions: changing the linker from 'ld' to
      'cc'.
    - cif_distances: selecting the first shortest distance: this
      should solve the floating-point problem that occurs on different
      machines.
    - codcif: explicitly specifying the CIF version in error messages
      of the type 'it is not acceptable in this version'.
    - cif_distances: replacing shift_atom() with apply_shifts() from
      COD::CIF::Data::SymmetryGenerator.
    - COD::Spacegroups::Symop::Algebra: symop_vector_mul() returns
      array reference (Perl wantarray construction was used before).
    - cif_distances: excluding atoms with unknown coordinates.
    - COD::CIF::Data::AtomList: ordering atoms by their summary
      occupancies in atom_groups().
    - Renaming COD::CIF2JSON to COD::CIF::JSON.
    - COD::CIF::JSON: switching to stream-oriented JSON parsing.
    - Moving the warning message about the user-provided Z value
      mismatching the one given in the input file from the
      COD::CIF::Data::CellContents module to the cif_cell_contents
      script.
    - Unifying interfaces of:
      - COD::Cell::Conventional::deWG91::reduce()
      - COD::Cell::Delaunay::Delaunay::reduce()
      - COD::Cell::Niggli::KG76::reduce()
    - COD::CIF::Data::CIF2COD: adding 'Z' and 'Zprime' to the list of
      default new fields.
    - cif_printout: changing default print mode to Data::Dumper in
      order to allow printing of nested data structures.
    - COD::CIF::Data::CODPredepositionCheck: replacing
      COD::ErrorHandler::process_errors() calls with calls to local
      critical().
    - Moving extraction of '_atom_site_symmetry_multiplicity' value to
      COD::CIF::Data::AtomList::extract_atom() from
      COD::CIF::Data::AtomList::atom_array_from_cif().
    - COD::CIF::Parser::Bison: linking compiled module against
      archives of static libraries (.a) instead of objects (.o) of
      codcif, cexceptions and getoptions.
  * Deprecated:
    - usage of doc/CODDictionary.xml (database-description.xml of
      appropriate database should be used instead, such as
      http://www.crystallography.net/cod/xml/documents/database-description/database-description.xml)
  * Removed:
    - doc/TAGS.XML
    - COD::Spacegroups::Symop::Algebra: symop_apply(). Using
      symop_vector_mul() instead.
    - COD::CIF::Data::SymmetryGenerator: copy_atom(). Using
      copy_atom() from COD::CIF::Data::AtomList instead.
  * Fixed:
    - adding libxml-simple-perl as a run dependency for Ubuntu-12.04
      and Debian-8.6.
    - CIF line folding protocol:
      - COD::CIF::Parser::Yapp: removing backslash from the last line
        of unfolded CIF text field.
      - codcif and COD::CIF::Parser::Yapp: removing trailing
        whitespace from the lines of to-be-unfolded CIF text fields.
        
        ------------------------------------------------------------------------
        r4583 | antanas | 2016-02-17 16:44:15 +0200 (Wed, 17 Feb 2016) | 7 lines

        trunk/ (antanas@echidna.ibt.lt)
        Bug fix: updating the way unfolding/unprefixing protocols are 
        implemented in the COD::CIF::Parser::Bison (by modifying the 
        cif_grammar.y file itself). Unprefixing a multiline text 
        field and without unfolding it no longer leaves an empty line at the 
        beginning of the text field.

        ------------------------------------------------------------------------
        r4582 | antanas | 2016-02-17 14:45:45 +0200 (Wed, 17 Feb 2016) | 6 lines

        trunk/src/lib/perl5/COD/CIF/Parser/ (antanas@echidna.ibt.lt)
        Bug fix: updating the way unfolding/unprefixing protocols are 
        implemented in the COD::CIF::Parser::Yapp. Unprefixing a multiline text 
        field that has a "/\n" as its second line no longer causes the text 
        field to also be unfolded.

    - COD::CIF::Unicode2CIF:
      - converting CIF triple dash ('---') into UTF-8 em dash
        (&#x2014;) instead of a combination of figure dash and en
        dash.
      - converting CIF symbol '\s' to lowercase sigma (GREEK SMALL
        LETTER SIGMA) instead of final lowercase sigma (GREEK SMALL
        LETTER FINAL SIGMA). On the other way round, UTF-8 code point
        for final lowercase sigma is now converted into corresponding
        XML entity instead of CIF markup symbol '\s'.
      - converting tilde symbol '~' into CIF '\\sim ' sequence as per
        CIF specification instead of the '\sim ' sequence.
    - codcif: fixing incorrect line numbers in error messages.
    - Memory leaks in codcif and COD::CIF::Parser::Bison.
    - codcif: performing all character operations via int data type
      (instead of char) in cif_lexer.c, as conversions between char
      and int used to cause loss of EOF characters.
    - cif_split_primitive: preserving CIF comments in the output of
      the script.
    - Error messages in codcif (occurence -> occurrence)
    - Error messages in the following scripts:
      - cif_molecule
      - cod_predeposition_check
    - Error messages in the following Perl modules:
      - COD::CIF::Data::CODPredepositionCheck
      - COD::SOptions
    - Help texts of the following scripts:
      - cif_cell_contents
      - cif_cod_check
      - cif_cod_deposit
      - cif_cod_numbers
      - cif_diff
      - cif_eval_numbers
      - cif_filter
      - cif_hkl_COD_number
      - cif_hkl_check
      - cif_merge
      - cif_molecule
      - cif_p1
      - cif_select
      - cif_split
      - cif2cod
      - cifparse
      - cod_predeposition_check
    - cif_select: adding a missing import of
      COD::CIF::Tags::Manage::rename_tag()
    - cif_cod_check: using explicit UTF-8 binmode for STDERR.
    - COD::UserMessage: escaping newline characters in generated
      messages with numeric character reference '&#10;' in order to
      comply with the EBNF grammar of error messages as published in
      Merkys et al. 2016.
    - COD::Formulae::Parser::AdHoc: using COD::UserMessage for
      message formation.
    - cif_molecule: preventing printing of a syntactically incorrect
      CIFs (ones that contain loops without values).
    - cif_Fcalc: fixing a typo in the atom property name
      ('scat_dispesion_real' -> 'scat_dispersion_real').
    - cif_molecule: setting multiplicities to '?' for atoms of dummy
      molecules.
    - COD::CIF::Data::CIF2COD: returning SQL NULL instead of string
      "NULL" for unknown cell volumes.
    - codcif: duplicated tags, whose second occurence is in a loop,
      were reported as warnings instead of errors.
    - cif_cod_deposit: adding '--show-error' command line option for
      'curl' in order to make its error messages visible.
    - codcif: escaping special symbols ('&', ':', spaces and
      parentheses in some lexems) in C parser messages.
    - codcif: detecting reserved CIF lexem 'global_'.
    - codcif and COD::CIF::Parser::Yapp: detecting empty CIF data
      block names.
    - codcif and COD::CIF::Parser::Yapp: detecting unquoted CIF
      strings starting with closing square brackets.
    - codcif and COD::CIF::Parser::Yapp: returning an empty list of
      data blocks upon parsing empty CIF files. According to the CIF
      specification, empty CIF is an empty list of datablocks.
    - codcif: reporting replaced spaces in data block names as
      WARNINGs instead of NOTEs.
    - COD::CIF::Data::AtomList: sorting hash keys in atom_groups() in
      order to prevent from non-deterministic output.
    - codcif: allowing unquoted CIF strings that begin with 'loop_'
      prefix albeit not equal to 'loop_' string.
    - COD::CIF::Tags::Print: quoting unquoted CIF strings starting
      with closing square bracket.
    - Fixing exception handling in the following scripts:
      - cif_fix_values
      - cif_reduce_cell
      - cif2xyz
    - COD::ErrorHandler: ensuring that the code block is only
      executed upon successful matching.
    - COD::CIF::Data::AtomList: sorting the disorder assemblies so the
      output results would not be affected by the Perl hashing
      algorithm.
    - COD::CIF::Data: checking whether tag's value/precision is defined
      in get_cell().
    - codcif: detecting and fixing headerless CIF files composed of a
      single CIF data item only.
    - COD::CIF::Parser::Yapp: everything from the quote symbol to the
      end of the line will be considered a part of the misquoted
      string.
    - cif_filter: removing fold() subroutine call in the bibliography 
      reference hash processing block. The subroutine was called in
      the wrong place and disregarded the command line options
      '--folding-width', '--fold-title' and '--dont-fold-title'.
    - Replacing indirect Perl method calls (new Object) with direct 
      methods calls (Object->new) since it is the prefered way.
    - COD::UserMessage: avoiding negative positions in error messages.
    - COD::CIF::Data::CIF2COD: cif2cod() determines number of distinct
      elements for structures with defined and non-empty chemical
      formulae.
    - cif_molecule: simple olymers are now detected even with
      '--max-polymer-span 0'.
    - cif_molecule: trimming polymers after polymer dimension
      measurement and before formulae calculation. Multiple moieties
      are then merged into one if one datablock output is requested.
      Thus, correct formulae are achieved and non-polymer atoms are
      not trimmed.
    - pycodcif: passing the 'fix_datablock_name' option directly to
      the lexer.
    - oqmd2cif: producing syntactically correct CIF files for
      structures without any atoms.

------------------------------------------------------------------------
r5023 | antanas | 2017-03-06 15:15:34 +0200 (Mon, 06 Mar 2017) | 4 lines

trunk/data/ (antanas@echidna.ibt.lt)
Enhancement: adding the integration of the 'Dummy' atom patch to the
AtomProperties module assembling process.

------------------------------------------------------------------------
r4979 | antanas | 2017-02-28 19:18:06 +0200 (Tue, 28 Feb 2017) | 6 lines

cod-tools/ (antanas@echidna.ibt.lt)
Bug fix: excluding dummy atoms from receiving the unit occupancy
whenever the --force-unit-occupancies option is in effect.
Refactoring: enforcing '.' occupancies for all dummy atoms that
are being output.

------------------------------------------------------------------------
r4977 | antanas | 2017-02-27 15:16:54 +0200 (Mon, 27 Feb 2017) | 10 lines

cod-tools/ (antanas@echidna.ibt.lt)
Enhancement: updating the way --one-datablock-output and
--largest-molecule-only options interact. On its own (or
in combination with options other than the --one-datablock-output)
the --largest-molecule only option modifies the output to only
contain the molecule with the greatest number of atoms. However,
in combination with the --one-datablock-output it returns the
most likely (disorder group occupancy wise) molecule, which might
not necessarily contain the greatest number of atoms.

------------------------------------------------------------------------
r4926 | antanas | 2017-02-08 17:43:27 +0200 (Wed, 08 Feb 2017) | 6 lines

cod-tools/ (antanas@echidna.ibt.lt)
Enhancement: updating the way dummy atoms are handled
in the 'cif_molecule' script. Additionally, a special
atom type '.' was added to the COD::AtomProperties to
represent dummy atoms.

------------------------------------------------------------------------
r4912 | antanas | 2017-02-07 17:29:50 +0200 (Tue, 07 Feb 2017) | 4 lines

cod-tools/ (antanas@echidna.ibt.lt)
Enhancement: updating the 'cif_molecule' script to ignore
atoms with dummy ('.') or unknown ('?') coordinates.

------------------------------------------------------------------------
r4732 | antanas | 2016-10-06 11:51:16 +0300 (Thu, 06 Oct 2016) | 4 lines

trunk/data/ (antanas@antanas-tuxedo.europe.actelion.com)
Enhancement: adding a way to specify the name of the
generated module file.

------------------------------------------------------------------------
r4730 | antanas | 2016-10-06 11:26:38 +0300 (Thu, 06 Oct 2016) | 4 lines

trunk/data/ (antanas@antanas-tuxedo.europe.actelion.com)
Enhancement: adding a way to specify the namespace of the produced
perl module.

------------------------------------------------------------------------
r4719 | antanas | 2016-10-05 17:23:37 +0300 (Wed, 05 Oct 2016) | 3 lines

trunk/data/ (antanas@antanas-tuxedo.europe.actelion.com)
Enhancement: adding the latest version of bodr file.

------------------------------------------------------------------------
r4716 | antanas | 2016-10-05 15:25:45 +0300 (Wed, 05 Oct 2016) | 6 lines

trunk/data/ (antanas@echidna.ibt.lt)
Refactoring: changing the module name from
'AtomProperties' to 'COD::AtomProperties" and
correcting a few layout mistakes in the comments
providing the bibliography.

------------------------------------------------------------------------
r4671 | antanas | 2016-06-20 00:17:04 +0300 (Mon, 20 Jun 2016) | 5 lines

trunk/data/ (antanas@kurmis)
Bug fix: updating AtomProperties script to work with the new
cod-tools layout and adding explicit hash field ordering in
the 'atom_properties_merge' script.

------------------------------------------------------------------------
r4622 | saulius | 2016-04-11 21:23:29 +0300 (Mon, 11 Apr 2016) | 3 lines

trunk/src/lib/perl5/COD/Cell/ (saulius@kolibris)
Adding more debug printouts to Delaunay/Delaunay.pm.

------------------------------------------------------------------------
r4619 | saulius | 2016-04-10 21:00:16 +0300 (Sun, 10 Apr 2016) | 4 lines

trunk/src/lib/perl5/COD/Cell/ (saulius@kolibris)
BUG FIX: correcting the Delaunay reduction algorith so that it does not 
return flattened unit cells.

------------------------------------------------------------------------
r4614 | saulius | 2016-04-09 07:43:05 +0300 (Sat, 09 Apr 2016) | 4 lines

trunk/ (saulius@kolibris)
Transposing the new basis matrix in COD/Cell/Conventional/deWG91.pm to 
get the correct cell vectors.

------------------------------------------------------------------------
r4612 | saulius | 2016-04-08 20:02:25 +0300 (Fri, 08 Apr 2016) | 4 lines

trunk/ (saulius@kolibris)
BUG FIX: correcting cell computation after reduction to conventional 
cell in the COD/Cell/Conventional/deWG91.pm module.

------------------------------------------------------------------------
r4569 | antanas | 2016-02-05 11:08:36 +0200 (Fri, 05 Feb 2016) | 8 lines

cod-tools/ (antanas@echidna.ibt.lt)
Bug fix: modifying the COD::CIF::Data::CIF2COD::cif2cod to replace 
multiple whitespaces with a single whitespace only after the cif markup 
entities have been converted into utf characters. This allows to 
preserve at least a single whitespace after the symbol encoded by the 
cif markup entity, since some of these entities have a trailing 
whitespace as a part of their name ("\\times ", for example). 

------------------------------------------------------------------------
r4521 | antanas | 2016-01-12 14:16:46 +0200 (Tue, 12 Jan 2016) | 8 lines

trunk/src/lib/perl5/ (antanas@echidna.ibt.lt)
Bug fix: modifying 'interpolate_file' subroutine to print the error 
message about not being able to open the file even if the 'option' 
argument is not provided. Also, modifying the 'get_value' 
subroutine to pass the option name to the 'interpolate_file' 
subroutine so it can be displayed in the error message in the 
'COD::SOptions' module.

------------------------------------------------------------------------
r4460 | antanas | 2015-12-17 11:36:36 +0200 (Thu, 17 Dec 2015) | 4 lines

cod-tools/ (antanas@echidna.ibt.lt)
Enhancing: modifying COD::CIF::Data::AtomList::atom_array_from_cif to 
exclude atoms with atleast one dot ('.') coordinate on request.

------------------------------------------------------------------------
r4452 | antanas | 2015-12-15 20:55:43 +0200 (Tue, 15 Dec 2015) | 5 lines

cod-tools/ (antanas@echidna.ibt.lt)
Refactoring: moving logic that sets atom values generated by 
'cif_molecule' to a separate subroutine 'set_cod_molecule_atom_fields' 
in COD::CIF::Data::AtomList.

------------------------------------------------------------------------
r4446 | antanas | 2015-12-14 16:23:54 +0200 (Mon, 14 Dec 2015) | 6 lines

cod-tools/ (antanas@echidna.ibt.lt)
Refactoring: removing the 'do_not_resolve_chemical_type' option from the 
COD::CIF::Data::AtomList::extract atom since the functionality needed in 
the 'cif_distances' script can also be achieved with the 
'allow_unknown_chemical_types' option.

------------------------------------------------------------------------
r4445 | antanas | 2015-12-14 16:05:05 +0200 (Mon, 14 Dec 2015) | 5 lines

cod-tools/ (antanas@echidna.ibt.lt)
Refactoring: moving the logic that allows to skip an atom before 
extracting it to a seperate subroutine 'is_atom_excludable' in 
COD::CIF::Data::AtomList.

------------------------------------------------------------------------
r4386 | antanas | 2015-12-02 08:59:03 +0200 (Wed, 02 Dec 2015) | 10 lines

trunk/ (antanas@kurmis)
Bug fix: updating the way user defined bibliography (provided using the 
command line options) is processed when empty strings are provided as 
option values in the 'cif_filter' script. Before the r4385 revision, 
user provided options were stored in separate global variables and 
replacing these variables with a single hash modified the behaviour when 
dealing with empty string values. This bug fix reverts script behaviour
to the previously established one (ignoring the option if the provided
value is an empty string).

------------------------------------------------------------------------

cod-tools (1.0)

  * Initial release.
