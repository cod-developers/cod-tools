# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package COD::CIF::Parser::Bison;
use base qw(DynaLoader);
package COD::CIF::Parser::Bison::Bisonc;
bootstrap COD::CIF::Parser::Bison;
package COD::CIF::Parser::Bison;

# ------- FUNCTION WRAPPERS --------

package COD::CIF::Parser::Bison::Bison;

*parse_cif = *COD::CIF::Parser::Bison::Bisonc::parse_cif;

# ------- VARIABLE STUBS --------

package COD::CIF::Parser::Bison::Bison;


use COD::Precision;
sub parse
{
    my( $filename, $options ) = @_;
    $options = {} unless $options;
    my $parse_result = parse_cif( $filename, $0, $options );
    my $data = $parse_result->{datablocks};
    my $nerrors = $parse_result->{nerrors};

    foreach my $datablock ( @$data ) {
        $datablock->{precisions} = {};
        foreach my $tag   ( keys %{$datablock->{types}} ) {
            my @prec;
            my $has_numeric_values = 0;
            for( my $i = 0; $i < @{$datablock->{types}{$tag}}; $i++ ) {
                next unless $datablock->{types}{$tag}[$i] eq "INT" ||
                            $datablock->{types}{$tag}[$i] eq "FLOAT";
                $has_numeric_values = 1;
                if(         $datablock->{types}{$tag}[$i] eq "FLOAT" &&
                            $datablock->{values}{$tag}[$i] =~
                            m/^(.*)( \( ([0-9]+) \) )$/six ) {
                            $prec[$i] = unpack_precision( $1, $3 );
                } elsif(    $datablock->{types}{$tag}[$i] eq "INT" &&
                            $datablock->{values}{$tag}[$i] =~
                            m/^(.*)( \( ([0-9]+) \) )$/sx ) {
                            $prec[$i] = $3;
                }
            }
            if( @prec > 0 || ( exists $datablock->{inloop}{$tag} &&
                $has_numeric_values ) ) {
                if( @prec < @{$datablock->{types}{$tag}} ) {
                    $prec[ @{$datablock->{types}{$tag}} - 1 ] = undef;
                }
                $datablock->{precisions}{$tag} = \@prec;
            }
        }
    }

    if( wantarray ) {
        return( $data, $nerrors );
    } else {
        return $data;
    }
}
1;
