#!/bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl5 -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------
#$Author$
#$Date$ 
#$Revision$
#$URL$
#------------------------------------------------------------------------
#*
# Convert a COD XRF (eXtended ReFerence) format into a CIF file.
#**

use strict;
use lib "./lib/perl5";
use Unicode2CIF 'unicode2cif';
use SOptions;
use SUsage;

my $user_biblio = 0;
my $leave_biblio = 0;

my $journal;
my $volume;
my $start_page;
my $end_page;
my $year;

@ARGV = getOptions( 
    "-j,--journal"   => sub{ $user_biblio = 1; $journal = get_value() },
    "-v,--volume"    => sub{ $user_biblio = 1; $volume = get_value() },
    "-p,--page"      => sub{ $user_biblio = 1; $start_page = get_value() },
    "--start-page"   => sub{ $user_biblio = 1; $start_page = get_value() },
    "-e,--end-page"  => sub{ $user_biblio = 1; $end_page = get_value() },
    "-y,--year"      => sub{ $user_biblio = 1; $year = get_value() },
    "--leave-bibliography"   => sub{ $leave_biblio = 1 },
    "--discard-bibliography" => sub{ $leave_biblio = 0 },
    "--help,--usage" => sub { SUsage::usage; exit },
);

my @inherited_tags = (
    "_chemical_name_systematic",
    "_journal_name_full",
    "_journal_year",
    "_journal_volume",
    "_journal_page_first",
    "_journal_page_last",
    "_cell_measurement_temperature",
    "_diffrn_ambient_temperature",
);

my @generated_tags = (
    "_symmetry_equiv_pos_as_xyz",
);

my %tags = ();
my @record = ();
my @anisou = ();
my %anisou = ();

my $n = 0;
my $compound = 1;

while(<>) {
    chomp;

    if( /^\#/ ) {
	my $idx;
	my ( $key, $value ) = split( /[\s]/, $_, 2 );
	$key =~ s/^\#//;
	if( $key =~ /^(.*)\[(.*)\]$/ ) {
	    $key = $1;
	    $idx = $2;
	}
	if( defined $idx ) {
	    if( !defined $tags{$key}[$idx] ) {
		$tags{$key}[$idx] = $value;
	    } else {
		$tags{$key}[$idx] .= "\n" . $value;
	    }
	} else {
	    if( !defined $tags{$key} ) {
		$tags{$key} = $value;
	    } else {
		$tags{$key} .= "\n" . $value;
	    }
	}
    } elsif( /^ANISOU/ ) {
	my @atom = split( " ",$_ );
	my $atom_name = $atom[1];
	push( @anisou, [ @atom ] );
	$anisou{$atom_name} ++;
    } elsif( !/^\s*$/ ) {
	if( $n < 4 && $n != 2 ) {
	    push( @record, [$_] );
	} else {
	    push( @record, [ split( " ", $_ ) ] );
	}
	$n++;
    }
    
    if( /^\s*$/ || eof ) {
	if( $user_biblio ) {
	    if( !$leave_biblio ) {
		for my $key ( grep /_journal_/, keys %tags ) {
		    delete $tags{$key};
		}
	    }
	    $tags{_journal_name_full} = $journal if defined $journal;
	    $tags{_journal_year} = $year if defined $year;
	    $tags{_journal_volume} = $volume if defined $volume;
	    $tags{_journal_page_first} = $start_page if defined $start_page;
	    $tags{_journal_page_last} = $end_page if defined $end_page;
	}
	print_record( \@record, \%tags, \@anisou, \%anisou );
	@record = ();
	%tags = ();
	@anisou = ();
	%anisou = ();
	$n = 0;
    }
}

sub print_tag
{
    my ($key, $tags) = @_;

    if( exists $tags->{$key} ) {
	my $val = $tags->{$key};
	if( ref $val eq "ARRAY" ) {
	    print "loop_\n";
	    print "$key\n";
	    for my $value (@$val) {
		print_value( $value );
	    }
	} else {
	    printf "%-30s", $key;
	    print_value( $val );
	}
    }
}

sub print_value
{
    my $val = $_[0];

    if( $val =~ /\n/ ) {
	$val = "\n; " . $val . "\n;\n";
    } elsif( $val =~ /^[A-Za-z0-9()]*$/) {
	$val = " " . $val . "\n";
    } else {
	$val = " '" . $val . "'\n";
    }
    print $val;
}

sub print_record
{
    my ($records, $tags, $anisou, $anisou_atoms ) = @_;

    printf "data_%d\n", 7000000 + $compound++;

    ## do { local $, = ",\n"; print keys %{$tags}, "\n"; };

    if( $records && int(@{$records}) > 0 ) {
	my $bibliography = shift( @{$records} );
	my $composition =  shift( @{$records} );
	my $cell =  shift( @{$records} );
	my $spacegroup = shift( @{$records} );
	print "_publ_section_title \n";
	print ";\n";
	do {
	    local $, = "\n";
	    local $\ = "\n";
	    $bibliography->[0] = unicode2cif( $bibliography->[0] );
	    print map { " " . $_ } fold( 71, " ", ($bibliography->[0]) );
	};
	print ";\n";
	print "_chemical_formula_sum '$composition->[0]'\n";

	if( $tags ) {
	    for my $key (@inherited_tags) {
		print_tag( $key, $tags );
	    }
	}

	print "_cell_length_a       $cell->[0]\n";
	print "_cell_length_b       $cell->[1]\n";
	print "_cell_length_c       $cell->[2]\n";
	print "_cell_angle_alpha    $cell->[3]\n";
	print "_cell_angle_beta     $cell->[4]\n";
	print "_cell_angle_gamma    $cell->[5]\n";
	printf "_cell_volume         %8.2f\n", cell_volume( @{$cell} );
	print "_symmetry_space_group_name_H-M   ";
	print_value( $spacegroup->[0] );
	print_tag( "_symmetry_equiv_pos_as_xyz", $tags );
	if( int(@{$records}) > 0 ) {
	    print "loop_\n";
	    print "_atom_site_label\n";
	    print "_atom_site_symmetry_multiplicity\n";
	    print "_atom_site_Wyckoff_symbol\n";
	    print "_atom_site_fract_x\n";
	    print "_atom_site_fract_y\n";
	    print "_atom_site_fract_z\n";
	    print "_atom_site_occupancy\n";
	    print "_atom_site_U_iso_or_equiv\n";
	    print "_atom_site_adp_type\n";
	    local $, = " ";
	    local $\ = "\n";
	    for my $atom (@{$records}) {
		my $atom_name = $atom->[0];
		print @{$atom}, defined $anisou_atoms->{$atom_name} ?
		    "Uani" : "Uiso";
	    }
	}
    }

    if( $anisou && int(@{$anisou}) > 0 ) {
	print "loop_\n";
	print "_atom_site_aniso_label\n";
	print "_atom_site_aniso_U_11\n";
	print "_atom_site_aniso_U_22\n";
	print "_atom_site_aniso_U_33\n";
	print "_atom_site_aniso_U_23\n";
	print "_atom_site_aniso_U_13\n";
	print "_atom_site_aniso_U_12\n";
	local $, = " ";
	local $\ = "\n";
	for my $atom (@{$anisou}) {
	    print @{$atom}[1..$#{$atom}];
	}
    }

    print "\n";
}

sub fold
{
    my $length = shift;
    my $separator = shift;
    my $string = shift;
    my @lines = ();
    my $line = "";

    my $ors = $separator =~ /\s/ ? $separator : "$separator ";
    my $word;
    for $word (split( $separator, $string )) {
	$word =~ s/^\s*|\s*$//g;
	if( !$line ) {
	    $line = $word;
	} else {
	    my $new_line = "$line$ors$word";
	    if( length($new_line) < $length ) {
		$line = $new_line;
	    } else {
		push( @lines, $line );
		$line = $word;
	    }
	}
    }
    push( @lines, $line );
    return @lines;
}

sub cell_volume
{
    my @cell = map { s/\(.*\)//g; $_ } @_;

    my $Pi = 3.1415926;

    my ($a, $b, $c) = @cell[0..2];
    my ($alpha, $beta, $gamma) = map {$Pi * $_ / 180} @cell[3..5];
    my ($ca, $cb, $cg) = map {cos} ($alpha, $beta, $gamma);
    my $sg = sin($gamma);
    
    my $V = $a * $b * $c * sqrt( $sg**2 - $ca**2 - $cb**2 + 2*$ca*$cb*$cg );

    return $V;
}
