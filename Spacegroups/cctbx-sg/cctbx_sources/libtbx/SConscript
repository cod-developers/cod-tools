import libtbx.load_env
import libtbx.config
from libtbx import easy_run
from libtbx.path import norm_join, full_command_path
import sys, os

if (hasattr(Environment, "Clone")):
  Environment.Copy = Environment.Clone # XXX backward compatibility 2008_03_30

def SCons_Action_FunctionAction_get_contents(self, target, source, env,
                                                   dict=None):
  import cPickle, string
  try:
    code = cPickle.dumps(self.execfunction)
  except (TypeError, cPickle.PicklingError):
    code = self.execfunction.func_name
  return str(code) + env.subst(string.join(map(lambda v: '${'+v+'}',
                                               self.varlist)))
if (1):
  import SCons.Action
  SCons.Action.FunctionAction.get_contents = \
  SCons_Action_FunctionAction_get_contents

class empty: pass

def get_gcc_version():
  gcc_version = easy_run.fully_buffered(command="gcc --version") \
    .raise_if_errors() \
    .stdout_lines[0].strip()
  flds = gcc_version.split()
  if (len(flds) < 3 or flds[0] != "gcc" or flds[1] != "(GCC)"):
    return None
  major_minor_patchlevel = flds[2].split(".")
  if (len(major_minor_patchlevel) != 3):
    return None
  num = []
  for fld in major_minor_patchlevel:
    try: i = int(fld)
    except ValueError:
      return None
    num.append(i)
  return ((num[0]*100)+num[1])*100+num[2]

def set_python_include_and_libs(env_etc):
  env_etc.python_include = libtbx.config.python_include_path()
  if (sys.platform == "win32"):
    env_etc.libs_python = ["python" + sys.version[0] + sys.version[2]]
    env_etc.libpath_python = [sys.prefix + r"\libs"]
  elif (env_etc.compiler == "tru64_cxx"):
    env_etc.libs_python = ["pthread"]
    env_etc.libpath_python = []
  else:
    env_etc.libs_python = []
    env_etc.libpath_python = []
  if (env_etc.compiler.startswith("darwin_")):
    env_etc.python_framework = "/".join(
      env_etc.python_include.split("/")[:-2] + ["Python"])

env_etc = empty()
env_etc.no_boost_python = ARGUMENTS.get(
  "no_boost_python",
  not libtbx.env.build_options.build_boost_python_extensions)
env_etc.norm_join = norm_join
env_etc.gcc_version = None

env_etc.include_registry = libtbx.config.include_registry() \
  .scan_boost(flag=libtbx.env.build_options.scan_boost)

# XXX backward compatibility 2007-11-18
def disable_strict_aliasing(env): pass
env_etc.disable_strict_aliasing = disable_strict_aliasing

compiler = libtbx.env.build_options.compiler
if (sys.platform == "win32"):
  env_etc.compiler = "win32_cl"
elif (sys.platform.startswith("sunos")):
  if (compiler == "default"):
    env_etc.compiler = "sunos_CC"
  else:
    env_etc.compiler = "unix_"+compiler
    compiler = None
elif (sys.platform.startswith("osf")):
  if (compiler == "default"):
    env_etc.compiler = "tru64_cxx"
  else:
    env_etc.compiler = "unix_"+compiler
    compiler = None
elif (sys.platform.startswith("hp-ux11")):
  if (compiler == "default"):
    env_etc.compiler = "hp_ux11_aCC"
  else:
    env_etc.compiler = "unix_"+compiler
    compiler = None
elif (sys.platform.startswith("irix")):
  if (compiler == "default"):
    env_etc.compiler = "irix_CC"
  else:
    env_etc.compiler = "unix_"+compiler
    compiler = None
elif (sys.platform.startswith("darwin")):
  if (compiler == "default"):
    env_etc.compiler = "darwin_c++"
  else:
    env_etc.compiler = "darwin_"+compiler
    compiler = None
elif (os.name == "posix"):
  if (compiler == "default"):
    env_etc.compiler = "unix_gcc"
  else:
    env_etc.compiler = "unix_"+compiler
    compiler = None
if (compiler not in ("default", None)):
  sys.tracebacklimit = 0
  raise RuntimeError("Compiler not supported on this platform: %s" % compiler)
supported_compilers = (
  "win32_cl",
  "sunos_CC",
  "unix_gcc",
  "unix_ecc",
  "unix_icc",
  "unix_icpc",
  "tru64_cxx",
  "hp_ux11_aCC",
  "irix_CC",
  "darwin_c++",
  "darwin_gcc",
  "darwin_gcc_4.2", # tested with the "GCC 4.2 Developer Preview 1"
                    # distributed by Apple
)
if (not env_etc.compiler in supported_compilers):
  sys.tracebacklimit = 0
  raise RuntimeError("Unknown platform/compiler: %s. Choices are: %s" % (
    env_etc.compiler, ", ".join(supported_compilers)))
if (env_etc.compiler == "unix_icpc"):
  # backward compatibility for CCP4
  env_etc.compiler = "unix_icc"

static_exe = libtbx.env.build_options.static_exe

def enable_more_warnings(env):
  if (env_etc._enable_more_warnings == "gcc"):
    for flags in ["CCFLAGS", "SHCCFLAGS", "CXXFLAGS", "SHCXXFLAGS"]:
      have_change = False
      patched_flags = []
      for item in env[flags]:
        if (item == "-w"):
          patched_flags.extend(["-Wall", "-Wno-sign-compare"])
          have_change = True
        else:
          patched_flags.append(item)
      if (have_change):
        env.Replace(**{flags: patched_flags})

env_etc.enable_more_warnings = enable_more_warnings
env_etc._enable_more_warnings = None

if (sys.platform == "win32"):
  env_etc.static_libraries = 1
  env_etc.static_bpl = 0
  set_python_include_and_libs(env_etc)
  env_etc.extension_module_suffix = ".pyd"
  if (env_etc.compiler == "win32_cl"):
    cl_exe = full_command_path("cl.exe")
    if (cl_exe is None):
      raise RuntimeError("cl.exe not on PATH")
    cl_info = easy_run.fully_buffered(
      command='"%s"' % cl_exe,
      join_stdout_stderr=True,
      stdout_splitlines=False).stdout_buffer
    if (cl_info.find("Version 13.10") >= 0):
      env_base = Environment(ENV=os.environ, MSVS_VERSION="7.1")
    elif (cl_info.find("Version 14.00") >= 0):
      env_base = Environment(ENV=os.environ, MSVS_VERSION="8.0")
    else:
      env_base = Environment(ENV=os.environ)
    print "MSVS_VERSION:", env_base["MSVS_VERSION"]
    env_etc.have_manifest_tool = os.path.isfile(
      os.path.join(os.path.dirname(cl_exe), "mt.exe"))
    env_base.Replace(
      SHCC="cl",
      SHCXX="cl",
      SHLINK="link",
    )
    env_etc.ccflags_base = """
      /nologo
      /D_SECURE_SCL=0
      /D_CRT_SECURE_NO_DEPRECATE
      /wd4996
      /Zm800
      /MD
    """.split()
    env_etc.cxxflags_base = env_etc.ccflags_base + """
      /GR
      /EHsc
    """.split()
    if (libtbx.env.build_options.optimization):
      opts = ["/DNDEBUG", "/Ox"]
    else:
      opts = ["/Od"]
    if not libtbx.env.build_options.enable_boost_threads:
      opts.append('/DBOOST_DISABLE_THREADS')
    if (libtbx.env.build_options.debug_symbols):
      raise RuntimeError("Debug build not supported.")
    env_etc.cxxflags_base.extend(opts)
    env_etc.ccflags_base.extend(opts)
    env_etc.shlinkflags = "/nologo /incremental:no /dll"
    env_etc.shlinkflags_bpl = env_etc.shlinkflags
    env_etc.libm = []
  else:
    sys.tracebacklimit = 0
    raise RuntimeError("Unknown compiler choice: %s" % env_etc.compiler)
else:
  env_etc.mac_cpu = None
  env_etc.mac_cpu_is_g4 = None
  env_etc.mac_os_version = None
  if (sys.platform.startswith("darwin")):
    env_etc.mac_cpu = easy_run.fully_buffered(
      command="/usr/bin/uname -p") \
      .raise_if_errors() \
      .stdout_lines[0].strip()
    def mac_cpu_is_g4():
      if (env_etc.mac_cpu != "powerpc"): return False
      lines = easy_run.fully_buffered(
        command="/usr/sbin/system_profiler SPHardwareDataType") \
        .raise_if_errors() \
        .stdout_lines
      for line in lines:
        line = line.strip()
        if (   line.startswith("Machine Name: ")
            or line.startswith("Machine Model: ")
            or line.startswith("CPU Type: ")):
          if (line.find(" G4 ") > 0 or line.endswith(" G4")):
            return True
          break
      return False
    env_etc.mac_cpu_is_g4 = mac_cpu_is_g4()
    env_etc.mac_os_version = ".".join(easy_run.fully_buffered(
      command="/usr/bin/sw_vers -productVersion")
      .raise_if_errors()
      .stdout_lines[0].strip().split(".")[:2])
    if (env_etc.mac_os_version == "10.3"):
      os.environ["MACOSX_DEPLOYMENT_TARGET"] = env_etc.mac_os_version
  env_base = Environment(
    ENV=os.environ,
    tools=['cc','g++','gnulink','ar'])
  set_python_include_and_libs(env_etc)
  if (sys.platform.startswith("darwin")):
    env_etc.shlibsuffix = ".dylib"
    env_etc.extension_module_suffix = ".so"
    env_base.Append(LIBSUFFIXES=[".dylib"])
  elif (sys.platform.startswith("hp-ux11")):
    env_etc.shlibsuffix = ".sl"
    env_etc.extension_module_suffix = ".sl"
  else:
    env_etc.shlibsuffix = ".so"
    env_etc.extension_module_suffix = ".so"
  env_etc.libm = ["m"]
  if (env_etc.compiler == "tru64_cxx"):
    env_etc.static_libraries = 0
    env_etc.static_bpl = 0
    cxx = "cxx"# -model ansi"
    env_base.Replace(
      CC="cc",
      SHCC="cc",
      CXX=cxx,
      LINK=cxx,
      SHCXX=cxx,
      SHLINK=cxx,
    )
    env_etc.cxxflags_base = Split("""
        -std strict_ansi
        -msg_display_number -msg_disable 186,450,768,1115,1133,1168,1169
        -tlocal
    """)
    env_etc.ccflags_base = Split("""
        -std1
    """)
    if (libtbx.env.build_options.optimization):
      opts = ["-DNDEBUG", "-O2", "-fast"]
    else:
      opts = ["-O0"]
    if (libtbx.env.build_options.debug_symbols):
      opts.insert(0, "-g")
    if not libtbx.env.build_options.enable_boost_threads:
      opts.append('-DBOOST_DISABLE_THREADS')
    env_etc.cxxflags_base.extend(opts)
    env_etc.ccflags_base.extend(opts)
    if (static_exe):
      env_base.Prepend(LINKFLAGS=["-non_shared"])
      static_exe = None
    env_etc.shlinkflags = "-shared -expect_unresolved 'Py*'" \
                        + " -expect_unresolved '_Py*'"
    for line in easy_run.fully_buffered(command="strings /usr/bin/ld") \
                  .raise_if_errors() \
                  .stdout_lines:
      if (line == "lock_registry"):
        env_etc.shlinkflags += " -Wl,-lock_registry"
        break
    env_etc.shlinkflags_bpl = env_etc.shlinkflags
  elif (env_etc.compiler == "hp_ux11_aCC"):
    hp_ux_acc_version = libtbx.config.get_hp_ux_acc_version() # not used
    if (libtbx.config.get_ldd_output().find("hpux64/libc") >= 0):
      abi = " +DD64"
    else:
      abi = ""
    env_etc.static_libraries = 0
    env_etc.static_bpl = 0
    env_base.Replace(
      CC="cc"+abi,
      SHCC="cc"+abi,
      CXX="aCC"+abi,
      LINK="aCC"+abi,
      SHCXX="aCC"+abi,
      SHLINK="aCC"+abi,
    )
    env_etc.cxxflags_base = Split("""
      -AA
      -mt
      +W2001,2021,2047,2061,2063,2068,2111,2161,2167,2177,2185,2186,2191,2236,2334,2340,2414,2461,2549,2550,2761,2811,2837,2940,2997,4067,4189,4257
    """)
    env_etc.ccflags_base = Split("""
      -Ae
      -mt
    """)
    if (libtbx.env.build_options.optimization):
      opts = ["-DNDEBUG", "-O"]
    else:
      opts = ["-DNDEBUG", "+O0"]
    if (libtbx.env.build_options.debug_symbols):
      opts.insert(0, "-g")
    if not libtbx.env.build_options.enable_boost_threads:
      opts.append('-DBOOST_DISABLE_THREADS')
    env_etc.cxxflags_base.extend(opts)
    env_etc.ccflags_base.extend(opts)
    if (static_exe):
      raise RuntimeError("Please customize...")
      env_base.Prepend(LINKFLAGS=[])
      static_exe = None
    env_etc.shlinkflags = "-b -Wl,-E"
    env_etc.shlinkflags_bpl = env_etc.shlinkflags
  elif (env_etc.compiler == "sunos_CC"):
    env_etc.static_libraries = 0
    env_etc.static_bpl = 0
    # boost compilation fails under Sun compilers (M.D. Winn, 2005 Oct)
    env_etc.no_boost_python = 1
    cxx = "CC"
    env_base.Replace(
      CC="cc",
      SHCC="cc",
      CXX=cxx,
      LINK=cxx,
      SHCXX=cxx,
      SHLINK=cxx,
    )
    env_etc.cxxflags_base = Split("""
    """)
    env_etc.ccflags_base = Split("""
    """)
    if (libtbx.env.build_options.optimization):
      opts = ["-O"]
    else:
      opts = ["-O0"]
    if (libtbx.env.build_options.debug_symbols):
      opts.insert(0, "-g")
    env_etc.cxxflags_base.extend(opts)
    env_etc.ccflags_base.extend(opts)
    if (static_exe):
      env_base.Prepend(LINKFLAGS=[""])
      static_exe = None
    env_etc.shlinkflags = "-shared -expect_unresolved 'Py*'" \
                        + " -expect_unresolved '_Py*'"
    env_etc.shlinkflags_bpl = env_etc.shlinkflags
  elif (env_etc.compiler == "unix_gcc"):
    env_etc.gcc_version = get_gcc_version()
    env_etc.static_libraries = 0
    env_etc.static_bpl = 0
    env_base.Replace(
      CC="gcc",
      SHCC="gcc",
      CXX="g++",
      LINK="g++",
      SHCXX="g++",
      SHLINK="g++",
      SHLIBSUFFIX=env_etc.shlibsuffix,
    )
    if (libtbx.env.build_options.warning_level == 0):
      warn_options = "-w"
      env_etc._enable_more_warnings = "gcc"
    elif (libtbx.env.build_options.warning_level == 1):
      warn_options = "-Wall -Wno-sign-compare"
    else:
      warn_options = "-Wall -Wno-sign-compare -Werror"
    env_etc.cxxflags_base = Split("""
      -fno-strict-aliasing
      -fPIC
      -ftemplate-depth-120
      %s
    """ % warn_options)
    env_etc.ccflags_base = Split("""
      -fno-strict-aliasing
      -fPIC
      %s
    """ % warn_options)
    if (libtbx.env.build_options.optimization):
      opts = ["-DNDEBUG", "-O3", "-ffast-math"]
      if (env_etc.gcc_version >= 40300):
        opts.append("-fno-associative-math")
      opts.append("-ftrapping-math")
    else:
      opts = ["-O0", "-fno-inline"]
    if (libtbx.env.build_options.debug_symbols):
      opts.insert(0, "-g")
    if not libtbx.env.build_options.enable_boost_threads:
      opts.append('-DBOOST_DISABLE_THREADS')
    env_etc.cxxflags_base.extend(opts)
    env_etc.ccflags_base.extend(opts)
    if (static_exe):
      env_base.Prepend(LINKFLAGS=["-static"])
      static_exe = None
    env_etc.shlinkflags = "-shared"
    env_etc.shlinkflags_bpl = env_etc.shlinkflags
  elif (env_etc.compiler == "unix_ecc"):
    env_etc.static_libraries = 0
    env_etc.static_bpl = 0
    env_base.Replace(
      CC="ecc",
      SHCC="ecc",
      CXX="ecc",
      LINK="ecc",
      SHCXX="ecc",
      SHLINK="ecc",
    )
    env_etc.cxxflags_base = Split("""
      -fPIC
    """)
    env_etc.ccflags_base = Split("""
      -fPIC
    """)
    if (libtbx.env.build_options.optimization):
      opts = ["-DNDEBUG", "-O", "-tpp2", "-ip", "-ftz"]
    else:
      opts = ["-O0"]
    if (libtbx.env.build_options.debug_symbols):
      opts.insert(0, "-g")
    if not libtbx.env.build_options.enable_boost_threads:
      opts.append('-DBOOST_DISABLE_THREADS')
    env_etc.cxxflags_base.extend(opts)
    env_etc.ccflags_base.extend(opts)
    env_etc.shlinkflags = "-shared"
    env_etc.shlinkflags_bpl = env_etc.shlinkflags
  elif (env_etc.compiler == "unix_icc"):
    env_etc.static_libraries = 0
    env_etc.static_bpl = 0
    env_base.Replace(
      CC="icc",
      SHCC="icc",
      CXX="icpc",
      LINK="icpc",
      SHCXX="icpc",
      SHLINK="icpc",
    )
    env_etc.cxxflags_base = Split("""
      -fPIC
    """)
    env_etc.ccflags_base = Split("""
      -fPIC
    """)
    if (libtbx.env.build_options.optimization):
      opts = ["-DNDEBUG", "-O2"]
    else:
      opts = ["-O0"]
    if (libtbx.env.build_options.debug_symbols):
      opts.insert(0, "-g")
    if not libtbx.env.build_options.enable_boost_threads:
      opts.append('-DBOOST_DISABLE_THREADS')
    env_etc.cxxflags_base.extend(opts)
    env_etc.ccflags_base.extend(opts)
    env_etc.shlinkflags = "-shared"
    env_etc.shlinkflags_bpl = env_etc.shlinkflags
  elif (env_etc.compiler == "irix_CC"):
    env_etc.mipspro_version = libtbx.config.get_mipspro_version()
    env_etc.static_libraries = 0
    env_etc.static_bpl = 0
    cxx = "CC -n32 -mips4 -LANG:std"
    cxx += " -LANG:pch=OFF -no_prelink -ptused"
    env_base.Replace(
      CC="cc",
      SHCC="cc",
      CXX=cxx,
      LINK=cxx+" -LD_MSG:off=15,84",
      SHCXX=cxx,
      SHLINK=cxx,
    )
    if (env_etc.mipspro_version == "73"):
      env_etc.cxxflags_base = [
        "-woff", "1001,1183,1188,1234,1311,1682,3439"]
    else:
      env_etc.cxxflags_base = [
        "-woff",
        "1001,1174,1183,1188,1234,1311,1682,1685,"
        "3321,3439,3506,3896,3968,3970"]
    if (    env_etc.mipspro_version == "73"
        and libtbx.env.module_dict.has_key("boost")):
      env_etc.cxxflags_base.insert(0,
        "-I%s/boost/compatibility/cpp_c_headers"
        % libtbx.env.dist_path("boost"))
    if not libtbx.env.build_options.enable_boost_threads:
      env_etc.cxxflags_base.append("-DBOOST_DISABLE_THREADS")
    env_etc.ccflags_base = []
    if (libtbx.env.build_options.optimization):
      opts = ["-DNDEBUG", "-O2", "-OPT:Olimit=0"]
    else:
      opts = ["-O0"]
    if (libtbx.env.build_options.debug_symbols):
      opts.insert(0, "-g")
    env_etc.cxxflags_base.extend(opts)
    env_etc.ccflags_base.extend(opts)
    if (static_exe):
      env_base.Prepend(LINKFLAGS=["-non_shared"])
      static_exe = None
    env_etc.shlinkflags = ["-shared", "-LD_MSG:off=15,84"]
    env_etc.shlinkflags_bpl = env_etc.shlinkflags
  elif (env_etc.compiler in ["darwin_c++", "darwin_gcc", "darwin_gcc_4.2"]):
    env_etc.static_libraries = 1
    env_etc.static_bpl = 0
    need_fcoalesce_templates = False
    if (env_etc.compiler == "darwin_gcc"):
      cc = "gcc"
      cxx = "g++"
    elif env_etc.compiler == "darwin_gcc_4.2":
      cc = "gcc-4.2"
      cxx = "g++-4.2"
    else:
      cc = "cc"
      cxx = "c++"
      cxx_version = easy_run.fully_buffered(command="c++ -dumpversion") \
        .raise_if_errors() \
        .stdout_lines[0].strip()
      cxx_major = cxx_version.split(".")[:1]
      if (len(cxx_major) == 1):
        try: cxx_major = int(cxx_major[0])
        except ValueError: pass
        else:
          if (cxx_major <= 3):
            need_fcoalesce_templates = True
    env_base.Replace(
      CC=cc,
      SHCC=cc,
      CXX=cxx,
      LINK=cxx,
      LINKFLAGS=["-w"], # suppress "source/lib does not exist" warning
      SHCXX=cxx,
      SHLINK=cxx,
      SHLIBSUFFIX=env_etc.shlibsuffix,
    )
    if (libtbx.env.build_options.warning_level == 0):
      warn_options = "-w"
      env_etc._enable_more_warnings = "gcc"
    elif (libtbx.env.build_options.warning_level == 1):
      warn_options = "-Wall -Wno-sign-compare"
    else:
      warn_options = "-Wall -Wno-sign-compare -Werror"
    env_etc.ccflags_base = [
      "-fno-strict-aliasing",
      "-fPIC"] + warn_options.split()
    if (cxx == "c++"):
      env_etc.ccflags_base.extend(["-no-cpp-precomp", "-Wno-long-double"])
    env_etc.cxxflags_base = list(env_etc.ccflags_base)
    if (need_fcoalesce_templates):
      env_etc.cxxflags_base.append("-fcoalesce-templates")
    env_etc.cxxflags_base.append("-ftemplate-depth-130")
    if not libtbx.env.build_options.enable_boost_threads:
      env_etc.cxxflags_base.append("-DBOOST_DISABLE_THREADS")
    if (libtbx.env.build_options.optimization):
      opts = ["-DNDEBUG", "-O3", "-ffast-math", "-ftrapping-math"]
      if (cxx == "c++" and cxx_version == "4.0.0"):
        opts[1] = "-O2" # Apple's optimizer is broken
      elif (libtbx.env.build_options.max_optimized):
        opts[1] = "-fast"
        if (env_etc.mac_cpu_is_g4):
          opts.insert(1, "-mcpu=G4")
    else:
      opts = ["-O0", "-fno-inline"]
    if (libtbx.env.build_options.debug_symbols):
      opts.insert(0, "-g")
    env_etc.cxxflags_base.extend(opts)
    env_etc.ccflags_base.extend(opts)
    env_etc.shlinkflags = []
    env_etc.shlinkflags_bpl = [
      "-w", # suppress "source/lib does not exist" warning
      "-bundle",
      "-undefined", "dynamic_lookup"]
    if (static_exe):
      # no action required
      static_exe = None
  else:
    sys.tracebacklimit = 0
    raise RuntimeError("Unknown compiler choice: %s" % env_etc.compiler)

env_base["SHOBJSUFFIX"] = env_base["OBJSUFFIX"]

if (static_exe):
  sys.tracebacklimit = 0
  raise RuntimeError("Static executables not supported on this platforms.")

if (env_etc.static_libraries == 0
    and libtbx.env.build_options.static_libraries):
  env_etc.static_libraries = 1
env_etc.static_exe = libtbx.env.build_options.static_exe

env_etc.libtbx_build = libtbx.env.build_path
env_etc.libtbx_include = libtbx.env.under_build("include")
env_etc.libtbx_lib = libtbx.env.lib_path

Export("env_base", "env_etc")
