<!--

  Copyright (c) 2001, 2002, 2003 Steven Knight

  Permission is hereby granted, free of charge, to any person obtaining
  a copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be included
  in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
  KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

-->

<!--

=head2 The C<Objects> method

The C<Objects> method arranges to create the object files that correspond to
the specified source files. It is invoked as shown below:

  @files = Objects $env <source or object files>;

Under Unix, source files ending in F<.s> and F<.c> are currently
supported, and will be compiled into a name of the same file ending
in F<.o>. By default, all files are created by invoking the external
command which results from expanding the C<CCCOM> construction variable,
with C<%E<lt>> and C<%E<gt>> set to the source and object files,
respectively. (See the section above on construction variable expansion
for details).  The variable C<CPPPATH> is also used when scanning source
files for dependencies. This is a colon separated list of pathnames, and
is also used to create the construction variable C<_IFLAGS,> which will
contain the appropriate list of -C<I> options for the compilation. Any
relative pathnames in C<CPPPATH> is interpreted relative to the
directory in which the associated construction environment was created
(absolute and top-relative names may also be used). This variable is
used by C<CCCOM>. The behavior of this command can be modified by
changing any of the variables which are interpolated into C<CCCOM>, such
as C<CC>, C<CFLAGS>, and, indirectly, C<CPPPATH>. It's also possible
to replace the value of C<CCCOM>, itself. As a convenience, this file
returns the list of object filenames.

-->

 <para>

   X

 </para>

 <section>
 <title>The &Object; Method</title>

   <para>

   X

   </para>

 </section>
