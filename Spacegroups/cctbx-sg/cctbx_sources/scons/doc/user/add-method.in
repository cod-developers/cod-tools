<!--

  __COPYRIGHT__

  Permission is hereby granted, free of charge, to any person obtaining
  a copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be included
  in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
  KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

-->

  <para>

  The env.AddMethod(function, [name]) function is used to add a method
  to an environment.  It's typically used to add a "pseudo-builder" or
  wrap up a call to multiple builders.  In the first example, we want
  to install the program into the standard bin dir, but also copy it
  into a local install/bin dir that might be used to build a package
  from.

  </para>

  <scons_example name="ex1">
     <file name="SConstruct" printme="1">
     def install_in_bin_dirs(env, source):
         """Install source in both bin dirs"""
         i1 = env.Install("$BIN", source)
         i2 = env.Install("$LOCALBIN", source)
         return [i1[0], i2][0] # Return a list, like a normal builder
     env = Environment(BIN='/usr/bin', LOCALBIN='#install/bin')
     env.AddMethod(install_in_bin_dirs, "InstallInBinDirs")
     env.InstallInBinDirs(Program('hello.c')) # installs hello in both bin dirs     
     </file>
     <file name="hello.c">
     int main() { printf("Hello, world!\n"); }
     </file>
  </scons_example>

  <para>
  This produces the following:
  </para>

  <scons_output example="ex1">
    <scons_output_command>scons -Q</scons_output_command>
  </scons_output>

  <para>

  It also gives more flexibility in parsing arguments than you can get
  with a builder.  The next example shows a pseudo-builder with a
  named argument that modifies the filename, and a separate argument
  for the resource file (rather than having the builder figure it out
  by file extension).  Also this example demonstrates using the global
  AddMethod function to add a method to the global Environment class,
  so it will be used in all subsequently created environments.

  </para>

  <scons_example name="ex2">
     <file name="SConstruct" printme="1">
     import sys
     def BuildTestProg(env, testfile, resourcefile, testdir="tests"):
         """Build the test program;
         prepends "test_" to src and target, and puts target into testdir."""
         srcfile="test_%s.c"%testfile
         if sys.platform=='win32':
             target="%s/test_%s$EXESUFFIX"%(testdir,[testfile, resourcefile])
         else:
             target="%s/test_%s$EXESUFFIX"%(testdir,testfile)
         p = env.Program(target, srcfile)
         return p
     AddMethod(Environment, BuildTestProg)

     # Now use it
     env=Environment()
     env.BuildTestProg('stuff', resourcefile='res.rc')
     </file>
     <file name="test_stuff.c">
     int main() { printf("Hello, world!\n"); }
     </file>
  </scons_example>

  <para>
  This produces the following (on Linux, anyway; Windows would include the
  resource file):
  </para>

  <scons_output example="ex2">
    <scons_output_command>scons -Q</scons_output_command>
  </scons_output>

  <para>
  Using AddMethod is better than just adding an instance method to an
  Environment because it gets called as a proper method, and AddMethod
  provides for copying the method to any copies of the Environment
  instance.
  </para>
