#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Date$ 
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
#  Parse a CIF file, prepare a COD database table entry from it.
#**

use strict;
use COD::CIFParser::CIFParser;
use COD::CIFData::CIF2COD qw(cif2cod);
use COD::SOptions;
use COD::SUsage;

my $print_header = 0;
    # Indicates whether to print out a header with column names
my $print_keywords = 0;

my $user_columns; # User specified list of columns to be printed

my $use_parser = "c";

my %options;

#* Usage:
#*     $0 --options input.cif inputs*.cif
#*
#* Options:
#*     -C, --cod-number 1000000
#*         Use the specified number, 1000000 in this example, as
#*         a COD number for this structure; do not take the number
#*         from the datablock name.
#*
#*     -c, --continue-on-errors
#*         Continue processing and return successful return status
#*         even if errors are diagnosed.
#*
#*     -c-, --dont-continue-on-errors, --no-continue-on-errors
#*         Stop and return error status if errors are diagnosed.
#*
#*     -h, --print-header
#*         Print header with data column names at the first line
#*         With this option cif2cod use the new field list for the
#*         output file
#*
#*     -h-, --dont-print-header, --no-print-header
#*         Do not print column names on the first (header) line (default).
#*
#*     -k, --keywords
#*         Print values in separate lines prefixed with keywords.
#*
#*     --use-attached-hydrogens
#*         Include number of implicit hydrogens, specified using
#*         _atom_site_attached_hydrogens tag, into the formula sum.
#*
#*     --dont-use-attached-hydrogens,
#*     --no-use-attached-hydrogens,
#*     --ignore-attached-hydrogens
#*         Ignore number of implicit hydrogens, specified using
#*         _atom_site_attached_hydrogens tag, in calculation of the
#*         formula sum. Default option.
#*
#*     --require-only-doi
#*         Do not require all bibliographic details (authors, journal
#*         name, title, year, volume and first page of the publication)
#*         to be present if publication DOI is specified.
#*
#*     --require-full-bibliography
#*         Require author names, journal name, volume, publication title,
#*         year and first page to be present. Default behaviour.
#*
#*     --columns file,flags,Robs
#*     --columns "file flags Robs"
#*         Print only columns specified in this option.
#*
#*      --use-perl-parser   Use the Perl parser for parsing CIFs
#*      --use-c-parser      Use the faster C parser for CIFs (default).
#*
#*     --help  print a short usage message (this message) and exit.
#**

@ARGV = getOptions(

    "-C,--cod-number" => \$options{cod_number},

    "-c,--continue-on-errors"     => sub { $options{continue_on_errors} = 1 },
    "-c-,--no-continue-on-errors" => sub { $options{continue_on_errors} = 0 },
    "--dont-continue-on-errors"   => sub { $options{continue_on_errors} = 0 },
    "--exit-on-errors"            => sub { $options{continue_on_errors} = 0 },

    "-h,--print-header"       => sub { $print_header = 1 },
    "-h-,--dont-print-header" => sub { $print_header = 0 },
    "--no-print-header"       => sub { $print_header = 0 },

    "-k,--keywords"   => sub { $print_keywords = 1 },

    "--use-attached-hydrogens" => sub { $options{use_attached_hydrogens} = 1 },
    "--dont-use-attached-hydrogens" => sub { $options{use_attached_hydrogens} = 0 },
    "--no-use-attached-hydrogens" => sub { $options{use_attached_hydrogens} = 0 },
    "--ignore-attached-hydrogens" => sub { $options{use_attached_hydrogens} = 0 },

    "--require-only-doi"
        => sub{ $options{require_only_doi} = 1 },
    "--require-full-bibliography"
        => sub{ $options{require_only_doi} = 0 },

    "--reformat-space-group" =>
            sub { $options{reformat_spacegroup} = 1; },
    "--dont-reformat-space-group" =>
            sub { $options{reformat_spacegroup} = 0; },
    "--leave-space-space-group" =>
            sub { $options{reformat_spacegroup} = 0; },

    "--columns" => \$user_columns,

    "--use-datablocks-without-coordinates"
        => sub{ $options{use_datablocks_without_coord} = 1 },
    "--use-all-datablocks"
        => sub{ $options{use_datablocks_without_coord} = 1 },

    "--do-not-use-datablocks-without-coordinates"
        => sub{ $options{use_datablocks_without_coord} = 0 },
    "--dont-use-datablocks-without-coordinates"
        => sub{ $options{use_datablocks_without_coord} = 0 },
    "--no-use-datablocks-without-coordinates"
        => sub{ $options{use_datablocks_without_coord} = 0 },
    "--skip-datablocks-without-coordinates"
        => sub{ $options{use_datablocks_without_coord} = 0 },

    "--use-perl-parser"       => sub{ $use_parser = "perl" },
    "--use-c-parser"          => sub{ $use_parser = "c" },

    "--help,--usage"  => sub { usage; exit },
);

sub error
{
    my ( $message, $filename, $dataset, $explanation ) = @_;

    print STDERR $0, ": ";
    print STDERR $filename
        if $filename;
    print STDERR " ",  $dataset->{name}
        if $dataset && exists $dataset->{name};
    print STDERR ": "
        if $filename || $dataset;
    print STDERR $message
        if defined $message;
    print STDERR "\n", $explanation
        if defined $explanation;
    print STDERR "\n";

    die unless $options{continue_on_errors};
}

my @print_columns;

if( defined $user_columns ) {
    @print_columns = map { split( " ", $_ ) } split( ",", $user_columns );
} else {
    @print_columns = @COD::CIFData::CIF2COD::new_data_fields;
}

binmode( STDOUT, ":utf8" );

if( $print_header ) {
    local $\ = "\n";
    if( $print_keywords ) {
        local $, = " ";
        print @print_columns;
    } else {
        local $, = ";";
        print @print_columns;
    }
}

@ARGV = ( "-" ) unless @ARGV;

my $first = 1;

for my $filename (@ARGV) {

    my( $data, $error_count );

    if( $use_parser eq "perl" ) {
        my $parser = new COD::CIFParser::CIFParser;

        $data = $parser->Run($filename, \%options);

        if( defined $parser->YYData->{ERRCOUNT} ) {
            $error_count = $parser->YYData->{ERRCOUNT};
        }
    } else {
        require COD::CCIFParser::CCIFParser;
        ( $data, $error_count ) = COD::CCIFParser::CCIFParser::parse( $filename, \%options );
    }

    if( defined $error_count && $error_count > 0 ) {
        error( $error_count . " error(s) encountered while parsing" );
    }

    my $extracted = cif2cod( $data, $filename, \%options );

    for my $data (@$extracted) {
        my %data = %$data;

        # Print out the collected data fields:
        
        my @data_fields = @COD::CIFData::CIF2COD::default_data_fields;
        if( $print_header || defined $user_columns ) {
            @data_fields = @print_columns;
        }
        if( $print_keywords ) {
            print "\n" unless $first;
            $first = 0;
            my $separator = " ";
            for my $key (@data_fields) {
                my $value = $data{$key};
                if( defined $value ) {
                    # remove trailing dot from numbers:
                    $value =~ s/^\s*(\d+)\.\s*$/$1/;
                    print $key . $separator . $value . "\n";
                }
            }
        } else {
            my $separator = "";
            for my $key (@data_fields) {
                my $value = $data{$key};
                if( defined $value ) {
                    # remove trailing dot from numbers:
                    $value =~ s/^\s*(\d+)\.\s*$/$1/;
                    if( $key ne "text" ) {
                        $value =~ s/\\/\\\\/g;
                        $value =~ s/"/\\"/g;
                    }
                    $value = "\"" . $value . "\"";
                } else {
                    $value = "NULL";
                }
                print $separator, $value;
                $separator = ";";
            }
            print "\n";
        }
    }
}
