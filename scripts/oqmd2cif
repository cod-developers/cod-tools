#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Date$
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
#  Find COD numbers for the .cif files in given directories of file lists.
#**

use strict;
use COD::SOptions;
use COD::SUsage;

my %database = (
    host  => "localhost",
    user  => "reader",
    name  => "oqmd",
    tables => {
        structures => "structures",
    },
    password => "",
    platform => "mysql",
);

my %options;

#*Usage:
#*     $0 [options] [structure1_id  ...]
#*
#*Options:
#*     -d, --database  cod
#*        Use database "cod" to query for strctures.
#*
#*     -h, --host   www.crystallography.net
#*     -s, --server www.crystallography.net
#*        Query COD database on the host 'www.crystallography.net'.
#*
#*     -l, --localhost
#*        Use database server on the localhost to query the COD database.
#*
#*     -p, --port 3306
#*        Use use the specified port (default 3306) to query structures.
#*
#*     -t, --table  data
#*        Use SQL table "data" to query for strctures.
#*
#*     -u, --user cod_reader
#*        Use user name "cod_reader" to access COD database; this reader
#*        sould be granted SELECT priviledge, i.e. should be able to read
#*        the COD database, whithout supplying a password.
#*
#*     --password
#*        Use the specified password (default empty) to connect.
#*
#*     --help  print a short usage message (this message) and exit.
#**

@ARGV = getOptions( 
    "-d,--database"  => \$database{name},
    "-l,--localhost" => sub { $database{host} = 'localhost' },
    "-h,--host"      => \$database{host},
    "-p,--port"      => \$database{port},
    "-s,--server"    => \$database{host},
    "-t,--table"     => \$database{table},
    "-u,--user"      => \$database{user},
    "--password"     => \$database{password},
    "--platform"     => \$database{platform},

    "--help,--usage" => sub { usage; exit },
);

my $dbh = database_connect( \%database );

my @structure_ids = @ARGV;

if( !@structure_ids ) {
    @structure_ids = query_OQMD_structure_ids( $dbh, \%database );
}

do {
    local $, = "\n";
    local $\ = "\n";
    print @structure_ids;
};

exit;

for my $structure_id (@structure_ids) {
    
}

#------------------------------------------------------------------------------

sub database_connect
{
    my ( $database ) = @_;
    
    my $dbh = DBI->connect( "dbi:$database->{platform}:" .
                            "hostname=$database->{host};".
                            "dbname=$database->{name};".
                            "user=$database->{user};".
                            "password=$database->{password}" )
        || die "cannot connect do the database -- $DBI::errstr";

    return $dbh;
}

sub database_disconnect
{
    my ( $dbh ) = @_;

    $dbh->disconnect || die "cannot disconnect -- $DBI::errstr";
}

sub query_OQMD_structure_ids
{
    my ( $dbh, $database ) = @_;

    use DBI;

    my $sth = $dbh->prepare(
        "SELECT id FROM `$database->{tables}{structures}` ORDER BY ID;"
        );

    $sth->execute();

    my @ids = map { $_->[0] } @{$sth->fetchall_arrayref()};

    return @ids;
}
