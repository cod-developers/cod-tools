#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Date$ 
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
#  Classify a CIF structure -- find out if it is organic compound,
#  inorganic, mineral, etc.
#**

use strict;
use warnings;
use File::Basename;
use COD::AtomProperties;
use COD::CIF::Data::Classifyer;
use COD::CIF::Parser qw(parse_cif);
use COD::SOptions;
use COD::SUsage qw(usage options);
use COD::UserMessage qw(warning error prefix_dataname);

my $use_parser = "c";

#* USAGE:
#*   $0 --options input1.cif input*.cif
#*
#* OPTIONS:
#*   --use-perl-parser  Use development CIF parser written in Perl.
#*   --use-c-parser     Use faster C/Yacc CIF parser (default).
#*
#*   --help, --usage    Print a short usage message (this message) and exit.
#**
@ARGV = getOptions(
    "--use-perl-parser"  => sub{ $use_parser = "perl" },
    "--use-c-parser"     => sub{ $use_parser = "c" },

    "--options"          => sub { options; exit },
    "--help,--usage"     => sub { usage; exit }
);

@ARGV = ( "-" ) unless @ARGV;

for my $filename (@ARGV) {

    my $options = { 'parser' => $use_parser, 'no_print' => 1 };
    my ( $data, $err_count, $messages ) = parse_cif( $filename, $options );

    if ( $err_count > 0 ) {
        print STDERR $_ foreach ( @$messages );
        error( $0, $filename, undef, "$err_count error(s) "
             . "encountered while parsing the file", undef );
        next;
    }
    print STDERR $_ foreach ( @$messages );

    if( !@$data || !defined $data->[0] || !defined $data->[0]{name} ) {
        warning( $0, $filename, undef,
                 "file '$filename' seems to be empty", undef );
        next;
    }

    my $bond_safety_margin = 0.2; # Angstroems

    for my $datablock (@$data) {
        eval {
            my $flags = cif_class_flags
                ( $datablock, $filename, \%COD::AtomProperties::atoms,
                  $bond_safety_margin );

            if( $flags ) {
                print $datablock->{name}, "\t", $flags, "\n";
            } else {
                print $datablock->{name}, "\t", 0, "\n";
            }
        };
        if( $@ ) {
            warning( $0, $filename, prefix_dataname( $datablock->{name} ),
                     lcfirst($@), undef );
        }
    }
}
