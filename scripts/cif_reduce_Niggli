#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Date$ 
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
#  Performs Niggli cell reduction of CIF files.
#**

use strict;
use warnings;
use COD::CIF::Parser qw( parse_cif );
use COD::Algebra::Vector qw( matrix_vector_mul
                             vector_modulo_1 );
use COD::CIF::Data qw( get_cell );
use COD::CIF::Tags::CanonicalNames qw( canonicalize_all_names );
use COD::CIF::Tags::Print qw( print_cif );
use COD::Cell::Niggli::KG76 qw( reduce );
use COD::Fractional qw( symop_fract_from_ortho
                        symop_ortho_from_fract );
use COD::Spacegroups::Symop::Algebra qw( symop_det );
use COD::SOptions qw( getOptions );
use COD::SUsage qw( usage options );
use COD::ErrorHandler qw( process_warnings
                          process_errors
                          process_parser_messages );

my $die_on_error_level = {
    ERROR   => 1,
    WARNING => 0,
    NOTE    => 0
};

my $use_parser = 'c';
$COD::Cell::Niggli::KG76::debug = 0;

# Format for floating point numbers:
my $fformat = "%.12g";

my $Pi = 4 * atan2(1,1);

#* USAGE:
#*     $0 --options input1.cif input*.cif
#*
#* OPTIONS:
#*     --use-perl-parser
#*        Use Perl parser for CIF parsing.
#*
#*     --use-c-parser
#*        Use Perl & C parser for CIF parsing.
#*
#*     --debug, --no-debug
#*        Turn on/off the debug prints of reduction algorithm. Default off.
#*
#*     --help, --usage
#*        Print short usage message (this message) and exit.
#**
@ARGV = getOptions(
    "--debug"    => sub{ $COD::Cell::Niggli::KG76::debug = 1 },
    "--no-debug" => sub{ $COD::Cell::Niggli::KG76::debug = 0 },

    "--use-perl-parser" => sub { $use_parser = "perl" },
    "--use-c-parser"    => sub { $use_parser = "c" },
    "--options"         => sub { options; exit },
    "--help,--usage"    => sub { usage; exit }
);

@ARGV = ( "-" ) unless @ARGV;

for my $filename (@ARGV) {

    my $options = { 'parser' => $use_parser, 'no_print' => 1 };
    my ( $data, $err_count, $messages ) = parse_cif( $filename, $options );
    process_parser_messages( $messages, $die_on_error_level );
    next if ( $err_count > 0 );

    canonicalize_all_names( $data );

    for my $datablock (@$data) {
        my $values = $datablock->{values};
        my $dataname = 'data_' . $datablock->{name} if defined $datablock->{name};

        local $SIG{__WARN__} = sub { process_warnings( {
                                       'message'       => @_,
                                       'program'       => $0,
                                       'filename'      => $filename,
                                       'add_pos'       => $dataname
                                     }, $die_on_error_level ) };

        eval {
            my @cell = get_cell( $values );
            my $f2o = symop_ortho_from_fract( @cell );
            my @niggli = reduce( @cell );
            my $o2f = symop_fract_from_ortho( @niggli );
            my $CoB = pop( @niggli );

            $values->{_cell_length_a}[0] = $niggli[0];
            $values->{_cell_length_b}[0] = $niggli[1];
            $values->{_cell_length_c}[0] = $niggli[2];
            $values->{_cell_angle_alpha}[0] = $niggli[3];
            $values->{_cell_angle_beta}[0]  = $niggli[4];
            $values->{_cell_angle_gamma}[0] = $niggli[5];

            my( $a, $b, $c ) = @cell;
            my( $ca, $cb, $cg ) = map { cos( $Pi * $_ / 180 ) } @cell[3..5];

            my $atom_site_tag;
            for my $tag (qw( _atom_site_label
                             _atom_site_type_symbol )) {
                next if !exists $values->{$tag};
                $atom_site_tag = $tag;
                last;
            }
            if( !$atom_site_tag ) {
                die 'ERROR, neither \'_atom_site_label\' nor ' .
                    '\'_atom_site_type_symbol\' tag present' . "\n";
            }

            $CoB = mat3_inv( $CoB );

            for( my $i = 0; $i < @{$values->{$atom_site_tag}}; $i++ ) {
                my $coordinates = [ map { s/\(\d+\)$//; $_ }
                    (
                        $values->{'_atom_site_fract_x'}[$i],
                        $values->{'_atom_site_fract_y'}[$i],
                        $values->{'_atom_site_fract_z'}[$i],
                    )
                ];

                my $coordinates_now =
                    vector_modulo_1( matrix_vector_mul( $CoB,
                                                        $coordinates ) );
                    
                ( $values->{'_atom_site_fract_x'}[$i],
                  $values->{'_atom_site_fract_y'}[$i],
                  $values->{'_atom_site_fract_z'}[$i] ) =
                    map { sprintf( $fformat, $_ ) }
                        @$coordinates_now;
            }

            print_cif( $datablock,
              {
                preserve_loop_order => 1,
                keep_tag_order => 1
              }
            );
        };
        if ($@) {
            process_errors( {
              'message'       => $@,
              'program'       => $0,
              'filename'      => $filename,
              'add_pos'       => $dataname
            }, $die_on_error_level->{'ERROR'} );
        }
    }
}

sub mat3_inv
{
    my( $m ) = @_;
    my $c = 1 / symop_det($m);
    return [[ $c * ( $m->[1][1] * $m->[2][2] - $m->[1][2] * $m->[2][1] ),
             -$c * ( $m->[0][1] * $m->[2][2] - $m->[0][2] * $m->[2][1] ),
              $c * ( $m->[0][1] * $m->[1][2] - $m->[0][2] * $m->[1][1] )],
            [-$c * ( $m->[1][0] * $m->[2][2] - $m->[1][2] * $m->[2][0] ),
              $c * ( $m->[0][0] * $m->[2][2] - $m->[0][2] * $m->[2][0] ),
             -$c * ( $m->[0][0] * $m->[1][2] - $m->[0][2] * $m->[1][0] )],
            [ $c * ( $m->[1][0] * $m->[2][1] - $m->[1][1] * $m->[2][0] ),
             -$c * ( $m->[0][0] * $m->[2][1] - $m->[0][1] * $m->[2][0] ),
              $c * ( $m->[0][0] * $m->[1][1] - $m->[0][1] * $m->[1][0] )]];
}
