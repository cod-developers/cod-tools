#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Date$ 
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
#  Apply symmetry operator(s) to all atoms in a CIF.
#**

use strict;
use warnings;
use COD::CIF::Parser qw( parse_cif );
use COD::Spacegroups::Symop::Parse qw( symop_from_string );
use COD::Spacegroups::Symop::Algebra qw( symop_mul symop_apply );
use COD::CIF::Tags::Print qw( print_cif );
use COD::SOptions qw( getOptions get_value );
use COD::SUsage qw( usage options );
use COD::UserMessage qw( warning error );

my $use_parser = "c";

my @symops = ();

#* USAGE:
#*     $0 --options input1.cif input*.cif
#*
#* OPTIONS:
#*    -s, --symop, --symmetry-operator -x,-y,z
#*        Apply the specified symmetry operator.
#*
#*    -a, --add-symop, --add-symmetry-operator -x,-y,z
#*        Add the specified symmetry operator to the applied operato list.
#*
#*    --use-perl-parser
#*        Use development CIF parser written in Perl.
#*    --use-c-parser
#*        Use faster C/Yacc CIF parser (default).
#*
#*    --help, --usage
#*        Print a short usage message (this message) and exit.
#**
@ARGV = getOptions(
    "-s,--symop,--symmetry-operator" => sub { @symops = (&get_value) },
    "-a,--add-symop,--add-symmetry-operator" => \@symops,
    "--use-perl-parser"  => sub { $use_parser = "perl" },
    "--use-c-parser"     => sub { $use_parser = "c" },
   "--options"           => sub { options; exit },
    "--help,--usage"     => sub { usage; exit }
);

@ARGV = ( "-" ) unless @ARGV;

my $symop_matrix = symop_from_string( "x,y,z");

for my $symop (@symops) {
    $symop_matrix = symop_mul
        ( $symop_matrix, symop_from_string( $symop ));
}

for my $filename (@ARGV) {

    my $options = { 'parser' => $use_parser, 'no_print' => 1 };
    my ( $data, $err_count, $messages ) = parse_cif( $filename, $options );

    if ( $err_count > 0 ) {
        print STDERR $_ foreach ( @$messages );
        error( $0, $filename, undef, "$err_count error(s) "
             . "encountered while parsing the file", undef );
        die;
    }
    print STDERR $_ foreach ( @$messages );

    if( !@$data || !defined $data->[0] || !defined $data->[0]{name} ) {
        warning( $0, $filename, undef, 'file seems to be empty', undef );
        next;
    }

    for my $datablock (@$data) {
        my $values = $datablock->{values};
        for( my $i = 0; $i <= $#{$values->{_atom_site_fract_x}}; $i ++ ) {
            my @xyz = (
                $values->{_atom_site_fract_x}[$i],
                $values->{_atom_site_fract_y}[$i],
                $values->{_atom_site_fract_z}[$i],
                );

            my $new_xyz = symop_apply( $symop_matrix, \@xyz );

            $values->{_atom_site_fract_x}[$i] = $new_xyz->[0];
            $values->{_atom_site_fract_y}[$i] = $new_xyz->[1];
            $values->{_atom_site_fract_z}[$i] = $new_xyz->[2];
        }
        do {
            local $, = " ";
            local $\ = "\n";
            print @{$datablock->{tags}};
        } if 0;
        print_cif( $datablock, {
            dictionary_tags => $datablock->{values},
            dictionary_tag_list => $datablock->{tags},
        });
    }
}
