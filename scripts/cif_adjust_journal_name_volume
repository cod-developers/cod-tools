#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Date$ 
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
#  If journal volume starts with a letter, add this letter to the
#  journal name, and leave journal volume purely numeric.
#**

use strict;
use warnings;
use COD::CIFParser::CIFParser;
use COD::CIFTags::CIFTagCanonicalNames;
use COD::CIFTags::CIFDictTags;
use COD::CIFTags::CIFCODTags;
use COD::CIFTags::CIFTagPrint;
use COD::UserMessage;
use COD::SOptions;
use COD::SUsage;

my $keep_tag_order = 0;

#* USAGE:
#*     $0 [options] input.cif [input2.cif ...]
#*
#* OPTIONS:
#*   --keep-tag-order
#*                      Keep the original tag order in CIF file (default).
#*   --sort-tags
#*                      Reorder tags in CIF file according to COD.
#*
#**  --help,--usage     Print a short usage message (this message) and exit.

@ARGV = getOptions(
    "--keep-tag-order" => sub { $keep_tag_order = 1; },
    "--sort-tags"      => sub { $keep_tag_order = 0; },
    "--help,--usage"   => sub { usage; exit },
);

my @dictionary_tags = ( @COD::CIFTags::CIFDictTags::tag_list,
                        @COD::CIFTags::CIFCODTags::tag_list );
my %dictionary_tags = map { $_, $_ } @dictionary_tags;

@ARGV = ("-") unless @ARGV;

for my $filename (@ARGV) {
    my $parser = new COD::CIFParser::CIFParser;
    my $data = $parser->Run($filename);

    if( defined $parser->YYData->{ERRCOUNT} &&
        $parser->YYData->{ERRCOUNT} > 0 ) {
        error( $0, $filename, undef, $parser->YYData->{ERRCOUNT}
             . " error(s) encountered while parsing CIF data" );
        exit -1;
    }

    canonicalize_all_names( $data );

    for my $dataset (@$data) {

        my $values = $dataset->{values};

        if( exists $values->{_journal_name_full} &&
            exists $values->{_journal_volume} ) {
            my $journal = $values->{_journal_name_full}[0];
            my $volume = $values->{_journal_volume}[0];

            if( $volume =~ /^\s*([A-Za-z]+)(\d+)/ ) {
                my $letter = $1;
                my $new_volume = $2;
                my $new_journal = $journal;
                if( $journal !~ /$letter$/ ) {
                    $new_journal = $journal . " ". $letter;
                }
                do {
                    print ">>> $filename $dataset->{name}: '$journal' " .
                        "-> '$new_journal'\n";
                    print ">>> $filename $dataset->{name}: '$volume' " .
                        "-> '$new_volume'\n";
                } if 0;

                $values->{_journal_name_full}[0] = $new_journal;
                $values->{_journal_volume}[0] = $new_volume;
            }
        }

        print_cif( $dataset, {
            exclude_misspelled_tags => 0,
            preserve_loop_order => 1,
            fold_long_fields => 0,
            dictionary_tags => \%dictionary_tags,
            dictionary_tag_list => \@dictionary_tags,
            keep_tag_order => $keep_tag_order,
        } );
    }
}
