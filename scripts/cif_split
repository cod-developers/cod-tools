#!/bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#-----------------------------------------------------------------------
#$Author$
#$Date$ 
#$Revision$
#$URL$
#------------------------------------------------------------------------
#*
# Split CIF files into separate files with one data_ section each.
#
# This script parses given CIF files to separate the datablocks, so is
# capable of splitting non-correctly formatted and nested CIF files.
#**

use strict;
use warnings;
use File::Basename qw( basename );
use COD::CIF::Parser qw( parse_cif );
use COD::CIF::Tags::CanonicalNames qw( canonicalize_all_names );
use COD::CIF::Tags::Print qw( print_cif );
use COD::SOptions qw( getOptions get_value );
use COD::SUsage qw( usage options );
use COD::ErrorHandler qw( process_warnings
                          process_errors
                          process_parser_messages );

my $die_on_error_level = {
    ERROR   => 1,
    WARNING => 0,
    NOTE    => 0
};

my $use_parser = "c";

my $verbose = 1;
my $output_dir = "";
my $output_prefixed = 0;
my $output_tar = 0;
my $cif_header_file;

#*  USAGE:
#*      $0 --options input1.cif input*.cif
#*
#*  OPTIONS:
#*  -o, --output-dir out/
#*      Put all split files into the directory out/.
#*
#*  -p, --prefixed, --output-prefixed
#*      Print splitted datablocks to the STDOUT, each line prefixed
#*      by the datablock name. Do not create any files.
#*
#*  --output-tar
#*      Produce TAR archive with split files to the STDOUT.
#*
#*  -h, --add-cif-header header_file.cif
#*      Prepend each of the output files with the comments from the
#*      beginning of the specified file.
#*
#*  -v, --verbose
#*      Print names of the generated files to STDERR.
#*  -q, --quiet
#*      Do not print file names to STDERR.
#*
#*  --use-perl-parser
#*      Use Perl parser for CIF parsing.
#*  --use-c-parser
#*      Use Perl & C parser for CIF parsing.
#*
#*  --help, --usage
#*      Print short usage message (this message) and exit
#**
@ARGV = getOptions(
   "-o,--output-dir" => sub { $output_dir = get_value(),
                              $output_prefixed = 0;
                              $output_tar = 0 },
   "-p,--prefixed,--output-prefixed" => sub { $output_prefixed = 1;
                                              $output_tar = 0 },
   "--output-tar"    => sub { $output_tar = 1;
                              $output_prefixed = 0 },
   "-h,--add-cif-header" => \$cif_header_file,
   "-v,--verbose"    => sub { $verbose = 1 },
   "-q,--quiet"      => sub { $verbose = 0 },

   "--use-perl-parser" => sub { $use_parser = "perl" },
   "--use-c-parser"    => sub { $use_parser = "c" },
   "--options"         => sub { options; exit },
   "--help,--usage"    => sub { usage; exit }
);

# Reading the header file
my $cif_header;
eval {
    if( defined $cif_header_file ) {
        open( my $header, '<', "$cif_header_file" ) or die 'ERROR, '
          . 'could not open CIF header file for reading -- '
          . lcfirst($!) . "\n";

        $cif_header = "";
        while( <$header> ) {
            last unless /^#/;
            $cif_header .= $_;
        }

        close( $header ) or die 'ERROR, '
         . 'error while closing CIF header file after reading -- '
         . lcfirst($!) . "\n";
    }
};
if ($@) {
    process_errors( {
      'message'  => $@,
      'program'  => $0,
      'filename' => $cif_header_file
    }, $die_on_error_level->{ERROR} );
};

$output_dir =~ s./+$..;

my %files = ();
my $tar;
if( $output_tar ) {
    require Archive::Tar;
    $tar = Archive::Tar->new;
}

@ARGV = ("-") unless @ARGV;

for my $filename (@ARGV) {

    my $options = { 'parser' => $use_parser, 'no_print' => 1 };
    my ( $data, $err_count, $messages ) = parse_cif( $filename, $options );
    process_parser_messages( $messages, $die_on_error_level );
    next if ( $err_count > 0 );

    canonicalize_all_names( $data );

    my $data_global;
    for my $dataset (@$data) {
        my $dataname = 'data_' . $dataset->{name} if defined $dataset->{name};

        local $SIG{__WARN__} = sub { process_warnings( {
                                       'message'  => @_,
                                       'program'  => $0,
                                       'filename' => $filename,
                                       'add_pos'  => $dataname
                                     }, $die_on_error_level ) };

        if( $dataset->{name} eq 'global' ) {
            if( !$data_global ) {
                $data_global = $dataset;
            } else {
                warn "WARNING, second data_global encountered -- skipping\n";
            }
            next;
        }

        my $print_cif_stdout;
        do {
            local *STDOUT;
            open( STDOUT, '>', \$print_cif_stdout );
            if( $data_global ) {
                print_cif( $data_global,
                           {
                                preserve_loop_order => 1,
                                keep_tag_order => 1
                           }
                         );
            }
            print_cif( $dataset,
                       {
                            preserve_loop_order => 1,
                            keep_tag_order => 1
                       }
                     );
        };

        my $cif_contents = "";
        $cif_contents .= $cif_header if $cif_header;
        $cif_contents .= $print_cif_stdout;

        if( $output_prefixed ) {
            foreach ( split m/\n/, $cif_contents ) {
                print $dataset->{name}, "\t", $_, "\n";
            };
        } else {
            my $suffix = $dataset->{name};
            $suffix =~ s/[^-+._a-zA-Z0-9]/_/g;

            my $basename = basename( $filename, ".cif" );
            my $output_file;
            if( $basename ne "-" ) {
                $output_file = "${basename}_${suffix}.cif";
            } else {
                $output_file = "${suffix}.cif";
            }
            if( $output_tar ) {
                $tar->add_data( $output_file, $cif_contents );
            } else {
                eval {
                    if( $output_dir ne "" ) {
                        $output_file = $output_dir . "/" . $output_file;
                    }
                    if( !exists $files{$output_file} ) {
                        $files{$output_file} = $output_file;

                        print STDERR "$output_file\n" if $verbose;
                        open( STDOUT, '>', "$output_file" ) or
                            die "ERROR, could not open file for writing -- "
                               . lcfirst($!) . "\n";
                        print $cif_contents;
                    } else {
                        open( STDOUT, '>>', "$output_file" ) or
                            die "ERROR, could not open file for appending -- "
                              . lcfirst($!) . "\n";

                        print STDERR "$output_file (appending)\n" if $verbose;
                    }
                };
                if ($@) {
                    process_errors( {
                    'message'  => $@,
                    'program'  => $0,
                    'filename' => $output_file
                    }, $die_on_error_level->{ERROR} );
                };
            }
        }
    }
}

if( $output_tar ) {
    print $tar->write();
}
