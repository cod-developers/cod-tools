#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Revision$
#$URL$
#$Date$
#$Id$
#------------------------------------------------------------------------------
#*
#  Parse CIF file and print out the structure generated by CIF parser
#**

use strict;
use COD::CIFIO qw(readfile);
use COD::CIF2JSON;
use COD::UserMessage;
use COD::SOptions;
use COD::SUsage;

my $use_parser = 'c';
my %options;
@ARGV = getOptions(

#** USAGE:
#**     $0 [options] input.cif [input2.cif ...]
#** 
#** OPTIONS:
#** --use-c-parser
#**    Use Perl & C parser for CIF parsing (default).
#**
#** --use-perl-parser
#**    Use Perl parser for CIF parsing.
#**
#** --use-json-parser
#**    Use the JSON parser (input is in JSON format).
#**
#** --help,--usage     print short usage message (this message) and exit

    "--use-perl-parser" => sub{ $use_parser = 'perl' },
    "--use-c-parser"    => sub{ $use_parser = 'c' },
    "--use-json-parser" => sub{ $use_parser = 'json' },

    "--do-not-unprefix-text" => sub{ $options{do_not_unprefix_text} = 1 },
    "--do-not-unfold-text"   => sub{ $options{do_not_unfold_text} = 1 },
    "--fix-errors"           => sub{ $options{fix_errors} = 1 },
    "--fix-duplicate-tags-with-same-values"  =>
        sub{ $options{fix_duplicate_tags_with_same_values} = 1 },
    "--fix-duplicate-tags-with-empty-values" =>
        sub{ $options{fix_duplicate_tags_with_empty_values} = 1 },
    "--fix-data-header"     => sub{ $options{fix_data_header} = 1 },
    "--fix-datablock-names" => sub{ $options{fix_datablock_names} = 1 },
    "--fix-string-quotes"   => sub{ $options{fix_string_quotes} = 1 },
    "--fix-missing-closing-double-quote" =>
        sub{ $options{fix_missing_closing_double_quote} = 1 },
    "--fix-missing-closing-single-quote" =>
        sub{ $options{fix_missing_closing_single_quote} = 1 },
    "--fix-ctrl-z"  => sub{ $options{fix_ctrl_z} = 1 },
    "--allow-uqstring-brackets" => sub{ $options{allow_uqstring_brackets} = 1 },

    "--help,--usage"  => sub { usage; exit },
);

@ARGV = ( "-" ) unless @ARGV;

for my $filename (@ARGV) {

    my $data;
    eval {
        $data = readfile( $filename, $use_parser, \%options );
    };
    if( $@ ) {
        error( $0, $filename, undef, $@ );
        next;
    }

    print cif2json( $data );
}
