#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Date$ 
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
#  Check the correspondence between CIF and diffraction data files, taking
#  datablock names, cell parameters, author lists and symmetry group names
#  into account.
#**

use strict;
use warnings;
use COD::CIFParser::CIFParser;
use COD::CIFData::CIFDiff;
use COD::CIFData::CODFlags qw(has_hkl
                              has_powder_diffraction_intensities
                              @hkl_tags
                              @powder_diffraction_intensity_tags);
use COD::CIFTags::CIFTagCanonicalNames;
use COD::Precision;
use COD::UserMessage;
use COD::SOptions;
use COD::SUsage;

my $use_parser = "c";

#* USAGE:
#*     $0 [options] input.cif input.hkl [input2.cif input2.hkl ...]
#*
#* OPTIONS:
#*     --use-perl-parser
#*        Use Perl parser for CIF parsing.
#*
#*     --use-c-parser
#*        Use Perl & C parser for CIF parsing.
#*
#*     --help,--usage
#*        Print short usage message (this message) and exit.
#**

@ARGV = getOptions(
    "--use-perl-parser" => sub{ $use_parser = "perl" },
    "--use-c-parser"    => sub{ $use_parser = "c" },
    "--help,--usage" => sub { usage; exit },
);

PAIR:
while( @ARGV > 0 ) {
    my $cif_file = shift( @ARGV );
    if( @ARGV == 0 ) {
        error( $0, $cif_file, undef, "missing diffraction data file" );
        die;
    }
    my $hkl_file = shift( @ARGV );

    my( $cif_data, $cif_errors ) = parse_file( $cif_file, $use_parser );
    next if $cif_errors > 0;

    if( !@$cif_data || !defined $cif_data->[0] ||
        !defined $cif_data->[0]{name} ) {
        warning( $0, $cif_file, undef,
                 "file '$cif_file' seems to be empty" );
        next;
    }

    canonicalize_all_names( $cif_data );

    my( $hkl_data, $hkl_errors ) = parse_file( $hkl_file, $use_parser );
    next if $hkl_errors > 0;

    if( !@$hkl_data || !defined $hkl_data->[0] ||
        !defined $hkl_data->[0]{name} ) {
        warning( $0, $hkl_file, undef,
                 "file '$hkl_file' seems to be empty" );
        next;
    }

    canonicalize_all_names( $hkl_data );

    if( @$hkl_data > 1 ) {
        warning( $0, $hkl_file, undef, "file '$hkl_file' contains more " .
                                       "than one datablock" );
        next;
    }
    my $hkl_dataset = $hkl_data->[0];
    my $hkl_values = $hkl_dataset->{values};
    if( !has_hkl( $hkl_dataset ) &&
        !has_powder_diffraction_intensities( $hkl_dataset ) ) {
        warning( $0, $hkl_file, undef,
                 "can not confirm that file '$hkl_file' contains " .
                 "Fobs or powder diffraction data: one or more tags " .
                 "from list ( " .
                 join( ", ",
                       map { "'$_'" } @hkl_tags ) .
                 " ) or all tags from list ( " .
                 join( ", ",
                       map { "'$_'" } @powder_diffraction_intensity_tags ) .
                 " ) are missing" );
        next PAIR;
    }
    my $hkl_dataname = get_source_block_name( $hkl_dataset );
    my $cif_index;
    my @cif_datanames;
    for( my $i = 0; $i < @$cif_data; $i++ ) {
        my $cif_dataname = get_source_block_name( $cif_data->[$i] );
        push( @cif_datanames, $cif_dataname );
        if( $cif_dataname eq $hkl_dataname ) {
            $cif_index = $i;
            last;
        }
    }
    if( !defined $cif_index ) {
        warning( $0, $cif_file, undef,
                 "can not confirm relation between any datablocks in " .
                 "CIF and diffraction data files -- there are no " .
                 "datablocks with the same name in both files (CIF " .
                 "datablock(s): " .
                 join( ", ", map { "'$_'" } @cif_datanames ) .
                 ", diffraction data datablock: '$hkl_dataname')" );
        next PAIR;
    }
    my $comm = comm( $cif_data->[$cif_index], $hkl_dataset,
        {
            'compare_only' =>
                [
                    '_cell_length_a',
                    '_cell_length_b',
                    '_cell_length_c',
                    '_cell_angle_alpha',
                    '_cell_angle_beta',
                    '_cell_angle_gamma',
                    '_publ_author_name',
                    '_symmetry_space_group_name_Hall',
                    '_symmetry_space_group_name_H-M',
                ],
            'comparators'  =>
                {
                    '_cell_length_a' => \&cmp_cif_numbers,
                    '_cell_length_b' => \&cmp_cif_numbers,
                    '_cell_length_c' => \&cmp_cif_numbers,
                    '_cell_angle_alpha' => \&cmp_cif_numbers,
                    '_cell_angle_beta'  => \&cmp_cif_numbers,
                    '_cell_angle_gamma' => \&cmp_cif_numbers,
                    '_publ_author_name' => \&compare_lc_strings,
                }
        } );
    foreach my $line ( @$comm ) {
        if( defined $line->[0] && defined $line->[2] ) {
            my $reason;
            if( $line->[0] eq '_publ_author_name' ) {
                $reason = "publication author lists differ";
            } else {
                $reason = "values of tag '$line->[0]' differ";
            }
            $reason .= ": '" . join( ', ', map { "'$_'" }
                  @{$cif_data->[$cif_index]{values}{$line->[0]}} ) .
                  "' (CIF) and '" . join( ', ', map { "'$_'" }
                  @{$hkl_values->{$line->[0]}} ) .
                  "' (diffraction data)";
            warning( $0, $cif_file, $hkl_dataname,
                     "can not confirm relation between datablocks named " .
                     "'$hkl_dataname' from supplied CIF and diffraction " .
                     "data files -- $reason" );
            next PAIR;
        }
    }
    note( $0, $cif_file, undef, "OK" );
}

sub parse_file
{
    my( $file, $use_parser ) = @_;
    my( $data, $errors );
    if( $use_parser eq "perl" ) {
        my $parser = new COD::CIFParser::CIFParser;
        $data = $parser->Run($file);
        $errors = 0;
        if( defined $parser->YYData->{ERRCOUNT} ) {
            $errors = $parser->YYData->{ERRCOUNT};
        }
    } else {
        require COD::CCIFParser::CCIFParser;
        ( $data, $errors ) = COD::CCIFParser::CCIFParser::parse( $file );
    }
    return( $data, $errors );
}

sub compare_lc_strings
{
    my( $a, $b ) = @_;
    return lc( $a ) cmp lc( $b );
}

# Returns datablock name. Original source data block name, if specified, is
# prefered. If not specified, current data block name is returned.
sub get_source_block_name
{
    my( $datablock ) = @_;
    my $values = $datablock->{values};
    if( exists $values->{'_cod_data_source_block'} ) {
        return $values->{'_cod_data_source_block'}[0];
    }
    if( exists $values->{'_[local]_cod_data_source_block'} ) {
        return $values->{'_[local]_cod_data_source_block'}[0];
    }
    return $datablock->{name};
}
