#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Date$ 
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
#  Parse a CIF file, reformat author names in PubMed convention into
#  COD format.
#**

use strict;
use warnings;
use COD::CIF::Parser::Yapp;
use COD::CIF::Tags::CanonicalNames;
use COD::CIF::Tags::DictTags;
use COD::CIF::Tags::COD;
use COD::CIF::Tags::Print;
use COD::SOptions;
use COD::SUsage qw(usage options);

my $keep_tag_order = 0;

#* USAGE:
#*     $0--options input1.cif input*.cif
#*
#* OPTIONS:
#*   --keep-tag-order
#*                      Keep the original tag order in CIF file (default).
#*   --sort-tags
#*                      Reorder tags in CIF file according to COD.
#*
#*   --help, --usage
#*                      Print a short usage message (this message) and exit.
#**
@ARGV = getOptions(
    "--keep-tag-order" => sub { $keep_tag_order = 1; },
    "--sort-tags"      => sub { $keep_tag_order = 0; },
    "--options"        => sub { options; exit },
    "--help,--usage"   => sub { usage; exit }
);

my @dictionary_tags = ( @COD::CIF::Tags::DictTags::tag_list,
                        @COD::CIF::Tags::COD::tag_list );
my %dictionary_tags = map { $_, $_ } @dictionary_tags;

@ARGV = ("-") unless @ARGV;

for my $filename (@ARGV) {
    my $parser = new COD::CIF::Parser::Yapp;
    my $data = $parser->Run($filename);

    if( defined $parser->YYData->{ERRCOUNT} &&
        $parser->YYData->{ERRCOUNT} > 0 ) {
        print STDERR "$0: $filename: ",
        $parser->YYData->{ERRCOUNT},
        " error(s) encountered while parsing CIF data\n";
        exit -1;
    }

    canonicalize_all_names( $data );

    for my $dataset (@$data) {

        my $values = $dataset->{values};

        if( exists $values->{_publ_author_name} ) {
            for my $i (0..$#{$values->{_publ_author_name}}) {
                my $author = $values->{_publ_author_name}[$i];
                if( $author =~
                    /^
                     \s*((?:[A-Z][a-z]+)?[A-Z][a-z\']+),         # Surname
                     \s+((?:[A-Z](?:\s+|-))*[A-Z])\s*$           # Initials
                    /x ) {
                    my $surname = $1;
                    my $initials = $2;
                    $initials =~ s/([A-Z])/$1./g;
                    $values->{_publ_author_name}[$i] =
                        "$surname, $initials";
                }
                elsif( $author =~
                    /^
                     \s*((?:[A-Z][a-z]+)?[A-Z][a-z\']+),         # Surname
                     \s*((?:[A-Z][a-z\']+)(?:\s+[A-Z][a-z\']+)*) # Name
                     \s+((?:[A-Z](?:\s+|-))*[A-Z])\s*$           # Initials
                    /x ) {
                    my $surname = $1;
                    my $name = $2;
                    my $initials = $3;
                    $initials =~ s/([A-Z])/$1./g;
                    $values->{_publ_author_name}[$i] =
                        "$surname, $name $initials";
                }
                elsif( $author =~
                    /^
                     \s*((?:[A-Z][a-z]+)?[A-Z][a-z\']+),          # Surname
                     \s*((?:[A-Z](?:\s+|-))*[A-Z])\s*             # Initials
                     \s+((?:[A-Z][a-z\']+)(?:\s+[A-Z][a-z\']+)*)$ # Name
                    /x ) {
                    my $surname = $1;
                    my $initials = $2;
                    my $name = $3;
                    $initials =~ s/([A-Z])/$1./g;
                    $values->{_publ_author_name}[$i] =
                        "$surname, $initials $name";
                }
                elsif( $author =~
                    /^
                     \s*((?:[A-Za-z][a-z]*\s+)*[A-Za-z]?[a-z]+) # 'von' prefix
                     \s+((?:[A-Z][a-z]+)?[A-Z][a-z\']+),        # Surname
                     \s+((?:[A-Z](?:\s+|-))*[A-Z])\s*$          # Initials
                    /x ) {
                    my $von_prefix = $1;
                    my $surname = $2;
                    my $initials = $3;
                    $initials =~ s/([A-Z])/$1./g;
                    $values->{_publ_author_name}[$i] =
                        "$von_prefix $surname, $initials";
                }
                elsif( $author =~
                    /^
                     \s*((?:[A-Za-z][a-z]*\s+)*[A-Za-z]?[a-z]+)  # 'von' prefix
                     \s+((?:[A-Z][a-z]+)?[A-Z][a-z\']+),         # Surname
                     \s*((?:[A-Z][a-z\']+)(?:\s+[A-Z][a-z\']+)*) # Name
                     \s+((?:[A-Z](?:\s+|-))*[A-Z])\s*$           # Initials
                    /x ) {
                    my $von_prefix = $1;
                    my $surname = $2;
                    my $name = $3;
                    my $initials = $4;
                    $initials =~ s/([A-Z])/$1./g;
                    $values->{_publ_author_name}[$i] =
                        "$von_prefix $surname, $name $initials";
                }
                elsif( $author =~
                    /^
                     \s*((?:[A-Za-z][a-z]*\s+)*[A-Za-z]?[a-z]+)   # 'von' prefix
                     \s+((?:[A-Z][a-z]+)?[A-Z][a-z\']+),          # Surname
                     \s+((?:[A-Z](?:\s+|-))*[A-Z])\s*             # Initials
                     \s*((?:[A-Z][a-z\']+)(?:\s+[A-Z][a-z\']+)*)$ # Name
                    /x ) {
                    my $von_prefix = $1;
                    my $surname = $2;
                    my $initials = $3;
                    my $name = $4;
                    $initials =~ s/([A-Z])/$1./g;
                    $values->{_publ_author_name}[$i] =
                        "$von_prefix $surname, $initials $name";
                }
            }
        }

        print_cif( $dataset, {
            exclude_misspelled_tags => 0,
            preserve_loop_order => 1,
            fold_long_fields => 0,
            dictionary_tags => \%dictionary_tags,
            dictionary_tag_list => \@dictionary_tags,
            keep_tag_order => $keep_tag_order,
        } );
    }
}
