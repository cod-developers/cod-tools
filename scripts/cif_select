#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Date$ 
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
#  Read CIFs and print out selected tags with their values.
#**

use strict;
use File::Basename;
use COD::CIF::Parser::Yapp;
use COD::CIF::Tags::CanonicalNames;
use COD::CIF::Tags::Manage;
use COD::CIF::Tags::Print;
use COD::SOptions;
use COD::SUsage;

my @selected_tags;

my $treat_dots_as_underscores = 1;
my $canonicalize_tag_names = 0;
my $output_tabular = 0;
my $invert = 0;

my $use_parser = 'c';

#* Usage:
#*     cif_select [options] input.cif [input2.cif ...]
#*
#* Options:
#*     -t, --tags _tag1,_tag2,_tag3
#*     --tags "_tag1 _tag2 _tag3"
#*         Print out values of tags _tag1, _tag2, and _tag3;
#*         the specified tag list becomes a new list of printed tags.
#*
#*     -a, --add-tag _tag4
#*         Add tag _tag4 to the list of printed tags.
#*
#*     -f, --file-with-tags tag.lst
#*         Read tags to be extracted from the file 'tag.lst'. Comments
#*         (lines starting with '#') in 'tag.lst' are ignored.
#*
#*     -c, --clear-tags
#*         Clear the list of printed tags accumulated so far.
#*
#*     --invert
#*         Invert the sense of selection. Exclude values of the tags from
#*         the supplied list.
#*
#**    --treat-dots-as-underscores
#**        Convert all dots in tag names into underscores (default)
#**
#**    --dont-treat-dots-as-underscores,--no-treat-dots-as-underscores
#**        Leave original tags as they are.
#**
#*     --tabular, --output-tabular
#*         Output selected tags and their values in tabular format:
#*         <datablock name> <tag name> <value> <value> ... <value>
#*
#*     --cif, --output-cif
#*         Output selected tags and their values in CIF format (default).
#*
#*     --canonicalize-tag-names
#*         Output tags in the canonical form.
#*
#*     --dont-canonicalize-tag-names,--no-canonicalize-tag-names
#*         Output tags as they are given in original file(s) (default).
#*
#*     --use-perl-parser
#*         Use Perl parser for CIF parsing.
#*
#*     --use-c-parser
#*         Use Perl & C parser for CIF parsing.
#*
#*     --help,--usage  print a short usage message (this message) and exit.
#**

@ARGV = getOptions(
    "-t,--tags" => sub { @selected_tags = split( /\s|,/, get_value()) },
    "-a,--add-tag"    => \@selected_tags,
    "-c,--clear-tags" => sub { @selected_tags = () },
    "-f,--file-with-tags" => sub {
        my $filename = get_value();
        open( TAGS, $filename ) or
            die( "$0: $filename: ERROR, could not open file '$filename' " .
                 "for reading - $!" );
        @selected_tags = ( @selected_tags,
                          map { s/^\s*|\s*$//g; $_ }
                          grep !/^\#/, <TAGS> );
        close( TAGS ) or
            die( "$0: $filename: ERROR, could not close file '$filename' " .
                 "after reading - $!" );
    },

    "--invert" => sub { $invert = 1 },

    "--treat-dots-as-underscores"
        => sub { $treat_dots_as_underscores = 1 },
    "--dont-treat-dots-as-underscores"
        => sub { $treat_dots_as_underscores = 0 },
    "--no-treat-dots-as-underscores"
        => sub { $treat_dots_as_underscores = 0 },

    "--tabular,--output-tabular" => sub { $output_tabular = 1 },
    "--cif,--output-cif" => sub { $output_tabular = 0 },

    "--canonicalize-tag-names"
        => sub { $canonicalize_tag_names = 1 },
    "--dont-canonicalize-tag-names"
        => sub { $canonicalize_tag_names = 0 },
    "--no-canonicalize-tag-names"
        => sub { $canonicalize_tag_names = 0 },

    "--use-perl-parser" => sub{ $use_parser = "perl" },
    "--use-c-parser"    => sub{ $use_parser = "c" },

    "--help,--usage"  => sub { usage; exit },
);

sub sunique(@);

if( $treat_dots_as_underscores ) {
    @selected_tags = map { s/\./_/g; $_ } @selected_tags;
}

@selected_tags = map { lc($_) } @selected_tags;

my %selected_tags = map { ($_, $_) } @selected_tags;

@ARGV = ( "-" ) unless @ARGV;

for my $filename (@ARGV) {

    my( $data, $error_count );

    if( $use_parser eq "perl" ) {
        my $parser = new COD::CIF::Parser::Yapp;

        $data = $parser->Run($filename);

        if( defined $parser->YYData->{ERRCOUNT} ) {
            $error_count = $parser->YYData->{ERRCOUNT};
        }
    } else {
        require COD::CIF::Parser::Bison;
        ( $data, $error_count ) = COD::CIF::Parser::Bison::parse($filename);
    }

    if( defined $error_count && $error_count > 0 ) {
        print STDERR "$0: ", $error_count,
        " error(s) encountered while parsing file '${filename}'\n";
        die;
    }

    if( !@{$data} || !defined $data->[0] || !defined $data->[0]{name} ) {
        warn( "file '$filename' seems to be empty" );
        next;
    }

    for my $dataset (@$data) {

        my @values = ();
        my $values = $dataset->{values};

        if( $treat_dots_as_underscores ) {
            for my $tag (keys %{$values}) {
                my $new_tag = $tag;
                $new_tag =~ s/\./_/g;
                if( $new_tag ne $tag ) {
                    $values->{$new_tag} = $values->{$tag};
                }
            }
        }

        if( $invert ) {
            for my $tag (@selected_tags) {
                exclude_tag( $dataset, $tag );
            }
        }

        my @printed_tags;
        if( !$invert ) {
            @printed_tags = @selected_tags;
        } else {
            @printed_tags = @{ $dataset->{tags} };
        }
        my %printed_tags = map { ($_, $_) } @printed_tags;

        if( $output_tabular ) {
            local $, = "\t";
            local $\ = "\n";
            for my $tag (@printed_tags) {
                print $dataset->{name},
                      ( $canonicalize_tag_names
                            ? canonical_tag_name( $tag )
                            : $tag ),
                      ( exists $dataset->{values}{$tag}
                            ? join( $,, map{ s/[\n\t]/ /g; $_ }
                                    @{$dataset->{values}{$tag}} )
                            : '?' );
            }
        } else {
            if( $canonicalize_tag_names ) {
                canonicalize_names( $dataset );
                @printed_tags = map{ canonical_tag_name( $_ ) }
                                     @printed_tags;
                %printed_tags = map{ ($_, $_) }
                                     @printed_tags;
            }
            print_cif( $dataset,
               {
                   dictionary_tags => \%printed_tags,
                   dictionary_tag_list => \@printed_tags,
                   exclude_misspelled_tags => 1,
               } );
        }
    }
}
