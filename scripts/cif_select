#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Date$ 
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
#* Read CIFs and print out selected tags with their values.
#*
#* USAGE:
#*    $0 --options input1.cif input*.cif
#**

use strict;
use warnings;
use COD::CIF::Parser qw( parse_cif );
use COD::CIF::Tags::CanonicalNames qw( canonical_tag_name canonicalize_names );
use COD::CIF::Tags::Manage qw( exclude_tag rename_tag );
use COD::CIF::Tags::Print qw( print_cif );
use COD::SOptions qw( getOptions get_value );
use COD::SUsage qw( usage options );
use COD::ErrorHandler qw( process_errors
                          process_parser_messages
                          report_message );
use COD::ToolsVersion;

my $use_parser = 'c';

my $die_on_error_level = {
    ERROR   => 1,
    WARNING => 0,
    NOTE    => 0
};

my @selected_tags;
my $treat_dots_as_underscores = 1;
my $canonicalize_tag_names = 0;
my $output_tabular = 0;
my $invert = 0;

binmode STDOUT, ':encoding(UTF-8)';
binmode STDERR, ':encoding(UTF-8)';

#* OPTIONS:
#*   -t, --tags _tag1,_tag2,_tag3
#*   --tags "_tag1 _tag2 _tag3"
#*                     Print out values of tags _tag1, _tag2, and _tag3;
#*                     the specified tag list becomes a new list of printed tags.
#*
#*   -a, --add-tag _tag4
#*                     Add tag _tag4 to the list of printed tags.
#*
#*   -f, --file-with-tags tag.lst
#*                     Read tags to be extracted from the file 'tag.lst'.
#*                     Comments (lines starting with '#') in 'tag.lst' are
#*                     ignored.
#*
#*   -c, --clear-tags
#*                     Clear the list of printed tags accumulated so far.
#*
#*   --invert
#*                     Invert the sense of selection. Exclude values of
#*                     the tags from the supplied list.
#*
#*   --treat-dots-as-underscores
#*                     Convert all dots in tag names into underscores (default).
#*
#*   --dont-treat-dots-as-underscores, --no-treat-dots-as-underscores
#*                     Leave original tags as they are.
#*
#*   --tabular, --output-tabular
#*                     Output selected tags and their values in tabular format:
#*                     <data block name> <tag name> <value> <value> ... <value>
#*   --cif, --output-cif
#*                     Output selected tags and their values in CIF format (default).
#*
#*   --canonicalize-tag-names
#*                     Output tags in the canonical form.
#*   --dont-canonicalize-tag-names, --no-canonicalize-tag-names
#*                     Output tags as they are given in original file(s) (default).
#*
#*   --use-perl-parser
#*                     Use Perl parser for CIF parsing.
#*   --use-c-parser
#*                     Use Perl & C parser for CIF parsing.
#*
#*   --help, --usage
#*                     Output a short usage message (this message) and exit.
#*   --version
#*                     Output version information and exit.
#**
@ARGV = getOptions(
    "-t,--tags" => sub { @selected_tags = split( /\s|,/, get_value()) },
    "-a,--add-tag"    => \@selected_tags,
    "-c,--clear-tags" => sub { @selected_tags = () },
    "-f,--file-with-tags" => sub {
        my $filename = get_value();
        eval {
            open( my $tags, '<', $filename ) or die 'ERROR, '
                  . 'could not open file for reading -- '
                  . lcfirst($!) . "\n";
            @selected_tags = ( @selected_tags,
                              map { s/^\s*|\s*$//g; $_ }
                              grep { !/^\#/ } <$tags> );
            close( $tags ) or die 'ERROR, '
                  .'could not close file after reading -- '
                  . lcfirst($!) . "\n";
        };
        if ($@) {
            process_errors( {
              'message'  => $@,
              'program'  => $0,
              'filename' => $filename
            }, $die_on_error_level->{ERROR} );
        };
    },

    "--invert" => sub { $invert = 1 },

    "--treat-dots-as-underscores"
        => sub { $treat_dots_as_underscores = 1 },
    "--dont-treat-dots-as-underscores"
        => sub { $treat_dots_as_underscores = 0 },
    "--no-treat-dots-as-underscores"
        => sub { $treat_dots_as_underscores = 0 },

    "--tabular,--output-tabular" => sub { $output_tabular = 1 },
    "--cif,--output-cif" => sub { $output_tabular = 0 },

    "--canonicalize-tag-names"
        => sub { $canonicalize_tag_names = 1 },
    "--dont-canonicalize-tag-names"
        => sub { $canonicalize_tag_names = 0 },
    "--no-canonicalize-tag-names"
        => sub { $canonicalize_tag_names = 0 },

    "--use-perl-parser" => sub { $use_parser = "perl" },
    "--use-c-parser"    => sub { $use_parser = "c" },
    "--options"         => sub { options; exit },
    "--help,--usage"    => sub { usage; exit },
    '--version'         => sub { print 'cod-tools version ',
                                 $COD::ToolsVersion::Version, "\n";
                                 exit }
);

sub sunique(@);

if( $treat_dots_as_underscores ) {
    @selected_tags = map { s/\./_/g; $_ } @selected_tags;
}

@selected_tags = map { lc($_) } @selected_tags;

my %selected_tags = map { ($_, $_) } @selected_tags;

@ARGV = ( "-" ) unless @ARGV;

for my $filename (@ARGV) {

    my $options = { 'parser' => $use_parser, 'no_print' => 1 };
    my ( $data, $err_count, $messages ) = parse_cif( $filename, $options );
    process_parser_messages( $messages, $die_on_error_level );
    next if ( $err_count > 0 );

    if( !@{$data} || !defined $data->[0] || !defined $data->[0]{name} ) {
        report_message( {
            'program'   => $0,
            'filename'  => $filename,
            'err_level' => 'WARNING',
            'message'   => 'file seems to be empty'
        }, $die_on_error_level->{'WARNING'} );
        next;
    }

    for my $dataset (@$data) {

        my @values = ();
        my $values = $dataset->{values};

        if( $treat_dots_as_underscores ) {
            for my $tag (keys %{$values}) {
                my $new_tag = $tag;
                $new_tag =~ s/\./_/g;
                if( $new_tag ne $tag ) {
                    rename_tag( $dataset, $tag, $new_tag );
                }
            }
        }

        if( $invert ) {
            for my $tag (@selected_tags) {
                exclude_tag( $dataset, $tag );
            }
        }

        my @printed_tags;
        if( !$invert ) {
            @printed_tags = @selected_tags;
        } else {
            @printed_tags = @{ $dataset->{tags} };
        }
        my %printed_tags = map { ($_, $_) } @printed_tags;

        if( $output_tabular ) {
            local $, = "\t";
            local $\ = "\n";
            for my $tag (@printed_tags) {
                print $dataset->{name},
                      ( $canonicalize_tag_names
                            ? canonical_tag_name( $tag )
                            : $tag ),
                      ( exists $dataset->{values}{$tag}
                            ? join( $,, map{ s/[\n\t]/ /g; $_ }
                                    @{$dataset->{values}{$tag}} )
                            : '?' );
            }
        } else {
            if( $canonicalize_tag_names ) {
                canonicalize_names( $dataset );
                @printed_tags = map{ canonical_tag_name( $_ ) }
                                     @printed_tags;
                %printed_tags = map{ ($_, $_) }
                                     @printed_tags;
            }
            print_cif( $dataset,
               {
                   dictionary_tags => \%printed_tags,
                   dictionary_tag_list => \@printed_tags,
                   exclude_misspelled_tags => 1,
               } );
        }
    }
}
