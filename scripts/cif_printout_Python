#!/usr/bin/python
# -*- coding: utf-8 -*-
#------------------------------------------------------------------------------
#$Author$
#$Revision$
#$URL$
#$Date$
#$Id$
#------------------------------------------------------------------------------
#*
#  Parse CIF file and print out the structure generated by CIF parser
#**

import argparse
import sys
import cod.ccifparser

parser = argparse.ArgumentParser(description='Parse CIF file and print out '
                                             'the structure generated by '
                                             'CIF parser')

parser.add_argument("--do-not-unprefix-text",
                    dest='do_not_unprefix_text',
                    action='store_const', const=1)
parser.add_argument("--do-not-unfold-text",
                    dest='do_not_unfold_text',
                    action='store_const', const=1)
parser.add_argument("--fix-errors",
                    dest='fix_errors',
                    action='store_const', const=1)
parser.add_argument("--fix-duplicate-tags-with-same-values",
                    dest='fix_duplicate_tags_with_same_values',
                    action='store_const', const=1)
parser.add_argument("--fix-duplicate-tags-with-empty-values",
                    dest='fix_duplicate_tags_with_empty_values',
                    action='store_const', const=1)
parser.add_argument("--fix-data-header",
                    dest='fix_data_header',
                    action='store_const', const=1)
parser.add_argument("--fix-datablock-names",
                    dest='fix_datablock_names',
                    action='store_const', const=1)
parser.add_argument("--fix-string-quotes",
                    dest='fix_string_quotes',
                    action='store_const', const=1)
parser.add_argument("--fix-missing-closing-double-quote",
                    dest='fix_missing_closing_double_quote',
                    action='store_const', const=1)
parser.add_argument("--fix-missing-closing-single-quote",
                    dest='fix_missing_closing_single_quote',
                    action='store_const', const=1)
parser.add_argument("--fix-ctrl-z",
                    dest='fix_ctrl_z',
                    action='store_const', const=1)
parser.add_argument("--allow-uqstring-brackets",
                    dest='allow_uqstring_brackets',
                    action='store_const', const=1)
parser.add_argument("files", nargs='*')

options = vars(parser.parse_args(args=sys.argv[1:]))
for key in options.keys():
    if not options[key]:
        options.pop(key)
# print options

files = options.pop('files',[])
if not files:
    files = ['-']

for filename in files:
    data, errcount = cod.ccifparser.parse(filename, options)

    for datablock in data:
        print datablock['name']
        print "Values:"
        for tag in sorted(datablock['tags']):
            print "    {} ({}) {}".format(tag,
                                          len(datablock['values'][tag]),
                                          " ".join(["[{}]".format(x) for x in datablock['values'][tag]]))
        if 'precisions' in datablock.keys():
            print "Precisions:"
            for tag in sorted(datablock['precisions'].keys()):
                print "    {} ({}) {}".format(tag,
                                              len(datablock['precisions'][tag]),
                                              " ".join([str(x) if x is not None else 'undef' for x in datablock['precisions'][tag]]))
        if 'types' in datablock.keys():
            print "Types:"
            for tag in sorted(datablock['types'].keys()):
                print "    {} {}".format(tag,
                                         " ".join([x for x in datablock['types'][tag]]))
        print "Inloops:"
        for tag in sorted(datablock['inloop'].keys()):
            print "    {} {}".format(tag,datablock['inloop'][tag])
        print "Loops:"
        for loop in datablock['loops']:
            print " ".join(loop)

    sys.stderr.write("{} error(s) detected\n".format(errcount))
