#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Revision$
#$URL$
#$Date$
#$Id$
#------------------------------------------------------------------------------
#*
#  Parse CIF file and print out the structure generated by CIF parser
#**

use strict;
use warnings;
use COD::CIF::Parser qw(parse_cif);
use COD::CIF2JSON;
use COD::CIF::Data::Diff;
use COD::SOptions;
use COD::SUsage qw(usage options);
use COD::ShowStruct;
use COD::UserMessage qw(error);

my $use_parser = 'c';
my $output_format = 'dump';
my $input_json  = 0;
my %options;

#*  USAGE:
#*      $0 --options input1.cif input*.cif
#*
#*  OPTIONS:
#*  --input-cif,
#*  --input-json
#*     Specify the format of input file(s). Default CIF.
#*
#*  --output-dump
#*     Output parsed CIF file in internal dump format. Default.
#*
#*  --output-json
#*     Output generated structure in JSON.
#*
#*  --output-struct
#*     Output generated structure using COD::ShowStruct module.
#*
#*  --json
#*     Set both input and output formats to JSON.
#*
#*  --use-perl-parser
#*     Use Perl parser for CIF parsing.
#*
#*  --use-c-parser
#*     Use Perl & C parser for CIF parsing.
#*
#* --help, --usage
#*     Print short usage message (this message) and exit
#**
@ARGV = getOptions(
    "--do-not-unprefix-text" => sub{ $options{do_not_unprefix_text} = 1 },
    "--do-not-unfold-text"   => sub{ $options{do_not_unfold_text} = 1 },
    "--fix-errors"           => sub{ $options{fix_errors} = 1 },
    "--fix-duplicate-tags-with-same-values"  =>
        sub{ $options{fix_duplicate_tags_with_same_values} = 1 },
    "--fix-duplicate-tags-with-empty-values" =>
        sub{ $options{fix_duplicate_tags_with_empty_values} = 1 },
    "--fix-data-header"     => sub{ $options{fix_data_header} = 1 },
    "--fix-datablock-names" => sub{ $options{fix_datablock_names} = 1 },
    "--fix-string-quotes"   => sub{ $options{fix_string_quotes} = 1 },
    "--fix-missing-closing-double-quote" =>
        sub{ $options{fix_missing_closing_double_quote} = 1 },
    "--fix-missing-closing-single-quote" =>
        sub{ $options{fix_missing_closing_single_quote} = 1 },
    "--fix-ctrl-z"  => sub{ $options{fix_ctrl_z} = 1 },
    "--allow-uqstring-brackets" => sub{ $options{allow_uqstring_brackets} = 1 },

    "--input-json"  => sub { $input_json  = 1 },
    "--input-cif"   => sub { $input_json  = 0 },

    "--output-dump"   => sub { $output_format = 'dump' },
    "--output-json"   => sub { $output_format = 'json' },
    "--output-struct" => sub { $output_format = 'struct' },

    "--json" => sub { $input_json = 1; $output_format = 'json' },

    "--use-perl-parser" => sub { $use_parser = 'perl' },
    "--use-c-parser"    => sub { $use_parser = 'c' },
    "--options"         => sub { options; exit },
    "--help,--usage"    => sub { usage; exit }
);

@ARGV = ( "-" ) unless @ARGV;

foreach( @ARGV ) {

    my( $data, $err_count, $messages );
    if( $input_json ) {
        local $SIG{__DIE__} =
            sub { my( $msg ) = @_;
                  $msg =~ s/at \S+ line \d+(, <[^>]*> line \d+.?)?$//;
                  die "$0: $_: $msg"
            };
        open( my $inp, $_ );
        $data = json2cif( join( "\n", <$inp> ) );
        close( $inp );
        $err_count = 0;
    } else {
        $options{no_print} = 1;
        ($data, $err_count, $messages) = parse_cif( $_, \%options );
        print STDERR $_ foreach ( @$messages );
    }

    if( $output_format eq 'json' ) {
        print cif2json( $data );
    } elsif( $output_format eq 'struct' ) {
        foreach my $datablock ( @$data ) {
            showRef( $datablock );
        }
    } else {
        foreach my $datablock ( @$data ) {
            print  $datablock->{name} . "\n";
            print "Values:\n";
            foreach my $tag ( sort { lc( $a ) cmp lc( $b ) } @{$datablock->{tags}} ) {
                print "    " . $tag . " ("
                    . scalar( @{$datablock->{values}{$tag}} ) . ") ";
                print join( " ", map{ "[$_]" } @{$datablock->{values}{$tag}} )
                    . "\n";
            }
            if( exists $datablock->{precisions} ) {
                print "Precisions:\n";
                foreach my $tag ( sort keys %{$datablock->{precisions}} ) {
                    print "    " . $tag . " ("
                        . scalar( @{$datablock->{precisions}{$tag}} ) . ") ";
                    print join( " ", map{ ( defined $_ ) ? $_ : "undef" }
                        @{$datablock->{precisions}{$tag}} ) . "\n";
                }
            }
            if( exists $datablock->{types} ) {
                print "Types:\n";
                foreach my $tag ( sort keys %{$datablock->{types}} ) {
                    print "    " . $tag . " ";
                    print join( " ", @{$datablock->{types}{$tag}} ) . "\n";
                }
            }
            print "Inloops:\n";
            foreach my $tag ( sort keys %{$datablock->{inloop}} ) {
                print "    " . $tag . " " . $datablock->{inloop}{$tag} . "\n";
            }
            print "Loops:\n";
            foreach my $loop ( @{$datablock->{loops}} ) {
                print join( " ", @$loop ) . "\n";
            }
        }
    }
    print STDERR "$err_count error(s) detected\n";
}
