#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Date$ 
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
#  Determine a space group from a list of symmetry operators
#  (generators), using the Ralf's (Ralf Grosse-Kunstleve) algorithm.
#**

use strict;
use warnings;
use COD::Spacegroups::Lookup::COD;
use COD::Spacegroups::Lookup qw( make_symop_hash make_symop_key );
use COD::Spacegroups::Symop::Parse qw( string_from_symop );
use COD::Spacegroups::Builder;
use COD::SOptions qw( getOptions );
use COD::SUsage qw( usage );

#* USAGE: $0 < input.symop
#* USAGE: $0 input.symop
#* USAGE: $0 input.symop additional*.symop
#*
#* OPTIONS:
#* --help, --usage    Print short usage message (this message) and exit.
#**
@ARGV = getOptions(
   "--help,--usage"  => sub { usage; exit }
);

my $spacegroup = COD::Spacegroups::Builder->new;

while(<>) {
    next if /^#/;
    next if /^\s*$/;
    $spacegroup->insert_symop_string( $_ );
}

$spacegroup->print();

my @symops = $spacegroup->all_symops();

my %symop_lookup_table = make_symop_hash( [
    \@COD::Spacegroups::Lookup::COD::table,
    \@COD::Spacegroups::Lookup::COD::extra_settings
] );
my $key = make_symop_key( [ map { string_from_symop($_) } @symops ] );

if( exists $symop_lookup_table{$key} ) {
    my $estimated_sg = $symop_lookup_table{$key};
    use COD::Serialise qw( serialiseRef );
    serialiseRef( $estimated_sg );
} else {
    print "$0: spacegroup could not be identified\n"
}
