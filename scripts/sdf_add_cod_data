#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Date$
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
#* Append COD-specific meta-information to an SDF file in a format
#* suitable for PubChem.
#*
#* USAGE:
#*   $0 --options --cod-cif cod-input.cif file1.sdf
#*   $0 --options --cod-cif cod-input.cif file1.sdf > output.sdf
#*   $0 --options --cod-cif cod-input.cif < file1.sdf > output.sdf
#**
use strict;
use warnings;

use COD::CIF::Parser qw( parse_cif );
use COD::ErrorHandler qw( process_parser_messages );
use COD::SOptions qw( getOptions );
use COD::SUsage qw( usage options );
use COD::ToolsVersion qw( get_version_string );

sub get_cod_id
{
    my( $data ) = @_;

    my $cod_id = get_data_value_and_sanitise( $data, '_cod_database_code' );
    if ($cod_id eq '?') {
        $cod_id = get_data_value_and_sanitise( $data, '_cod_data_source_block' );
    }

    return $cod_id;
}

sub get_substance_synonyms
{
    my( $data_block ) = @_;

    my @synonyms;
    for my $tag ( qw( _chemical_name_systematic _chemical_name_common ) ) {
        next if !defined $data_block->{'values'}{$tag};
        my $synonym = $data_block->{'values'}{$tag}[0];
        next if $synonym =~ m/^\s*[?]/;
        $synonym =~ s/^\s*|\s*$//g;
        $synonym =~ s/[ \t]+/ /g;
        push @synonyms, $synonym;
    }

    return \@synonyms;
}

sub get_substance_comment
{
    my( $data ) = @_;

    my $authors;
    if (defined $data->{'values'}{'_publ_author_name'}) {
        $authors = join '; ', @{$data->{'values'}{'_publ_author_name'}}
    } else {
        $authors = '?'
    }
    my $year    = get_data_value_and_sanitise( $data, '_journal_year' );
    my $title   = get_data_value_and_sanitise( $data, '_publ_section_title' );
    my $journal = get_data_value_and_sanitise( $data, '_journal_name_full' );
    my $volume  = get_data_value_and_sanitise( $data, '_journal_volume' );
    my $issue   = get_data_value_and_sanitise( $data, '_journal_issue' );
    my $page_first = get_data_value_and_sanitise( $data, '_journal_page_first' );
    my $page_last  = get_data_value_and_sanitise( $data, '_journal_page_last' );
    my $doi     = get_data_value_and_sanitise( $data, '_journal_paper_doi' );

    my $substance_comment = '';
    $substance_comment .= $authors if $authors ne '?';
    if ($year ne '?') {
        $substance_comment .= ", ($year)";
    }
    for my $field ( $title, $journal, $volume, $issue ) {
        $substance_comment .= ", $field" if $field ne '?';
    }
    if ($page_first ne '?') {
        $substance_comment .= ", $page_first";
        if ($page_last ne '?') {
            $substance_comment .= '-' . $page_last;
        }
    }
    if ($doi ne '?') {
        $substance_comment .= ', ' if $substance_comment;
        $substance_comment .= "DOI:$doi"
    }

    return $substance_comment;
}

sub get_data_value_and_sanitise
{
    my ( $data_block, $data_name ) = @_;

    my $value;
    if (defined $data_block->{'values'}{$data_name}) {
        $value = $data_block->{'values'}{$data_name}[0];
        $value =~ s/^\s*|\s*$//g;
        $value =~ s/\s+/ /g;
        $value = undef if !$value;
    }
    $value = '?' if !defined $value;

    return $value;
}

my $die_on_error_level = {
    'ERROR'   => 1,
    'WARNING' => 0,
    'NOTE'    => 0
};

my $cod_cif_filename;

#* OPTIONS:
#*   -C, --cod-cif 1000000.cif
#*                     Provide the original COD CIF to extract structure metadata.
#*
#*   --help, --usage
#*                     Output a short usage message (this message) and exit.
#*   --version
#*                     Output version information and exit.
#**
@ARGV = getOptions(
    '-C,--cod-cif'   => \$cod_cif_filename,

    '--options'      => sub { options; exit },
    '--help,--usage' => sub { usage; exit },
    '--version'      => sub { print get_version_string(), "\n"; exit }
);

my $parser_options = { 'parser' => 'c', 'no_print' => 1 };

my ( $data, $err_count, $parser_messages ) = parse_cif( $cod_cif_filename, $parser_options );
process_parser_messages( $parser_messages, $die_on_error_level );
my $data_block = $data->[0];

my $cod_id = get_cod_id( $data_block );
my $substance_synonyms = get_substance_synonyms( $data_block );
my $substance_comment = get_substance_comment( $data_block ); 

my $data_fields = "> <PUBCHEM_EXT_DATASOURCE_REGID>\n$cod_id\n\n";
if (@{$substance_synonyms}) {
    $data_fields .= '> <PUBCHEM_SUBSTANCE_SYNONYM>' . "\n";
    $data_fields .= ( join "\n", @{$substance_synonyms} ) . "\n\n"
}
if ($substance_comment) {
    $data_fields .= "> <PUBCHEM_SUBSTANCE_COMMENT>\n$substance_comment\n\n"
}
$data_fields .= '> <PUBCHEM_EXT_DATASOURCE_URL>' . "\n";
$data_fields .= 'https://www.crystallography.net/cod/' . "\n\n";

$data_fields .= '> <PUBCHEM_EXT_SUBSTANCE_URL>' . "\n";
$data_fields .= 'https://www.crystallography.net/cod/' . $cod_id  . '.html';
$data_fields .= "\n\n";
$data_fields .= '$$$$' ."\n";

while(<>) {
    if (! m/^\${4}/) {
        print $_;
    }
}
print $data_fields;
