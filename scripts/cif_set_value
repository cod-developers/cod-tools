#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Date$
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
# Set specified CIF data items to the given values
#**

use strict;
use warnings;
use COD::CIF::Parser::Yapp;
use COD::CIF::Tags::CanonicalNames;
use COD::CIF::Tags::Print;
use COD::UserMessage qw(error);
use COD::SOptions;
use COD::SUsage;

my $Id = '$Id$';

#* USAGE:
#*     $0 [options] input.cif [input2.cif ...]
#*
#* OPTIONS:
#*   -t, --tag _atom_site_occupancy   Specify which data item to set
#*   -v, --value 1.0                  Specify a new value for that data item
#*
#*   --use-perl-parser
#*   --use-c-parser
#*     Specify parser to parse CIF files. C parser is default.
#*
#**  --help,--usage     Print a short usage message (this message) and exit.

my $use_parser = "perl";

my $tag = "_atom_site_occupancy";
my $value = 1.0;

@ARGV = getOptions(
    "--help,--usage" => sub{ usage; exit },
    "-t,--tag"       => \$tag,
    "-v,--value"     => \$value,
 
    "--use-perl-parser"       => sub{ $use_parser = "perl" },
    "--use-c-parser"          => sub{ $use_parser = "c" },
);

@ARGV = ("-") unless @ARGV;

for my $filename (@ARGV) {
    my( $data, $error_count );
    if( $use_parser eq "perl" ) {
        my $parser = new COD::CIF::Parser::Yapp;
        $data = $parser->Run( $filename );
        if( defined $parser->YYData->{ERRCOUNT} &&
            $parser->YYData->{ERRCOUNT} > 0 ) {
            $error_count = $parser->YYData->{ERRCOUNT};
        }
    } else {
        require COD::CIF::Parser::Bison;
        ( $data, $error_count ) = COD::CIF::Parser::Bison::parse( $filename );
    }

    if( defined $error_count && $error_count > 0 ) {
        error( $0, $filename, undef, $error_count
             . " error(s) encountered while parsing CIF data", undef );
        ## exit -1;
        next;
    }

    canonicalize_all_names( $data );

    for my $dataset (@$data) {
        if( exists $dataset->{values}{$tag} ) {
            for my $cif_value (@{$dataset->{values}{$tag}}) {
                $cif_value = $value;
            }
        }
    }

    for my $dataset( @$data ) {
        print_cif( $dataset, {
            exclude_misspelled_tags => 0,
            preserve_loop_order => 1,
            fold_long_fields => 0,
            keep_tag_order => 1,
        });
    }
}
