#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Date$
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
# Set specified CIF data items to the given values
#**

use strict;
use warnings;
use COD::CIF::Parser qw( parse_cif );
use COD::CIF::Tags::CanonicalNames qw( canonicalize_all_names );
use COD::CIF::Tags::Print qw( print_cif );
use COD::SOptions qw( getOptions );
use COD::SUsage qw( usage options );
use COD::UserMessage qw( error );

my $Id = '$Id$';

my $use_parser = 'c';

my $tag = "_atom_site_occupancy";
my $value = 1.0;

#* USAGE:
#*     $0 --options input1.cif input*.cif
#*
#* OPTIONS:
#*   -t, --tag _atom_site_occupancy
#*                      Specify which data item to set.
#*   -v, --value 1.0
#*                      Specify a new value for that data item.
#*
#*   --use-perl-parser
#*   --use-c-parser
#*                      Specify parser to parse CIF files. C parser is default.
#*
#*   --help, --usage
#*                      Print a short usage message (this message) and exit.
#**
@ARGV = getOptions(
    "-t,--tag"       => \$tag,
    "-v,--value"     => \$value,

    "--use-perl-parser" => sub { $use_parser = "perl" },
    "--use-c-parser"    => sub { $use_parser = "c" },
    "--options"         => sub { options; exit },
    "--help,--usage"    => sub { usage; exit }
);

@ARGV = ("-") unless @ARGV;

for my $filename (@ARGV) {

    my $options = { 'parser' => $use_parser, 'no_print' => 1 };
    my ( $data, $err_count, $messages ) = parse_cif( $filename, $options );

    if ( $err_count > 0 ) {
        print STDERR $_ foreach ( @$messages );
        error( $0, $filename, undef, "$err_count error(s) "
             . "encountered while parsing the file", undef );
        next;
    }
    print STDERR $_ foreach ( @$messages );

    canonicalize_all_names( $data );

    for my $dataset (@$data) {
        if( exists $dataset->{values}{$tag} ) {
            for my $cif_value (@{$dataset->{values}{$tag}}) {
                $cif_value = $value;
            }
        }
    }

    for my $dataset( @$data ) {
        print_cif( $dataset, {
            exclude_misspelled_tags => 0,
            preserve_loop_order => 1,
            fold_long_fields => 0,
            keep_tag_order => 1,
        });
    }
}
