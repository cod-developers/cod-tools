cod-tools (unreleased)

  * Added:
    - COD::CIF::DDL module.
    - COD::CIF::Tags::Manage:
      - accepting CIF format version number in new_datablock().
    - data/replacement_values/replacement_values.lst
      - several more value replacement rules.
    - cif_validate:
      - a validation message pertaining to quote usage in combination with
        numeric values;
      - a uniqueness constraint check for simple and composite loop references.
  * Changed:
    - COD::CIF::Data::AtomList:
      - rewritten dump_atoms_as_cif() using standard CIF printing routines.
    - COD::CIF::Parser::Yapp:
      - replaced the COD::ShowStruct module with Data::Dumper
        for debug prints.
    - dropped test-dependency on 'mysql' command line utility.
    - cif_validate:
      - slightly reworded several validation messages.
  * Deprecated:
    - cif_printout:
      - the --output-struct option.
    - cif_parse:
      - the output format.
    - COD::ShowStruct.
  * Fixed:
    - COD::CIF::Data::AtomList:
      - using '_space_group_name_H-M_alt' data item instead of deprecated
        '_symmetry_space_group_name_H-M' in dump_atoms_as_cif().
    - COD::CIF::Parser::Bison:
      - distributing parent datablock's 'cifversion' to its save blocks
        recursively.
    - COD::CIF::Tags::Print:
      - resolving an issue with printing of CIF2 tables inside CIF2 lists
        in cif_print();
      - printing CIF save frames in cif_print().
    - cif2cod:
      - description of command line option --use-all-datablocks.
    - cif2ref and cif_filter:
      - standardising symmetry data item recognition.
    - cif_molecule, cif_p1, cif_reduce_Niggli and oqmd2cif:
      - adding '_space_group_name_*' to the output instead of deprecated
        '_symmetry_space_group_name_*';
    - cif_split:
      - appending mode.
    - replaced 'can not' with 'cannot' in all affected scripts and modules;
    - replaced the '\d' group with explicit '[0-9]' in regular expressions
      in all affected scripts and modules.

cod-tools (2.3)

  * Added:
    - cif2xyz:
      - command line option --add-xyz-header to produce XYZ format as
        defined in http://openbabel.org/wiki/XYZ_%28format%29.
    - cif_cod_check:
      - the --check-pd-block-relations and its inverse options that control
        the execution of checks related to powder diffraction blocks.
    - cif_filter:
      - the --exclude-placeholder-tags, --placeholder-tag-list options
        and a related subroutine that enables the removal of data items
        with placeholder values.
      - the --exclude-redundant-chemical-names option and a related
        subroutine that enables the removal of data items related to
        chemical names that contain redundant values.
    - cif_fix_values:
      - removing URL and doi: prefixes from the values of CIF data items
        that are supposed to hold DOIs.
    - cif_hkl_check:
      - performing powder diffraction checks.
    - cif_molecule and cif_p1:
      - prefix for preserved original CIF data items was changed from
        '_cod_src_' to '_[local]_cod_src_'.
    - cif_validate:
      - reporting non-looped CIF data items occurring in CIF loops.
      - reporting existence of both replaced and replacing data items in
        the same CIF data block.
      - single quotes are now used to delimit both the data names and the
        data values in validation messages;
      - updating the standard uncertainty validation logic to ignore
        non-numeric values;
      - slightly rewording some of the validation messages.
    - COD::CIF::Data:
      - the get_formula_units_z() subroutine.
    - COD::CIF::DDL::Validate module.
    - COD::DateTime:
      - the 'canonicalise_timestamp()' subroutine.
    - COD::Spacegroups::Lookup::COD:
      - the 'F d 1 1' space group description;
      - the 'F 1 d 1' space group description;
      - the 'F 1 1 d' space group description;
      - the 'C 1 c 1 (a-3/8,b-3/8,a+2*c)' space group description;
      - the 'F 1 2/d 1'  space group description.
    - Test dependencies for CentOS-6.8.
  * Changed:
    - cif_cod_check:
      - modifying the warning message about missing authors to use the same
        format as other warnings about missing data items;
      - replacing test case 'cif_cod_check_111' with test case
        'cif_cod_check_115' since test case 'cif_cod_check_111' was a
        duplicate of 'cif_cod_check_107'.
    - cif_eval_numbers:
      - modified the script to no longer use inline eval() and instead use
        ad hoc logic to handle known numeric operations;
      - updated the help message.
    - cif_fix_values:
      - updating the built-in CIF Core dictionary from version 2.4.1 to 2.4.5;
      - detecting value 'direct_method' as 'direct' for data items
        _atom_sites_solution_{primary,secondary,hydrogens};
      - ceasing to use regular expressions for comparisons of strings
        as metasymbols in strings might disrupt the program;
      - updated the help message to correctly state that only DDL1 CIF
        dictionaries are currently handled.
    - cif_select:
      - ceasing to convert dots ('.') to underscores ('_') in data item names
        by default.
    - cif_validate:
      - updating the dictionary building logic to take default DDL1 values into
        account;
      - numeric data items with non-numeric values no longer cause
        range violated messages;
      - validation messages related to loop references no longer output
        the dictionary name.
    - COD::CIF::Data::Check:
      - modifying the check_author_names() subroutine to no longer raise
        warnings about missing _publ_author_name data items;
      - check_bibliography() treats data items with values '?' as unknown.
    - COD::CIF::Data::CIF2COD:
      - the module no longer returns empty strings instead of NULL values
        for the author and title fields;
      - modifying the Z value handling logic to use the get_formula_units_z()
        subroutine and to try to estimate the Z value from other data items
        in cases when it is malformed or not provided;
      - the calculated cell volume is now reused in other calculations
        instead repeatedly calculating it.
    - COD::CIF::Data::EstimateZ:
      - the cif_estimate_z() subroutine now accepts optional parameters
        that override the data values provided in the CIF data block.
    - COD::Spacegroups::Lookup::COD:
      - renaming space group 'P 1 (-a,-b+c,b+c)' to 'A 1';
      - renaming space group 'P 1 (-a+c,-b,a+c)' to 'B 1';
      - renaming space group 'P 1 (b+c,a+c,a+b)' to 'I 1';
      - replacing the Hall space group symbol with a shorter one for
        space groups from the extra_settings hash.
    - COD::UserMessage:
      - the space (" ") symbol occurring in program name field is no longer
        escaped;
      - the newline ('\n') symbol and various braces ('[', ']', '(', ')', 
        '{', '}') are now escaped in the program name and filename fields;
      - the tab ('\t') symbol is now escaped in the filename field.
  * Deprecated:
    - cif_validate:
      - the --debug option.
    - cif_Fcalc:
      - the '--dump-xyz-coordinates', '--dump-Cromer-Mann',
        '--dump-cell-parameters', '--dump-cell-xyz-coordinates',
        '--dump-sorted-F', '--dump-atoms-and-neighbors',
        '--dump-test-Fhkl' options.
  * Removed:
    - cif_cod_check:
      - unused COD::CIF::Tags::Manage::tag_is_empty() import.
    - COD::CIF::Data::CODNumbers::have_equiv_timestamps:
      - unused DateTime::Format::RFC3339 import.
    - COD::CIF::Tags::COD:
     - removing the _cod_superseeded_by, _cod_published_source and
       _cod_est_spacegroup_name_H-M tags since the associated data items
       were never used nor properly defined in the dictionary.
  * Fixed:
    - cif_cod_check:
      - updating the author name handling logic by introducing an additional
        call of the 'clean_whitespaces' subroutine for each name;
      - indicating in the help message that 'die on errors' mode is default
    - cif_eval_numbers:
      - non-ASCII digits are no longer recognised as digits.
    - cif_filter:
      - corrected several typos in the help message.
    - cif_fix_values:
      - correcting a typo in the message counting subroutine;
      - looped temperature, density and refinement weighting scheme values
        no longer produce a malformed CIF file.
    - cif_molecule:
      - updating the error handling logic to properly recognise empty arrays.
    - cif_select:
      - ceasing to overwrite existing data names;
      - ceasing to print duplicated data names.
    - cif_validate:
      - quoting metasymbols in enumeration values before putting them in
        regular expressions;
      - fixing typo in deprecation messages;
      - corrected a typo in the help message.
    - cifvalues:
      - correcting detection of empty CIF files.
    - codcif:
      - not detecting single underscores ('_') as CIF data names;
      - correctly processing CIF2 table entry values starting with
        colons (':');
      - no longer reporting CIF comments without a newline symbol as errors
    - dic2markdown:
      - correcting a typo in an error message.
    - pycodcif:
      - executing 'swig' to build Python module prior to installing all
        Python modules thus removing the need for repeated build;
      - fixing source distribution generation;
      - fixing Python3 compile time warnings.
    - sdf_add_cod_data:
      - correcting the regular expression that filters out chemical names
        to take the potential whitespace prefix into account.
    - COD::CIF::Data::Check:
      - unnecessarily strict powder diffraction data checks in
        check_pdcif_relations().
    - COD::CIF::Parser::Yapp:
      - correctly dealing with horizontal tabulations in fix mode;
      - replacing hard-coded module version 1.0 with actual cod-tools
        package version.
    - COD::CIF::Tags::Manage:
      - improving the logic to handle data name overwriting;
      - preventing from creation of data blocks with disallowed names.
    - COD::DateTime:
      - switched from '\d' to '[0-9]' in regular expressions to match
        digits in dates.
    - COD::Formulae::Parser::AdHoc:
      - updated the error handling logic to raise the warn signal instead
        of printing directly to STDERR.
    - replacing 'tree' with 'find' in tests for cif_tcod_tree.
    - fixing issues with parallel building.

cod-tools (2.2)

  * Added:
    - COD::AtomNeighbours: adding subroutine
      neighbour_list_from_chemistry_openbabel_obmol() for the
      construction of atom neighbours data structure from the object
      of Chemistry::OpenBabel::OBMol Perl module.
    - COD::AuthorNames: adding the get_name_syntax_description()
      subroutine.
    - COD::CIF::Data:
      - adding get_sg_data() subroutine.
      - adding get_source_data_block_name() subroutine.
    - COD::CIF::Data::AtomList:
      - adding datablock_from_atom_array() to ease the conversion of
        atom list data structure to CIF;
      - adding generate_cod_molecule_data_block() subroutine.
    - COD::CIF::Data::Check module.
    - COD::CIF::Data::EstimateZ: adding a warning message about the
      inability to calculate the cell volume in the get_volume()
      subroutine.
    - COD::CIF::DDL::Ranges module.
    - COD::CIF::Tags::COD: adding all the data names that were defined
      in the cif_cod.dic version 0.035.
    - COD::CIF::Tags::Manage:
      - has_unknown_value() subroutine;
      - has_inapplicable_value() subroutine;
      - has_special_value() subroutine;
      - has_numeric_value subroutine;
      - get_data_value() subroutine;
      - get_aliased_value() subroutine;
      - cifversion() subroutine.
    - COD::CIF::Tags::Merge module with CIF data block merging code.
    - COD::DateTime module.
    - COD::Spacegroups::Lookup::COD:
      - adding the '-P 2yb (x,y+1/4,z)' space group description;
      - adding the 'F 41/a d c' space group description;
      - adding the 'B 1 21/d 1' space group description;
      - adding the 'P -2yabc' space group description;
      - adding the 'P 2ybc' space group description;
      - adding the 'C -4 2 b' space group description.
    - cif_fillcell: --merge-special-positions command line option.
    - codcif:
      - building and installing shared library.
      - cif_append_datablock() method.
      - value_type_from_string_1_1() function.
      - value_type_from_string_2_0() function.
      - unpack_precision() function.
    - cod_manage_related script.
    - dic2markdown script.
    - pycodcif: experimental object-oriented interface.
    - Build and run dependencies for Fedora-28.
  * Changed:
    - Changing the error messages regarding unrecognised space groups
      to match those raised by the
      COD::CIF::Data::get_symmetry_operators() subroutine.
    - COD::AuthorNames::parse_author_name(): treating leading and
      trailing spaces in author names separately to issue less
      misleading error messages about space symbols not permitted in
      author names.
    - COD::CIF::Tags::Manage: changing the way set_loop_tag() behaves
      when incorrect parameters are passed.
    - COD::CIF::Tags::Print: simplifying the interface of the
      print_loop() subroutine.
    - Removed a conditional dealing with an undefined data block name
      from multiple scripts.
    - cif_validate: changing the way numeric enumeration ranges are
      displayed in audit messages.
    - COD::CIF::Parser::Bison and pycodcif: using unpack_precision()
      function to extract precisions from numeric CIF values.
    - pycodcif:
      - throwing CifParserException instead of exiting.
      - switching to Python setuptools-based build and install system.
    - COD::CIF::Data::CODNumbers: adding 'have_equiv_lattices',
      'have_equiv_bibliographies', 'have_equiv_timestamps',
      'have_equiv_category_values' and 'build_entry_from_db_row' to
      the list of exported subroutines.
    - COD::CIF::Data::SymmetryGenerator: adding 'shift_atom' to the
      list of exported subroutines.
    - cif_fillcell:
      - modifying the output to always contain the '_atom_site_label'
        data item values.
      - modifying the output to encode the symop and translation
        information in atom names in a more standard way.
    - cif_find_symmetry: flushing zeros in the output coordinates.
    - replacement_values.lst: adding new replacement rules.
    - codcif: requalifying warnings about unallowed symbols in CIF 1.1
      comments as notes in fix mode.
    - cif_Fcalc: simplifying the code through the use of more standard
      code constructions and subroutines.
    - simplifying Makefile rules for building and installing.
    - COD::SPGLib:
      - switching to spglib v1.9.9.
      - rewriting the code to use only exported functions of spglib.
    - COD::Spacegroups::Lookup::COD:
      - renaming space group 'P 1 (-a+b+c,a-b+c,a+b-c)' to 'F 1';
      - renaming space group 'P -1 (-a+b+c,a-b+c,a+b-c)' to 'F -1'.
  * Deprecated:
    - usage of COD::CIF::Data::CODPredepositionCheck and
      cod_predeposition_check. The code is underdeveloped, duplicates
      cif-deposit.pl, yet it does not serve the purpose in the COD
      database.
  * Removed:
    - COD::SPGLib: function get_spacegroup(), which has never worked
      as expected, and was superseded by get_sym_dataset().
  * Fixed:
    - COD::Spacegroups::Lookup::COD:
      - correcting the 'ncsym' field in the description of the
        '-P 2yb (1/2*x,y,-1/2*x+z)' space group;
      - correcting space group information of the 'R 1 2/c 1' space
        group.
    - sdf_add_cod_data: modifying the script to no longer create
      useless temporary directories.
    - cif_tcod_tree: using CIF value type to detect special CIF values
      '?' and '.'.
    - COD::CIF::Tags::Manage: deleting old data item values upon the
      call of set_loop_tag() subroutine in order to avoid conflicting
      data.
    - COD::CIF::Data::AtomList: modifying the atom_groups() subroutine
      to treat undefined and unknown ('?') occupancy values as being
      equal to '1'.
    - cif_cod_check:
      - Adding missing descriptions of the '--check-bibliography',
        '--require-only-doi', '--require-full-bibliography',
        '--check-all' and '--check-none' options.
      - Restructuring the code so that error messages about empty
        files are properly issued.
    - COD::CIF::Data::CIF2COD: adding missing parentheses in the
      'cif2cod()' subroutine.
    - COD::CIF::Data::CODNumbers:
      - Correcting the bibliography handling logic to use case
        insensitive string comparison.
      - Correcting the bibliography handling logic to not compare the
        journal names.
    - codcif: possible memory leak in datablock_overwrite_cifvalue().
    - pycodcif:
      - Converting Unicode file names to string before processing.
      - Fixing incorrect braces in dictionary member access.
      - Fixing incorrect precision conversion for values with capital
        E letter in their representation.
    - COD::CIF::Parser::Bison and pycodcif: resetting lexer flags
      between subsequent parser runs.
    - cif_fillcell: correcting the numbering of the symmetry operators
      in atom names to start from '1' and not '0'.
    - cif_filter:
      - correcting CIF-encoding of user-supplied bibliography values
        for both CIF 1.1 and CIF 2.0.
      - replacing ad-hoc datablock generation by result of proper
        new_datablock() function.
    - Adding 'openbabel' from 'epel' repository to CentOS-6.8/run.sh
      dependency list.
    - cif_split and COD::CIF::Data::CIF2COD: handling of Unicode
      symbols in CIF 2.0.
    - cif_dictionary_tags: listing data items of DDLm dictionaries.
    - find_numbers:
      - using COD::CIF::Parser and COD::CIF::Data::CODNumbers.
      - added the warning message handler.
    - Removing CIF 2.0 magic code from CIF file headers before the
      addition in order to avoid duplication and accidental conversion
      of CIF 1.0 files to CIF 2.0 in:
      - cif_filter
      - cif_hkl_COD_number
      - cif_mark_disorder
      - cif_molecule
      - cif_split
    - cif2ref: replacing STAR::Parser by COD::CIF::Parser.
    - COD::Spacegroups::Names: correcting several typos in the
      comments.
    - Fixing manpage formatting issue that resulted in merged option
      descriptions.
    - codcif and pycodcif: fixing void C function prototypes.

cod-tools (2.1)

  * Added:
    - cif_sort_atoms: a script to order atoms by given method.
    - cif_filter: command line options --original-filename-tag and
      --original-data-block-tag.
    - cif_validate: displaying a warning upon validation against DDLm
      conformant dictionaries.
    - cif_cod_check: raising a warning about the space group symmetry
      operation list not being provided in the input file when the
      --check-symmetry-operators option is enabled.
    - cif_split: command line option --do-not-split-global-data-block.
    - COD::CIF::Data::SymmetryGenerator: adding functions:
     - chemical_formula_sum
     - symop_apply
     - symop_register_applied_symop
     - symops_apply_modulo1
     - translate_atom
     - translation
     - trim_polymer
    - COD::CIF::Tags::Manage: adding function rename_tags().
    - cif_tcod_tree: command line option --no-outputs.
  * Changed:
    - cif_find_symmetry: outputting symmetry operators in a canonical
      form.
    - cif_validate:
      - updated the help message.
      - updated the error message related to unrecognised data names.
      - renamed several subroutines and changed their interfaces in
        preparation for the introduction of the DDLm validator. The
        subroutine 'check_against_range' was renamed to 'is_in_range',
        'check_against_range_numb' to 'is_in_range_numeric' and
        'check_against_range_char' to 'is_in_range_char'.
    - cif_find_duplicates: removed the unused import of the
      COD::CIF::Data::CellContents.
    - COD::Spacegroups::Symop::Parse: removed the warning messages
      from the is_symop_parsable() subroutine.
    - cif_cod_check: updated the warning messages dealing with
      symmetry operations.
    - Homogenising symmetry generation code in cif_molecule, cif_p1
      and COD::CIF::Data::Classifier::get_atoms(), reusing code from
      COD::CIF::Data::SymmetryGenerator and COD::CIF::Data::AtomList
      as much as possible.
    - cif_tcod_tree: adding AiiDA commands to load AiiDA database
      dump.
  * Fixed:
    - Removing the 'svn:keywords' svn property from test input CIF
      files.
    - cif_filter: adding name of database code data item to the list
      of data block tags.
    - cif_merge: truncating loop tags after having them overwritten
      with less values.
    - cif_cod_check:
      - correcting some warning messages to no longer contain the
        script name and line number where they were raised.
      - correcting the way the overall number of error messages is
        reported.
      - updated the check_symmetry_operators() and
        'check_space_group_info() subroutines to also consider the
        values of the _space_group_symop_operation_xyz data item.
    - cod_predeposition_check:
      - adding a full stop to the end of error messages raised by
        die().
    - COD::CIF::Data::CODPredepositionCheck: adding newlines to the
      end of error messages raised by die() to remove the
      automatically added script name and line number of the context
      they were raised in.
    - replacing deprecated usage of 'find ... -perm +1' by equivalent
      construction 'find ... -executable' in the installation routine.
    - COD::ErrorHandler: changed all instances of the 'errlevel' hash
      key to 'err_level' in order to homogenize the hash structure
      across different modules.
    - COD::UserMessage: changed the keys of parsed error messages hash
      in order to homogenize the hash structure across different Perl
      modules. The 'errlevel' key was changed to 'err_level', 'line'
      to 'line_no', 'column' to 'column_no' and 'datablock' to
      'add_pos'.
    - codcif and COD::CIF::Parser::Bison: detecting unallowed symbols
      in CIF 1.1 comments.
    - COD::AtomNeighbours: making neighbour_list_from_chemistry_mol()
      treat only aromatic atoms with three or more covalent neighbours
      as planar.
    - cif_molecule: symmetry operators other than identity are not
      applied to symmetry-independent disordered sites, identified by
      negative values of '_atom_site_disorder_group'.
    - COD::CIF::Parser: removing duplicated space in error message
      concerning unknown parser options.
    - codcif: initial byte sequence 0xFEFF was detected as CIF v2.0
      byte order mark instead of U+FEFF, which is the correct byte
      order mark.
    - COD::CIF::Data::AtomList: value of _cod_molecule_atom_transl_id
      was not read by set_cod_molecule_atom_fields().
    - COD::CIF::Tags::Manage: properly removing renamed data items by
      rename_tags().
    - Generating manpages for C scripts from src/components/codcif/.
    - cif_list_tags: implementing --help command line option.
    - Removing temporary directories of failed Shell test cases.
    - COD::CIF::Tags::Print:
      - Modifying the way malformed loops are handled by the print_loop()
        subroutine. From now on a warning message will be output and
        unknown ('?') values will be printed instead of the missing ones.
      - Preventing outputting of empty loops: printing a line of question
        marks, issuing a warning.

cod-tools (2.0)

  * Added:
    - codcif: reading/writing of CIF v2.0 format.
    - cif2json: adding the '--canonical' option that forces the output
      json to be sorted in a predetermined way.
    - COD::CIF::JSON: adding the second parameter to the cif2json()
      subroutine that is intended to store the options for the json
      encoding operation. Currently only the 'canonical' option is
      supported.
    - check_symop_canonicality: a new tool script.
  * Changed:
    - cif_find_symmetry: using symmetry operators as provided by
      spglib instead of operators from lookup hashes as ones from
      spglib seem to better describe space groups with
      nonconventional settings.
    - cif_find_symmetry: using Hall symbol (more precise) for the
      detection of symmetry space group in the output of spglib.
    - cif2json and json2cif: JSON, written/read by these scripts is
      now concatenable (relaxed) by default. Strictly conforming JSON
      can now be produced via --strict command line option in
      cif2json. json2cif is able to read both strict and relaxed JSON.
    - interface of C CIF parser:
      - datablock_value() -> datablock_cifvalue() in datablock.h
      - datablock_overwrite_value() -> datablock_overwrite_cifvalue()
        in datablock.h
      - datablock_types() -> datablock_value_type() in datablock.h
      - datablock_insert_value() -> datablock_insert_cifvalue() in
        datablock.h
      - datablock_push_loop_value() -> datablock_push_loop_cifvalue()
        in datablock.h
    - COD::CIF::Parser::Yapp: detecting and reporting CIF v2.0 format.
    - COD::CIF::Parser::Yapp: adding 'cifversion' subhash.
    - COD::CIF::Parser::Yapp: removing precisions of non-numeric
      looped tags.
    - COD::CIF::Parser::Yapp: decoding Unicode symbols in messages.
    - COD::Spacegroups::Lookup::COD: changing symop strings to their
      canonical forms.
    - COD::CIF::Data::CellContents: implementing a more thorough check
      of the Z value.
    - 'precisions' fields are added for all numeric CIF values, even
      non-looped ones.
    - cif_printout_Python: using pprint() to pretty-print CIF data
      structures.
    - cif_mark_disorder: renaming options --distance-sensivity and
      --occupancy-sensivity to --distance-sensitivity and
      --occupancy-sensitivity respectively.
    - Help messages: unifying the layout of the help messages
      (accessible via the --help command line option) and correcting a
      few typos in the help messages.
  * Removed:
    - datablock.h: datablock_values()
    - duplicate_space_groups: empty import of the
      COD::Spacegroups::Symop::Parse module.
  * Fixed:
    - adding perl-XML-Simple as a run dependency for CentOS 6.8.
    - detecting and removing DEL control character (ASCII decimal
      value 127) from CIF v1.1 strings.
    - pycodcif:
      - Adding the 'precisions' field to each of the save frames.
    - COD::CIF::Parser::Bison:
      - Adding the 'precisions' field to each of the save frames.
    - codcif: detecting ASCII symbols with decimal values 16-31 in
      CIF 1.1 files as errors.

cod-tools (1.1)

  * Added:
    - cif_find_symmetry and spglib interface (using spglib-1.6.4)
    - dependency list for LinuxMint-18.1.
    - cif_bounding_box: a new script to transform obabel-generated
      non-crystal CIF files (no symmetry information, cell parameters,
      Cartesian coordinates given instead of fractional) to cubic unit
      cells, separated by margins of vacuum.
    - cif2rdf: a new script to generate RDF descriptions directly from
      CIF files.
    - cif_fix_values: adding functionality to fix the most common
      mistakes in the values of
      _atom_sites_solution_{primary,secondary,hydrogens}.
    - cif2cod: validating extracted data against SQL data field
      descriptions from database-description.xml.
    - COD::CIF::Data::CIF2COD: adding validate_SQL_types().
    - JSON schema for validation of output from cif2json and like.
    - oqmd2cif: adding convergence flags and labels, lattice and total
      energies, magnetic moments, band gaps, VASP settings, OQMD
      calculation and structure labels, runtime values, error flags,
      OQMD database codes, references to calculation input structures.
    - cod_predeposition_check: implementing parser selection via
      command line options.
    - COD::RDF: a new module for RDF generation with most of the code
      taken from cod2rdf.
    - COD::AuthorNames: a new module for author name parsing to a new
      Perl module with the code from:
      URL: svn+ssh://www.crystallography.net/home/coder/svn-repositories/codcif2xml/trunk/programs/rdfxml2xml
      Repository Root: svn+ssh://www.crystallography.net/home/coder/svn-repositories/codcif2xml
      Repository UUID: e9639961-1eee-46c2-8ca7-0101a2976781
      Revision: 73
    - COD::Algebra: a new module with common GCD functions
    - COD::AtomNeighbours: adding subroutine
      neighbour_list_from_chemistry_mol() for the construction of
      atom neighbours data structure from the output of
      Chemistry::Mol Perl module.
    - cif_hkl_check: diffraction data files conforming to
      cif_twinning.dic are detected as containing diffraction data.
    - COD::Spacegroups::Lookup::COD: adding an extra space group
      setting 'P n m a (c,a-1/4,b)'.
    - cif2cod: adding '--include-keywords-with-undefined-values' and
      '--exclude-keywords-with-undefined-values' command line options.
    - cif_parse: adding '--(no|dont)-fix-syntax-errors' command line
      options.
    - cif_filter: reporting cases when the symmetry space group can
      not be determined from symmetry operators.
    - COD::Algebra::Vector: adding subroutine vector_len().
    - cif_diff: adding '--ignore-empty-values' command line option.
    - cif_fillcell: adding '_space_group_IT_number' and 
      '_space_group_name_Hall' data items to the output.
    - cif_fillcell: adding '--unit-cell', '--no-supercell',
      '--supercell' command line options.
    - cif_validate: checking the existence of parent links, as defined
      via '_list_link_parent' of ddl_core.dic.
    - cif_cod_check: adding a check to locate disorder groups of the
      same assembly having different numbers of atoms (off by
      default).
    - COD::Cell: adding vectors2cell().
    - COD::CID::Data::CIF2COD: adding fields 'cellformula' and
      'compoundsource'.
    - COD::Algebra::Vector: adding vector_angle().
    - COD::CID::Data::CIF2COD: detecting CIF data blocks without
      fractional coordinates.
    - Build dependencies for CentOS 6.8 and Debian 8.2.
    - AtomProperties pipeline: adding dependencies.
    - cif_reduce_Niggli: adding command line option '--compute-symops'
      to compute symmetry operators as well as estimate space groups
      for reduced cells. Experimental, thus off by default.
    - cif2json: a new script to convert CIF to its JSON representation.
    - json2cif: a new script to convert JSON to CIF data structure.
    - Implementing input/output CIF in JSON carrier format in:
      - cif2cod
      - cif_cod_check
      - cif_cod_numbers
      - cif_correct_tags
      - cif_filter
      - cif_printout
      - cif_split
    - COD::CIF::JSON: adding Yapp-like object-oriented interface.
    - COD::CIF::Data::SymmetryGenerator: adding apply_shifts() and
      shift_atom().
    - Test dependency list for Ubuntu 12.04.
    - COD::Cell::Delaunay::Delaunay: more debug prints.
    - COD::AtomProperties: Adding the 'Dummy' atom.
    - COD::AtomProperties assembler:
      - Adding the 'Dummy' atom rule to the assembling process.
      - Adding a way to specify the name of the assembled Perl module.
      - Adding a way to specify the namespace of the assembled Perl
        module.
    - cif_molecule: Adding the '--exclude-dummy-atoms' option.
    - COD::CIF::Data::AtomList: adding the 'exclude_dummy_coordinates'
      option to the atom_array_from_cif() subroutine that excludes
      atoms with at least one dot ('.') coordinate.
    - version information is printed by most of the scripts using
      --version command line option.
  * Changed:
    - COD::CID::Data::CIF2COD treats CIF value '?' amid white space as
      undefined.
    - CIF parsers:
      - adding the ' -- fixed' suffix to parser warning messages
        informing about unquoted strings with spaces.
      - rephrasing error messages in the CIF parsers: replacing one
        occurrence of comma (',') and one occurrence of a dash ('-')
        with two dashes ('--') and changing the phrase 'replaced by'
        to 'replaced with'.
    - Messages in scripts:
      - cif_cod_check
      - cif_correct_tags
      - cif_diff
      - cif_filter
      - cif_fix_values
      - cif_hkl_check
      - cif_merge
      - cif_validate
      - cif2cod
    - Messages in Perl modules:
      - COD::Cell::Niggli::KG76
      - COD::CIF::Data
      - COD::CIF::Data::AtomList
      - COD::CIF::Data::CIF2COD
      - COD::CIF::Data::CODNumbers
      - COD::CIF::Data::CODPredepositionCheck
      - COD::CIF::Data::Diff
      - COD::SOptions
      - COD::Spacegroups::Lookup::COD
    - Renamed tools/duplicate_spacegroups ->
      tools/duplicate_space_groups
    - COD XML:
      - adding descriptions of 'Z', 'Zprime', 'cellformula' and
        'compoundsource'.
      - renaming 'CODDictionary' tag to 'Database', 'CODParameter' to
        to 'Field', 'CODCode' to 'Code'.
      - adding SQL data to 'SQLDataType' tags.
    - Ceasing to convert horizontal tabulations ('\t') into spaces in
      both Bison and Yapp CIF parsers, since such treatment of '\t'
      may corrupt data. Furthermore, such conversion caused lots of
      memory reallocations in Bison CIF parser.
    - cif_correct_tags:
      - Adding misspelt variants of the following tags to the
        replacement list
        (data/replacement-values/replacement_tags.lst):
        - _atom_site_site_symmetry_multiplicity
        - _atom_site_symmetry_multiplicity
        - _exptl_crystal_F_000
        - _geom_*
        - _publ_author_name
        - _publ_author_address
        - _publ_contact_author
      - Correcting several replacement rules.
      - Copying tests/inputs/replacement_tags.lst to
        data/replacement-values/.
      - Adding an error message regarding misspelt looped tags.
      - Adding several error messages regarding the situation when the
        correctly spelt data item and the misspelt one are found in
        the same file.
    - cif_cod_numbers: also considering the unit cell formula and
      compound source when searching for duplicate entries.
    - cif_tcod_tree: using more portable way to fetch contents of
      remote file to Perl scalar using WWW::Curl::Easy.
    - pycodcif:
      - Renaming Python bindings of codcif to pycodcif.
      - Making parser options optional.
      - Using python2.6 if python2.7 does not exist, using more
        common Python syntax in order to make Python code more
        backwards-compatible, in particular with python2.6.
    - COD::CIF::Unicode2CIF: converting named and decimal-numbered
      XML entities into appropriate UTF-8 code points.
    - COD::CIF::Tags::DFT: updating tag list according to
      cif_dft.dic v0.020
    - COD::CIF::Tags::DictTags: updating tag list according to
      cif_core.dic v2.4.5
    - COD::CIF::Tags::TCOD: updating tag list according to
      cif_tcod.dic v0.009
    - Replacing COD::CIF::Data::SymmetryGenerator(),
      COD::CIF::Data::AtomList::copy_struct_deep() and analogous
      functions with Perl built-in Clone::clone().
    - Eliminating "sponge" from
      makefiles/Makefile-perl-multiscript-tests to enable builds on
      CentOS-6.8.
    - COD::CIF::Data::CIF2COD: removing unused arguments (filename,
      data block) from subroutine interfaces.
    - cif_fillcell: replacing deprecated CIF tags with their new
      counterparts.
    - COD::CIF::Data::SymmetryGenerator: apply_shifts() returns
      array reference instead of the array.
    - cif_distances: removing extra space from the output.
    - cif_molecule:
      - printing only first five messages about detected bumps.
      - ignoring atoms with dummy ('.') or unknown ('?') coordinates.
    - codcif and COD::CIF::Parser: removing duplicated line and
      position numbers from parser error messages.
    - Canonicalizing CIF data item names in a bunch of scripts that
      have not used this feature before. Homogeneous treatment of CIF
      data item names in the whole system is necessary both to
      leverage the reusability of code and to avoid bugs.
    - cif_fillcell: building unit cell by default (instead of the
      3x3x3 supercell).
    - COD::SOptions: renaming interpolateFile() to interpolate_file().
    - Moving atom_groups() and assemblies() from cif_molecule and
      cif_p1 to COD::CIF::Data::AtomList.
    - cexceptions and getoptions: changing the linker from 'ld' to
      'cc'.
    - cif_distances: selecting the first shortest distance: this
      should solve the floating-point problem that occurs on different
      machines.
    - codcif: explicitly specifying the CIF version in error messages
      of the type 'it is not acceptable in this version'.
    - cif_distances: replacing shift_atom() with apply_shifts() from
      COD::CIF::Data::SymmetryGenerator.
    - COD::Spacegroups::Symop::Algebra: symop_vector_mul() returns
      array reference (Perl wantarray construction was used before).
    - cif_distances: excluding atoms with unknown coordinates.
    - COD::CIF::Data::AtomList:
      - ordering atoms by their summary occupancies in atom_groups().
      - moving the logic that allows to skip an atom before
        extracting it into a separate subroutine 'is_atom_excludable'.
      - removing the 'do_not_resolve_chemical_type' option from the 
        extract_atom() subroutine since the same functionality can
        also be achieved with the 'allow_unknown_chemical_types'
        option.
      - moving logic that sets atom values generated by 'cif_molecule'
        to a separate subroutine 'set_cod_molecule_atom_fields'.
    - Renaming COD::CIF2JSON to COD::CIF::JSON.
    - COD::CIF::JSON: switching to stream-oriented JSON parsing.
    - Moving the warning message about the user-provided Z value
      mismatching the one given in the input file from the
      COD::CIF::Data::CellContents module to the cif_cell_contents
      script.
    - Unifying interfaces of:
      - COD::Cell::Conventional::deWG91::reduce()
      - COD::Cell::Delaunay::Delaunay::reduce()
      - COD::Cell::Niggli::KG76::reduce()
    - COD::CIF::Data::CIF2COD: adding 'Z' and 'Zprime' to the list of
      default new fields.
    - cif_printout: changing default print mode to Data::Dumper in
      order to allow printing of nested data structures.
    - COD::CIF::Data::CODPredepositionCheck: replacing
      COD::ErrorHandler::process_errors() calls with calls to local
      critical().
    - Moving extraction of '_atom_site_symmetry_multiplicity' value to
      COD::CIF::Data::AtomList::extract_atom() from
      COD::CIF::Data::AtomList::atom_array_from_cif().
    - COD::CIF::Parser::Bison: linking compiled module against
      archives of static libraries (.a) instead of objects (.o) of
      codcif, cexceptions and getoptions.
    - COD::AtomProperties assembler:
      - Migrating to using the 'elements.xml' file from the '0a50119'
        commit of the BODR (https://github.com/egonw/bodr) repository.
      - Refactoring: changing the module name from 'AtomProperties' to
        'COD::AtomProperties'.
      - Correcting a few layout mistakes in the comments providing the
        data sources.
  * Deprecated:
    - usage of doc/CODDictionary.xml (database-description.xml of
      appropriate database should be used instead, such as
      http://www.crystallography.net/cod/xml/documents/database-description/database-description.xml)
  * Removed:
    - doc/TAGS.XML
    - COD::Spacegroups::Symop::Algebra: symop_apply(). Using
      symop_vector_mul() instead.
    - COD::CIF::Data::SymmetryGenerator: copy_atom(). Using
      copy_atom() from COD::CIF::Data::AtomList instead.
    - debian/ directory.
  * Fixed:
    - adding libxml-simple-perl as a run dependency for Ubuntu-12.04
      and Debian-8.6.
    - CIF line folding protocol:
      - COD::CIF::Parser::Yapp: removing backslash from the last line
        of unfolded CIF text field.
      - codcif and COD::CIF::Parser::Yapp: removing trailing
        whitespace from the lines of to-be-unfolded CIF text fields.
    - CIF line unprefixing protocol:
      - COD::CIF::Parser::Bison: removing the empty line from the
        beginning of the text field when the line is unprefixed but
        not unfolded.
      - COD::CIF::Parser::Yapp: unprefixing a multiline text field
        that has a "/\n" as its second line no longer causes the text
        field to also be unfolded.
    - COD::CIF::Unicode2CIF:
      - converting CIF triple dash ('---') into UTF-8 em dash
        (&#x2014;) instead of a combination of figure dash and en
        dash.
      - converting CIF symbol '\s' to lowercase sigma (GREEK SMALL
        LETTER SIGMA) instead of final lowercase sigma (GREEK SMALL
        LETTER FINAL SIGMA). On the other way round, UTF-8 code point
        for final lowercase sigma is now converted into corresponding
        XML entity instead of CIF markup symbol '\s'.
      - converting tilde symbol '~' into CIF '\\sim ' sequence as per
        CIF specification instead of the '\sim ' sequence.
    - codcif: fixing incorrect line numbers in error messages.
    - Memory leaks in codcif and COD::CIF::Parser::Bison.
    - codcif: performing all character operations via int data type
      (instead of char) in cif_lexer.c, as conversions between char
      and int used to cause loss of EOF characters.
    - cif_split_primitive: preserving CIF comments in the output of
      the script.
    - Error messages in codcif (occurence -> occurrence)
    - Error messages in the following scripts:
      - cif_molecule
      - cod_predeposition_check
    - Error messages in the following Perl modules:
      - COD::CIF::Data::CODPredepositionCheck
      - COD::SOptions
    - Help texts of the following scripts:
      - cif_cell_contents
      - cif_cod_check
      - cif_cod_deposit
      - cif_cod_numbers
      - cif_diff
      - cif_eval_numbers
      - cif_filter
      - cif_hkl_COD_number
      - cif_hkl_check
      - cif_merge
      - cif_molecule
      - cif_p1
      - cif_select
      - cif_split
      - cif2cod
      - cifparse
      - cod_predeposition_check
    - cif_select: adding a missing import of
      COD::CIF::Tags::Manage::rename_tag()
    - cif_cod_check: using explicit UTF-8 binmode for STDERR.
    - COD::UserMessage: escaping newline characters in generated
      messages with numeric character reference '&#10;' in order to
      comply with the EBNF grammar of error messages as published in
      Merkys et al. 2016.
    - COD::Formulae::Parser::AdHoc: using COD::UserMessage for
      message formation.
    - cif_Fcalc: fixing a typo in the atom property name
      ('scat_dispesion_real' -> 'scat_dispersion_real').
    - COD::CIF::Data::CIF2COD: returning SQL NULL instead of string
      "NULL" for unknown cell volumes.
    - codcif: duplicated tags, whose second occurrence is in a loop,
      were reported as warnings instead of errors.
    - cif_cod_deposit: adding '--show-error' command line option for
      'curl' in order to make its error messages visible.
    - codcif: escaping special symbols ('&', ':', spaces and
      parentheses in some lexems) in C parser messages.
    - codcif: detecting reserved CIF lexem 'global_'.
    - codcif and COD::CIF::Parser::Yapp: detecting empty CIF data
      block names.
    - codcif and COD::CIF::Parser::Yapp: detecting unquoted CIF
      strings starting with closing square brackets.
    - codcif and COD::CIF::Parser::Yapp: returning an empty list of
      data blocks upon parsing empty CIF files. According to the CIF
      specification, empty CIF is an empty list of data blocks.
    - codcif: reporting replaced spaces in data block names as
      WARNINGs instead of NOTEs.
    - COD::CIF::Data::AtomList:
      - sorting hash keys in atom_groups() in order to prevent from
        non-deterministic output.
      - sorting the disorder assemblies so the output results would
        not be affected by the Perl hashing algorithm.
    - codcif: allowing unquoted CIF strings that begin with 'loop_'
      prefix albeit not equal to 'loop_' string.
    - COD::CIF::Tags::Print: quoting unquoted CIF strings starting
      with closing square bracket.
    - Fixing exception handling in the following scripts:
      - cif_fix_values
      - cif_reduce_cell
      - cif2xyz
    - COD::ErrorHandler: ensuring that the code block is only
      executed upon successful matching.
    - COD::CIF::Data: checking whether tag's value/precision is
      defined in get_cell().
    - codcif: detecting and fixing headerless CIF files composed of a
      single CIF data item only.
    - COD::CIF::Parser::Yapp: everything from the quote symbol to the
      end of the line will be considered a part of the misquoted
      string.
    - cif_filter:
      - removing fold() subroutine call in the bibliography reference
        hash processing block. The subroutine was called in the wrong
        place and disregarded the command line options
        '--folding-width', '--fold-title' and '--dont-fold-title'.
      - user provided command line options dealing with
        bibliographical information are now ignored if the provided
        value is an empty string.
    - Replacing indirect Perl method calls (new Object) with direct 
      methods calls (Object->new) since it is the preferred way.
    - COD::UserMessage: avoiding negative positions in error messages.
    - COD::CIF::Data::CIF2COD: cif2cod():
      - determines number of distinct elements for structures with
        defined and non-empty chemical formulae.
      - The cif markup entity conversion is now carried out before
        collapsing several white spaces into a single white space.
        This allows to preserve at least a single whitespace after
        the symbol encoded by the cif markup entity.
    - cif_molecule:
      - Simple polymers are now detected even with
        '--max-polymer-span 0'.
      - Trimming polymers after polymer dimension measurement and
        before formulae calculation. Multiple moieties are then merged
        into one if one data block output is requested. Thus, correct
        formulae are achieved and non-polymer atoms are not trimmed.
      - Enforcing '.' occupancies for all output dummy atoms even if
        the '--force-unit-occupancies' option is in effect.
      - Setting multiplicities to '?' for atoms of dummy molecules.
      - Preventing printing of a syntactically incorrect CIFs (ones
        that contain loops without values).
    - pycodcif: passing the 'fix_datablock_name' option directly to
      the lexer.
    - pycodcif: unpacking of floats with precisions with a sign
      ('+' or '-') and implicit integer parts (-.01 and +.01).
    - installing of pycodcif.
    - oqmd2cif: producing syntactically correct CIF files for
      structures without any atoms.
    - COD::Cell::Delaunay::Delaunay: correcting the Delaunay
      reduction algorithm so that it does not return flattened unit
      cells.
    - COD::Cell::Conventional::deWG91: transposing the new basis
      matrix to get the correct cell vectors, correcting cell
      computation after the reduction.
    - COD::SOptions: modifying 'interpolate_file' subroutine to print
      the error message about not being able to open the file even if
      the 'option' argument is not provided.

cod-tools (1.0)

  * Initial release.
