#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author: antanas $
#$Date: 2015-07-23 06:54:04 +0300 (Thu, 23 Jul 2015) $ 
#$Revision: 3607 $
#$URL: svn://cod.ibt.lt/cod-tools/branches/saulius-superspacegroups/scripts/symop_build_spacegroup $
#------------------------------------------------------------------------------
#*
# Find and print out duplicated space group definitions in COD::Spacegroups::Lookup::COD.
#**

use strict;
use warnings;

use COD::Spacegroups::Lookup::COD;
use COD::Spacegroups::Symop::Parse;

# Identify the spacegroup from the symmetry operators:

sub mk_symop_key
{
    my ( $symops ) = @_;

    my @canonical = sort 
        map {symop_string_canonical_form($_)} @$symops;
    my $key = join( ";", @canonical );
    return $key;
}

sub mkhash
{
    if( 1 ) {
        map { (mk_symop_key($_->{symops}), $_) }
        @COD::Spacegroups::Lookup::COD::table,
        @COD::Spacegroups::Lookup::COD::extra_settings;
    }
}

my %symop_lookup_table = mkhash();

for my $sg ( @COD::Spacegroups::Lookup::COD::table,
             @COD::Spacegroups::Lookup::COD::extra_settings ) {
    my @symops = @{$sg->{symops}};
    my $key = mk_symop_key( \@symops );

    if( exists $symop_lookup_table{$key} ) {
        my $estimated_sg = $symop_lookup_table{$key};
        if( $sg->{universal_h_m} ne $estimated_sg->{universal_h_m} ) {
            printf "%-20s\t%s\n",
                $sg->{universal_h_m},
                $estimated_sg->{universal_h_m};
        }
    } else {
        print STDERR "$0: spacegroup could not be identified\n"
    }
}
