#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl5 -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Date$ 
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
#  Parse a CIF file and print out the essential information in the COD
#  REF format
#**

use strict;
use lib "./lib/perl5";
use STAR::Parser;
use SOptions;
use SUsage;

my $user_journal;
my $user_volume;
my $user_start_page;
my $user_end_page;
my $user_year;

@ARGV = getOptions( 
    "-j,--journal"   => \$user_journal,
    "-v,--volume"    => \$user_volume,
    "-p,--page"      => \$user_start_page,
    "--start-page"   => \$user_start_page,
    "-e,--end-page"  => \$user_end_page,
    "-y,--year"      => \$user_year,
    "--help,--usage" => sub { SUsage::usage; exit },
);

my $filename = shift(@ARGV);
my $biblio = @ARGV > 0 ? shift(@ARGV) : undef;
my @data;

@data = STAR::Parser->parse(-file=>$filename);

my @requested_cif_tags = (
    "_chemical_formula_sum",
    "_chemical_name_systematic",
    "_journal_name_full",
    "_journal_year",
    "_journal_volume",
    "_journal_page_start",
    "_journal_page_end",
    "_cell_measurement_temperature",
    "_diffrn_ambient_temperature",
    "_cell_length_a",
    "_cell_length_b",
    "_cell_length_c",
    "_cell_angle_alpha",
    "_cell_angle_beta",
    "_cell_angle_gamma",
    "_symmetry_space_group_name_H-M",
    "_symmetry_equiv_pos_as_xyz",
);

my $n = 0;

for my $dataset (@data) {

    die unless defined $dataset->{DATA};

    my $compounds = $dataset->{DATA};
    my @names = keys %{$compounds};

    ## print int(@data), "\n"; exit;

    my $compound_name = $names[0];
    my $compound = $compounds->{$compound_name};
    my $category = defined $compound ? $compound->{"-"} : undef;
    my $datablok = defined $category ? $category->{"-"} : undef;

    next if !defined $datablok or !defined $datablok->{_atom_site_label};

    print "\n" if $n > 0;

    $datablok->{_journal_name_full} = [ $user_journal ]
	if defined $user_journal;

    $datablok->{_journal_year} = [ $user_year ]
	if defined $user_year;

    $datablok->{_journal_volume} = [ $user_volume ]
	if defined $user_volume;

    $datablok->{_journal_page_start} = [ $user_start_page ]
	if defined $user_start_page;

    $datablok->{_journal_page_end} = [ $user_end_page ]
	if defined $user_end_page;

    # Print out requested tags:
    for my $tag (@requested_cif_tags) {
	if( defined $datablok->{$tag} ) {
	    my $data = $datablok->{$tag};
	    if( int(@{$data}) == 1 ) {
		my @lines = split( "\n", $data->[0] );
		for my $line (@lines) {
		    print "#", $tag, "\t", $line, "\n";
		}
	    } else {
		for my $j (0..$#{$data}) {
		    my @lines = split( "\n", $data->[$j] );
		    for my $line (@lines) {
			print "#", $tag, "[", $j, "]", "\t", $line, "\n";
		    }
		}
	    }
	}
    }

    # Chemical formula:
    my $formula = $datablok->{_chemical_formula_sum}[0];
    $formula =~ s/^\s*|\s*$//g;

    # Cell constants:
    my $a = $datablok->{_cell_length_a}[0];
    my $b = $datablok->{_cell_length_b}[0];
    my $c = $datablok->{_cell_length_c}[0];
    my $alpha = $datablok->{_cell_angle_alpha}[0];
    my $beta  = $datablok->{_cell_angle_beta}[0];
    my $gamma = $datablok->{_cell_angle_gamma}[0];

    # Spacegroup:
    my $spacegroup = $datablok->{"_symmetry_space_group_name_H-M"}[0];

    # Atom records:

    my $atom = $datablok->{_atom_site_label};

    my $x = $datablok->{_atom_site_fract_x};
    my $y = $datablok->{_atom_site_fract_y};
    my $z = $datablok->{_atom_site_fract_z};

    my $q = $datablok->{_atom_site_occupancy};
    my $B = $datablok->{_atom_site_U_iso_or_equiv};
    
    if( !defined $B ) {
	$B = $datablok->{_atom_site_Uiso_or_Biso};
    }

    my $multiplicity = $datablok->{_atom_site_symmetry_multiplicity};
    my $Wyckoff_sym = $datablok->{_atom_site_Wyckoff_symbol};

    # Anisotripoc temperature factor records:

    my $aniso_label = $datablok->{_atom_site_aniso_label};
    my @anisou = (
	$datablok->{_atom_site_aniso_U_11},
	$datablok->{_atom_site_aniso_U_22},
	$datablok->{_atom_site_aniso_U_33},
	$datablok->{_atom_site_aniso_U_23},
	$datablok->{_atom_site_aniso_U_13},
	$datablok->{_atom_site_aniso_U_12},
    );

    # Print it out:

    if( defined $biblio ) {
	open( BIBLIO, $biblio ) or
	    die( "Could not open file '$biblio' for reading: $?" );
	my $reference = <BIBLIO>; # read one line
	close BIBLIO;
	print $reference;
    } else {
	print "Bibliography ...\n";
    }

    do {
	local $, = " ";
	local $\ = "\n";

	print $formula;

	print $a, $b, $c, $alpha, $beta, $gamma;

	$spacegroup =~ s/\s*//g;
	print $spacegroup;

	for my $i (0..$#{$atom}) {
	    print
		$atom->[$i],
		defined $multiplicity ? $multiplicity->[$i] : "?",
		defined $Wyckoff_sym ? $Wyckoff_sym->[$i] : "?",
		$x->[$i], $y->[$i], $z->[$i],
		$q->[$i], $B->[$i];
	}
    };

    if( defined $aniso_label and int(@{$aniso_label}) > 0 ) {
	for my $i (0..$#{$aniso_label}) {
	    print "ANISOU ", $aniso_label->[$i];
	    for my $anisou (@anisou) {
		print " ", $anisou->[$i];
	    }
	    print "\n";
	}
    }

    $n ++;
}
