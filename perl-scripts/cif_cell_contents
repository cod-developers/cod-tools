#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Date$ 
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
#  Calculate cell contents from atom coordinates and symmetry information.
#**

use strict;
use lib "./lib/perl5";
use lib "./CIFParser";
use lib "./Spacegroups";
use CIFData::CIFCellContents;
use CIFParser;
use CIFTagCanonicalNames;
use ShowStruct;
use Serialise;
use SymopParse;
use Fractional;
use File::Basename;
use SOptions;
use SUsage;

my $Z_value;

#* Usage:
#*     cif_cell_constants [options] input.cif
#*
#* Options:
#*
#*     -Z, --cell-formula-units-Z  1
#*         Specify number of formula sum units in the unit cell.
#*         Default: taken from the input CIF if present, otherwise
#*         assumed to be 1.
#*
#*     --help  print a short usage message (this message) and exit.
#**

@ARGV = getOptions(

    "-Z,--cell-formula-units-Z" => \$Z_value,

    "--help,--usage" => sub { SUsage::usage; exit },
);

sub print_error($$$$$)
{
    my ( $program, $filename, $datablock, $errlevel, $message ) = @_;

    print STDERR $program, ": ", $filename,
    defined $datablock ? " data_" . $datablock : "",
    defined $errlevel ? ": " . $errlevel : "",
    ": ", $message, ".\n";
}

sub error($$$$)
{
    my ( $program, $filename, $datablock, $message ) = @_;
    print_error( $program, $filename, $datablock, "ERROR", $message );
}

sub warning($$$$)
{
    my ( $program, $filename, $datablock, $message ) = @_;
    print_error( $program, $filename, $datablock, "WARNING", $message );
}

my $Id = '$Id$';

my $filename = shift(@ARGV);

my $parser = new CIFParser;

my $data = $parser->Run($filename);

for my $dataset (@$data) {

    canonicalize_names( $dataset );

    my $values = $dataset->{values};

#   extracts atom site label or atom site type symbol
    my $loop_tag;

    if( exists $values->{"_atom_site_label"} ) {
        $loop_tag = "_atom_site_label";
    } elsif( exists $values->{"_atom_site_type_symbol"} ) {
        $loop_tag = "_atom_site_type_symbol";
    } else {
        error( $0, $filename, $dataset->{name},
	       "neither _atom_site_label " .
	       "nor _atom_site_type_symbol was found in the input file" );
        next;
    }

#   extracts cell constants

    my @unit_cell = CIFCellContents::get_cell( $values, $filename,
					       $dataset->{name} );
    my $ortho_matrix = symop_ortho_from_fract( @unit_cell );

#   extracts symmetry operators
    my $sym_data = CIFCellContents::get_symmetry_operators( $dataset,
							    $filename );

#   extract atoms
    my $atoms = CIFCellContents::get_atoms( $dataset, $filename, $loop_tag );

#   compute symmetry operator matrices
    my @sym_operators = map { symop_from_string($_) } @{$sym_data};

    ## serialiseRef( \@sym_operators );

    my $sym_atoms = CIFCellContents::symop_generate_atoms( \@sym_operators,
							   $atoms,
							   $ortho_matrix );

    ## serialiseRef( $sym_atoms );

#   get the Z value

    my $Z;

    if( defined $Z_value ) {
        $Z = $Z_value;
        if( exists $values->{_cell_formula_units_Z} ) {
            my $file_Z = $values->{_cell_formula_units_Z}[0];
            if( $Z != $file_Z ) {
                warning( $0, $filename, $dataset->{name},
                         "overriding _cell_formula_units_Z ($file_Z) " .
                         "with command-line value $Z" );
            }
        }
    } else {
        if( exists $values->{_cell_formula_units_Z} ) {
            $Z = $values->{_cell_formula_units_Z}[0];
        } else {
            $Z = 1;
            warning( $0, $filename, $dataset->{name},
                     "_cell_formula_units_Z is missing -- assuming Z = $Z" );
        }
    }

    my %composition =
	CIFCellContents::atomic_composition( $sym_atoms, $Z,
					     int(@sym_operators));

    CIFCellContents::print_composition( \%composition );
}
