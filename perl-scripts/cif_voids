#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Date$
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
#  Find voids in CIF file.
#**

use strict;
use lib "./lib/perl5";
use lib "./CIFParser";
use lib "./CIFTags";
use lib "./Spacegroups";
use IPC::Open3;
use CIFParser;
use CCIFParser;
use CIFTagCanonicalNames;
use SymopParse;
use SymopLookup;
use SymopAlgebra qw(symop_mul symop_invert);
use CIFTagPrint;
use CIFTagManage;
use File::Basename;
use SOptions;
use SUsage;
use UserMessage;
use Fractional;
use AtomProperties;

my $Id = '$Id$';

my $debug = 0;
my $dump_atoms = 0;
my $jmol_isosurface = 0;
my $format = "%8.6f";
my $continue_on_errors = 0;
my $audit = 1;
my $uniquify_atoms = 1;
my $exclude_zero_occupancies = 1; # Do not use atoms with zero
                                  # occupancies

# A distance between two atoms when they are considered to be
# instances of the same atom on a special position:

my $special_position_cutoff = 0.01;

# A maximum alowed count of polymer example atoms: more than this
# amount of symmetry (translational) equivalen atoms, for each AU
# atom, will not be written to the output file:

my $max_polymer_atoms = 100;

my $cif_header_file; # Comments from the beginning of this file wil be
                     # prepended to the output.

my $use_parser = "c"; # Used CIF parser

my $merge_disorder_groups = 0; # Put all alternative conformations
                               # into one data block.

my $largest_molecule_only = 0; # Output only the largest (having the
                               # greatest number of atoms) molecule.

my $output_geom_bond = 0; # Compute and output the _geom_bond_... data
                          # items (bond lengths, valencies, etc.)

@ARGV = getOptions
(
#** --uniquify-atoms
#**                    Makes unique the labels of atoms (default).
#**
#** --no-uniquify-atoms,--dont-uniquify-atoms
#**                    Do not makes unique labels for atoms,
#**                    exclude duplicates.
#**
#** --continue-on-errors
#**                    Do not stop if errors such as unrecognised atoms are
#**                    encountered; the output may be incorrect and missing
#**                    some atoms if this otion is used!
#**
#** --dont-continue-on-errors, --no-continue-on-errors
#**                    Stop immediately when an error is encountered.
#**                    
#** --exclude-zero-occupancies
#**                    Do not use atoms woth 0 occupancies in calculations
#**                    (defalut).
#**
#** --dump-atoms 
#**       Dump atoms (including symmetry-equivalent) in CIF
#**       format, for inspecion with some graphics program
#**
#** --dont-dump-atoms, --no-dump-atoms
#**       Do not dump atoms (default)
#**
#** --dump-jmol-isosurfaces
#**       Dump Jmol isoSurface commands enabling visualisation of the
#**       void spheres with Jmol.
#**
#** --dont-dump-jmol-isosurfaces, --no-dump-jmol-isosurfaces
#**       Do not dump Jmol isoSurface commands (default) 
#**
#** --split-disorder-groups, --dont-merge-disorder-groups
#**       Put examples of disorder group conformations into separate data
#**       blocks (default).
#**
#** --merge-disorder-groups, --dont-split-disorder-groups
#**       Put all disorder groups into one data block.
#**
#** --use-perl-parser
#** --use-c-parser
#**       Specify parser to parse CIF files. C parser is default.
#**
#** --debug            Print some human-readable debug output
#** --no-debug         Suppress any debug output (default)
#**
#** --format "%8.6f"   Use the specified format for output coordinate printout.
#**
#** --audit            print audit information to the generated CIF file
#**                    (default)
#** --no-audit         do not print audit information to the generated CIF file
#** --help,--usage     print short usage message (this message) and exit

    "--uniquify-atoms"      => sub { $uniquify_atoms = 1; },
    "--no-uniquify-atoms"   => sub { $uniquify_atoms = 0; },
    "--dont-uniquify-atoms" => sub { $uniquify_atoms = 0; },

    "--continue-on-errors" => sub{ $continue_on_errors = 1 },
    "--no-continue-on-errors" => sub{ $continue_on_errors = 0 },
    "--dont-continue-on-errors" => sub{ $continue_on_errors = 0 },

    "--exclude-zero-occupancies"    => sub { $exclude_zero_occupancies = 1; },
    "--no-exclude-zero-occupancies" => sub { $exclude_zero_occupancies = 0; },
    "--dont-exclude-zero-occupancies" => sub { $exclude_zero_occupancies = 0; },

    "--debug"    => sub { $debug = 1 },
    "--no-debug" => sub { $debug = 0 },

    "--format" => \$format,

    "--dump-atoms"      => sub{ $dump_atoms = 1 },
    "--dont-dump-atoms" => sub{ $dump_atoms = 0 },
    "--no-dump-atoms"   => sub{ $dump_atoms = 0 },

    "--dump-jmol-isosurfaces"      => sub{ $jmol_isosurface = 1 },
    "--dont-dump-jmol-isosurfaces" => sub{ $jmol_isosurface = 0 },
    "--no-dump-jmol-isosurfaces"   => sub{ $jmol_isosurface = 0 },

    "--split-disorder-groups,--dont-merge-disorder-groups," .
    "--do-not-merge-disorder-groups,--no-merge-disorder-groups"
        => sub { $merge_disorder_groups = 0 },
    "--merge-disorder-groups,--dont-split-disorder-groups" .
    "--do-not-split-disorder-groups,--no-split-disorder-groups"
        => sub { $merge_disorder_groups = 1 },

    "--use-perl-parser"       => sub{ $use_parser = "perl" },
    "--use-c-parser"          => sub{ $use_parser = "c" },

    "--audit"                   => sub { $audit = 1; },
    "--no-audit"                => sub { $audit = 0; },
    "--help,--usage"            => sub { SUsage::usage; exit },
);

#==============================================================================#
# Forward subroutine definitions:

sub get_unit_cell( $$$ );
sub symgen_atom( $$$ );
sub symgen_all_atoms( $$$ );
sub apply_shifts( $$ );
sub uniquify_atom_names( $$$$ );
sub initial_atoms( $$$$$$$ );
sub get_symmetry_operators( $$ );

sub test_bump( $$$$$$$ );
sub mat_vect_mul( $$ );

@ARGV = ("-") unless @ARGV;

for my $filename (@ARGV) {

    my $data;
    if( $use_parser eq "perl" ) {
        my $parser = new CIFParser;
        $data = $parser->Run($filename);
    } else {
        $data = CCIFParser::parse($filename);
    }

    canonicalize_all_names( $data );

    for my $dataset (@$data) {
        # extracts atom site label or atom site type symbol
        my $values = $dataset->{values};

        # extracts symmetry operators
        my $sym_data = get_symmetry_operators( $dataset, $filename );

        if( !defined $sym_data ) {
            error( $0, $filename, $dataset->{name},
                   "no symmetry information found" );
        }

        if((defined $sym_data) && ($sym_data != 0)) {
            my $molecule_id = 0;
            my $dataset_name = $dataset->{name};

            my $void_groups = get_voids( $filename, $dataset_name,
                                         $sym_data,
                                         $dataset,
                                         \%AtomProperties::atoms,
                                         $uniquify_atoms );

            my $i = 1;
            for my $void_group (@$void_groups) {
                for my $void (@$void_group) {
                    my $coords = $void->{coordinates_ortho};
                    if( $jmol_isosurface ) {
                        print "isoSurface isosurface$i center {" .
                              join( " ",
                                    map( sprintf( $format, $_ ),
                                         @$coords ) ),
                              "} sphere " . $void->{radius} . "\n";
                        $i++;
                    } else {
                        print "VOID ",
                            join( " ",
                                  map( sprintf( $format, $_ ),
                                       @$coords ) ),
                            " " . $void->{radius} . "\n";
                    }
                }
            }
        }
    }
}

#==============================================================================#
# Find a maximal covalent radius in the atom property list

sub get_max_covalent_radius($)
{
    my ($atom_properties) = @_;

    my $max_radius = 0;

    for my $atom (keys %$atom_properties) {
        if( $max_radius < $atom_properties->{$atom}{covalent_radius} ) {
            $max_radius = $atom_properties->{$atom}{covalent_radius};
        }
    }

    return $max_radius;
}

#==============================================================================#
# This is the main function where other functions such as find_molecules are
# called.
# Accepts
#     covalent_sensitivity - a threshold for covalent sensitivity
#     filename             - CIF file name
#     sym_data             - symmetric data from the CIF file
#     atom_site_tag        - atom site label or atom site type symbol from the
#                            CIF file
#     values               - a hash where a data from the CIF file is stored
#
# Returns
#     unique_molecules     - an array of hashes
#                     %molecule = (
#                         atoms=>[\%atom_info1, \%atom_info2], #covalent bond
#                         chemical_formula_sum=>"C6 H6",
#                                 );

sub get_voids
{
    my $filename             = shift;
    my $dataname             = shift;
    my $sym_data             = shift;
    my $dataset              = shift;
    my $atom_properties      = shift;
    my $uniquify_atoms       = shift;

    my $values = $dataset->{values};

    # Parse symmetry operators:
    my @sym_operators = map { symop_from_string($_) } @{$sym_data};

    # Get cell angles(alpha, beta, gama) and lengths(a, b, c)
    my @cell = get_unit_cell( $values, $filename, $dataname );

    # Make a matric to convert from fractional coordinates to
    # orthogonal:
    my $f2o = symop_ortho_from_fract(@cell);

    # Extract atoms fract coordinates
    my $atom_list = initial_atoms( $atom_properties, $dataset,
                   $filename, $dataname, $f2o,
                   \@sym_operators, $uniquify_atoms );

    return [] unless defined $atom_list;

    if( @$atom_list == 0 ) {
        warning( $0, $filename, $dataname,
                 "no atoms suitable for processing were found; " .
                 "maybe all occupancies were unknown, zero, or " .
                 "all atom types were unrecognised?" );
        return [];
    }

    my $atom_groups;
    if( 0 ) {
        # Split init atoms into assemblies and groups, if requested
        if( $merge_disorder_groups ) {
            $atom_groups = [ $atom_list ];
        } else {
            $atom_groups = atom_groups($atom_list);
        }
    } else {
        $atom_groups = [ $atom_list ];
    }

    my @void_groups;

    my $n = 1;
    foreach my $atom_group ( @{$atom_groups} )
    {
        my @symmetric_atoms = apply_shifts(
            symgen_all_atoms( $atom_group, \@sym_operators, $f2o ), $f2o );

        foreach my $atom (@symmetric_atoms)
        {
            $atom->{coordinates_ortho} =
                mat_vect_mul( $f2o, $atom->{coordinates_fract} );
        }

        if( $dump_atoms ) {
            dump_atoms_as_cif( $n++, \@symmetric_atoms, \@cell );
            next
        }

        my %atom_group_labels = map { $_->{name} => 1 } @$atom_group;
        my @initial_atoms;
        foreach my $symmetric_atom ( @symmetric_atoms ) {
            push( @initial_atoms, $symmetric_atom )
                if exists $atom_group_labels{$symmetric_atom->{name}};
        }

        # Finds voids
        my @voids = find_voids( $atom_properties,
                                \@symmetric_atoms,
                                \@initial_atoms,
                                $filename, $dataname,
                                $f2o );

        push( @void_groups, \@voids );
    }

    return \@void_groups;
}

# ============================================================================ #
# Accepts an array of
#
#   $atom_info = {
#                   site_label=>"C1",
#                   name=>"C1_2",
#                   chemical_type=>"C",
#                   coordinates_fract=>[1.0, 1.0, 1.0],
#                   unity_matrix_applied=>1,
#                   assembly=>"A", # "."
#                   group=>"1", # "."
#              }
#
sub uniquify_atom_names($$$$)
{
    my ($init_atoms, $uniquify_atoms, $filename, $dataset_name) = @_;

    my $max_label_suffix = 30000; # Maximum number to be appened to labels 
                                  # when trying to produce unique names.

    my @checked_initial_atoms;

    my %used_labels;
    my @labels_to_be_renamed;

    foreach my $atom (@{$init_atoms})
    {
        my $atom_copy = copy_atom( $atom );
        my $label = $atom->{name};

        push( @checked_initial_atoms, $atom_copy );

        if( ! exists $used_labels{$label} ) {
            $used_labels{$label}{atoms} = [ $atom_copy ];
        } else {
            push( @{$used_labels{$label}{atoms}}, $atom_copy );
            warning( $0, $filename, $dataset_name,
                     "atom label '$label' is not unique" );
            push( @labels_to_be_renamed, $label );
        }
        $used_labels{$label}{count} ++;
    }

    if( $uniquify_atoms )
    {
        foreach my $label (@labels_to_be_renamed)
        {
            foreach my $renamed_atom (@{$used_labels{$label}{atoms}}) {
                my $id = 0;
                while( exists $used_labels{$label . "_" .$id} &&
                       $id <= $max_label_suffix ) {
                    $id ++;
                }
                if( $id > $max_label_suffix ) {
                    error( $0, $filename, $dataset_name,
                           "could not generate unique atom name for ".
                           "atom '$label', even after $id iterations" );
                }
                my $new_label = $label . "_" . $id;
                warning( $0, $filename, $dataset_name,
                         "renaming atom '$label' " .
                         "to '" . $new_label . "'" );
                $renamed_atom->{name}       = $new_label;
                $renamed_atom->{site_label} = $new_label;
                $used_labels{$new_label}{count} ++;
            }
        }
    }

    return \@checked_initial_atoms;
}

# ============================================================================ #
# Gets atom descriptions, as used in this program, from a CIF datablock.
#
# Returns an array of
#
#   $atom_info = {
#                   site_label=>"C1",
#                   name=>"C1_2",
#                   chemical_type=>"C",
#                   atom_site_type_symbol = "C",
#                   coordinates_fract=>[1.0, 1.0, 1.0],
#                   unity_matrix_applied=>1,
#                   assembly=>"A", # "."
#                   group=>"1", # "."
#                   multiplicity=>"1",
#                   multiplicity_ratio=>"1",
#              }
#
sub initial_atoms($$$$$$$)
{
    my ($atom_properties, $dataset, $filename, $dataname, $f2o,
    $sym_operators, $uniquify_atoms ) = @_;
    my $values = $dataset->{values};

    my $atom_site_tag;

    if( exists $values->{"_atom_site_label"} ) {
        $atom_site_tag = "_atom_site_label";
    } elsif( exists $values->{"_atom_site_type_symbol"} ) {
        $atom_site_tag = "_atom_site_type_symbol";

        error( $0, $filename, $dataset->{name},
               "_atom_site_label tag was not found. " .
               "A serial number will be appended " .
               "to _atom_site_type_symbol to make atom labels" );
    } else {
        error( $0, $filename, $dataset->{name},
               "neither _atom_site_type_symbol nor _atom_site_label " .
               "were found" );
    return undef;
    }

    my $atom_labels = $values->{$atom_site_tag};

    my @atom_list;

    for (my $i = 0; $i < @{$atom_labels}; $i++)
    {
        if( $exclude_zero_occupancies &&
            defined $values->{_atom_site_occupancy} ) {
            my $occupancy = $values->{_atom_site_occupancy}[$i];
            $occupancy =~ s/\(\d+\)$//; # remove precission
            if( $occupancy eq "?" || $occupancy eq "." ||
                $occupancy == 0.0 ) {
                next;
            }
        }

    my $label;
        if ( $atom_site_tag eq "_atom_site_type_symbol" ) {
        $label = $values->{$atom_site_tag}[$i] . $i;
    } else {
        $label = $values->{$atom_site_tag}[$i];
    }

        my $atom_info = extract_atom( $label, $values, $i, $f2o );

        # Originaly the code was "my( $sym_atoms, $multiplicity, ...",
        # but the "$sym_atoms" variable is not used further in this
        # function, therefore it was changed to "undef" to indicate
        # this fact:
        my( undef, $multiplicity, $multiplicity_ratio ) =
            symops_apply_modulo1( $atom_info, $sym_operators, $f2o );

        if( exists $values->{_atom_site_symmetry_multiplicity} &&
            $values->{_atom_site_symmetry_multiplicity}[$i] ne '?' &&
            $values->{_atom_site_symmetry_multiplicity}[$i] !=
            $multiplicity ) {
            warning( $0, $filename, $dataname,
                "given multiplicity value '" .
                $values->{_atom_site_symmetry_multiplicity}[$i] .
                "' for atom " . $atom_info->{name} . 
                " is different from calculated value '" .
                $multiplicity . "' -- taking calculated value" );
        }
            
        $atom_info->{multiplicity} = $multiplicity;
        $atom_info->{multiplicity_ratio} = $multiplicity_ratio;

        if (exists $atom_properties->{ $atom_info->{"chemical_type"}}) {
            push( @atom_list, $atom_info );
        } else {
            my $message = "unknown chemical type '" .
                $atom_info->{chemical_type} . "'";

            if( $continue_on_errors ) {
                warning( $0, $filename, $dataname, $message );
            } else {
                error( $0, $filename, $dataname, $message );
                exit(1);
            }
        }
    }

    return uniquify_atom_names( \@atom_list, $uniquify_atoms,
                $filename, $dataname);
}


#============================================================================= #
# It's a function where atom groups are made according disorder information. If
# there is only one disorder assembly then all possible atom groups will be
# generated. If there is more then one disorder assembly desicion will be made
# according the following example:
# an assembly disorder A has three disorder groups and B - two. Then the
# following groups will be made: (1,1) (2,2) (3,2).

# Accepts
#   initial_atoms - an array of references to
#   $atom_info = {
#               site_label=>"C1",
#               name=>"C1_2",
#               chemical_type=>"C",
#               coordinates_fract=>[1.0, 1.0, 1.0],
#               unity_matrix_applied=>1,
#               assembly=>"A", # "."
#               group=>"1", # "."
#              }
# Returns
#   groups - an array of references to arrays of references to
#   $atom_info = {
#               site_label=>"C1",
#               name=>"C1_2",
#               chemical_type=>"C",
#               coordinates_fract=>[1.0, 1.0, 1.0],
#               unity_matrix_applied=>1,
#               assembly=>"A", # "."
#               group=>"1", # "."
#              }
# These arrays of references are generated atom groups.

sub atom_groups
{
    my ($initial_atoms) = @_;

    my $assemblies = assemblies($initial_atoms);

    if( 0 ) {
        for my $assembly (keys %$assemblies) {
            print ">>> Assembly: $assembly\n";
            foreach my $group (@{$assemblies->{$assembly}}) {
                print ">>> group: $group ";
            }
            print "\n";
        }
    }

    if((keys %$assemblies) == 0)
    {
        my @one_assembly;
        push(@one_assembly, $initial_atoms);
        return \@one_assembly;
    }

    my @keys = keys %$assemblies;
    my @atom_groups;

    if(@keys == 1)
    {
        my $assembly = $keys[0];
        my $groups = $assemblies->{$assembly};

        foreach my $group (@$groups)
        {
            my @tmp_group;
            foreach my $atom (@$initial_atoms)
            {
                if($atom->{group} eq $group && $atom->{assembly} eq $assembly)
                {
                    push(@tmp_group, $atom);
                }
            }
            push(@atom_groups, \@tmp_group);
        }
    }
    else
    {
        my $iteration_number = 0;

        foreach my $assembly (@keys)
        {
            my $groups = $assemblies->{$assembly};
            if($iteration_number < @$groups)
            {
                $iteration_number = @$groups;
            }
        }

        for(my $i = 0; $i < $iteration_number; $i++)
        {
            my @group;
            foreach my $assembly (@keys)
            {
                my $groups = $assemblies->{$assembly};
                my $atom_group;
                if($i < @$groups)
                {
                    $atom_group = $$groups[$i];
                }
                else
                {
                    $atom_group = $$groups[-1];
                }

                foreach my $atom (@$initial_atoms)
                {
                    if($atom->{group} eq $atom_group &&
                                    $atom->{assembly} eq $assembly)
                    {
                        push(@group, $atom);
                    }
                }
            }
            push(@atom_groups, \@group);
        }
    }

    # Appends those atoms which do not belong to any group or assembly

    my @independent_atoms;
    foreach my $atom (@$initial_atoms)
    {
        if($atom->{group} eq ".")
        {
            push(@independent_atoms, $atom);
        }
    }

    foreach my $group (@atom_groups)
    {
        push(@$group, @independent_atoms);
    }

    return \@atom_groups;
}

# ============================================================================ #
# Returns a hash of all possible assemblies and groups:
# %assemblies = ( A => [1,2,3],
#                 . => [1,2]);

sub assemblies
{
    my ($init_atoms) = @_;

    my %assemblies;

    foreach my $atom (@$init_atoms)
    {
        if(not exists $assemblies{$atom->{assembly}})
        {
            my @groups;
            $assemblies{$atom->{assembly}} = \@groups;
        }
    }

    for my $assembly (keys %assemblies)
    {
        my %unique_groups;

        foreach my $atom (@$init_atoms)
        {
            if((not exists $unique_groups{$atom->{group}}) &&
               ($assembly eq $atom->{assembly}) &&
               ($atom->{group} ne "."))
            {
                $unique_groups{$atom->{group}} = $atom->{group};
                push(@{$assemblies{$assembly}}, $atom->{group});
            }
        }
    }

    for my $assembly (keys %assemblies)
    {
        if(@{$assemblies{$assembly}} == 0)
        {
            delete $assemblies{$assembly};
        }
    }

   return \%assemblies;
}

#===============================================================#
# Extract unit cell angles and lengths.
#
# Accepts
#     values - a hash where a data from the CIF file is stored
# Returns
#     cell - an array  with stored information.

sub get_unit_cell($$$)
{
    my( $values, $filename, $dataname ) = @_;

    my @cell;

    for my $cif_tag (qw(_cell_length_a
                        _cell_length_b
                        _cell_length_c
                        ))
    {
        push(@cell, $values->{$cif_tag}[0]);
        $cell[-1] =~ s/\(\d+\)$//;
    }

    for my $cif_tag (qw(_cell_angle_alpha
                        _cell_angle_beta
                        _cell_angle_gamma
                        ))
    {
        if( exists $values->{$cif_tag} ) {
            push( @cell, $values->{$cif_tag}[0] );
            $cell[-1] =~ s/\(\d+\)$//;
        } else {
            warning( $0, $filename, $dataname,
                     "cell angle '$cif_tag' not present -- " .
                     "taking default value 90 degress." );
            push( @cell, 90 );
        }
    }

    return @cell;
}

#===============================================================#
# Extracts atom information from the CIF file.
#
# Accepts
#     values     - a hash where a data from the CIF file is stored
#     atom_label - atom site label or atom site type symbol from the CIF file
#     number     - a number of the current atom
#
# Returns a hash $atom:{
#                       label=>"C1",
#                       site_label=>"C1";
#                       chemical_type=>"C",
#                       atom_site_type_symbol = "C",
#                       coordinates_fract=>[1.0, 1.0, 1.0],
#                       unity_matrix_applied=>1,
#                       transform_matrices=>[ [
#                           [ 1, 0, 0, 0 ],
#                           [ 0, 1, 0, 0 ],
#                           [ 0, 0, 1, 0 ],
#                           [ 0, 0, 0, 1 ] ] ],
#                       assembly=>"A", # "."
#                       group=>"1", # "."
#                       }

sub extract_atom
{
    my($atom_label, $values, $number, $f2o) = @_;

    my %atom_info;
    my @atom_xyz;

    for my $cif_fract ( "_atom_site_fract_x",
                        "_atom_site_fract_y",
                        "_atom_site_fract_z",)
    {
        push(@atom_xyz, $values->{$cif_fract}[$number]);
        $atom_xyz[-1] =~ s/\(\d+\)$//;
    }

    @atom_xyz = map { modulo_1($_) } @atom_xyz;

    $atom_info{"coordinates_fract"}     = \@atom_xyz;
    $atom_info{"name"}                  = $atom_label;
    $atom_info{"site_label"}            = $atom_label;
    $atom_info{"symop"}                 =
      [
        [ 1, 0, 0, 0 ],
        [ 0, 1, 0, 0 ],
        [ 0, 0, 1, 0 ],
        [ 0, 0, 0, 1 ]
      ];
    $atom_info{"symop_id"}              = 1;
    $atom_info{"unity_matrix_applied"}  = 1;
    $atom_info{"translation_id"}        = "555";
    $atom_info{"translation"}           = [ 0, 0, 0 ];

    $atom_info{coordinates_ortho} =
        mat_vect_mul( $f2o, \@atom_xyz );

    my $atom_type;

    if( exists $values->{_atom_site_type_symbol}  &&
        defined $values->{_atom_site_type_symbol}[$number] &&
        $values->{_atom_site_type_symbol}[$number] ne '?' ) {
        $atom_type = $values->{_atom_site_type_symbol}[$number];
        $atom_info{atom_site_type_symbol} = $atom_type;
        if( $atom_type =~ m/^([A-Za-z]{1,2})/ ) {
            $atom_type = ucfirst( lc( $1 ));
        }
    } else {
        if( $values->{_atom_site_label}[$number] =~
            m/^([A-Za-z]{1,2})/ ) {
            $atom_type = ucfirst( lc( $1 ));
        } else {
            die( "could not determine atom type for atom " .
                 "'$values->{_atom_site_label}[$number]'" );
        }
    }

    $atom_info{chemical_type} = $atom_type;

    if( exists $values->{_atom_site_disorder_assembly}[$number]) {
        $atom_info{assembly} =
        $values->{_atom_site_disorder_assembly}[$number];
    } else {
        $atom_info{assembly} = ".";
    }

    if( exists $values->{_atom_site_disorder_group}[$number] ) {
        $atom_info{group} = $values->{_atom_site_disorder_group}[$number];
    } else {
        $atom_info{group} = ".";
    }

    if( exists $values->{_atom_site_occupancy} ) {
        $atom_info{atom_site_occupancy} =
            $values->{_atom_site_occupancy}[$number];
    }

    if( exists $values->{_atom_site_U_iso_or_equiv} ) {
        $atom_info{atom_site_U_iso_or_equiv} =
            $values->{_atom_site_U_iso_or_equiv}[$number];
    }

    if( exists $values->{_atom_site_symmetry_multiplicity} ) {
        $atom_info{multiplicity} =
            $values->{_atom_site_symmetry_multiplicity}[$number];
    }

    if( exists $values->{_atom_site_attached_hydrogens} ) {
        $atom_info{attached_hydrogens} =
            $values->{_atom_site_attached_hydrogens}[$number];
    }

    if( exists $values->{_atom_site_refinement_flags} ) {
        $atom_info{refinement_flags} =
            $values->{_atom_site_refinement_flags}[$number];
    }

    if( exists $values->{_atom_site_refinement_posn} ) {
        $atom_info{refinement_flags_position} =
            $values->{_atom_site_refinement_posn}[$number];
    }

    if( exists $values->{_atom_site_refinement_adp} ) {
        $atom_info{refinement_flags_adp} =
            $values->{_atom_site_refinement_adp}[$number];
    }

    if( exists $values->{_atom_site_refinement_occupancy} ) {
        $atom_info{refinement_flags_occupancy} =
            $values->{_atom_site_refinement_occupancy}[$number];
    }

    return \%atom_info;
}

#===============================================================#
# Copies atom and returns the same instance of it (different object, same props)

# Accepts a hash $atom_info = {
#                       name=>"C1_2",
#                       site_label=>"C1",
#                       chemical_type=>"C",
#                       coordinates_fract=>[1.0, 1.0, 1.0],
#                       coordinates_ortho=>[5.0, -1.3, 1.7],
#                       transform_matrices=>[ [
#                           [ 1, 0, 0, 0 ],
#                           [ 0, 1, 0, 0 ],
#                           [ 0, 0, 1, 0 ],
#                           [ 0, 0, 0, 1 ] ] ],
#                       unity_matrix_applied=>1,
#                       symop_id=>1
#                       assembly=>"A", # "."
#                       group=>"1", # "."
#                       }

# Returns a hash $new_atom_info = {
#                       name=>"C1_2",
#                       site_label=>"C1",
#                       chemical_type=>"C",
#                       coordinates_fract=>[1.0, 1.0, 1.0],
#                       coordinates_ortho=>[5.0, -1.3, 1.7],
#                       transform_matrices=>[ [
#                           [ 1, 0, 0, 0 ],
#                           [ 0, 1, 0, 0 ],
#                           [ 0, 0, 1, 0 ],
#                           [ 0, 0, 0, 1 ] ] ],
#                       unity_matrix_applied=>1,
#                       symop_id=>1,
#                       assembly=>"A", # "."
#                       group=>"1", # "."
#                       }

sub copy_atom
{
    my($old_atom) = @_;

    if( ref $old_atom ne "HASH" ) {
        use Carp;
        croak;
    }

    return copy_struct_deep($old_atom);
}

# Performs deep copying of structure passed via reference

sub copy_struct_deep
{
    my($struct) = @_;
    return $struct if !ref $struct;
    return [ map( copy_struct_deep($_), @$struct ) ] if ref $struct eq "ARRAY";
    return { map{ $_ => copy_struct_deep( $struct->{$_} ) } keys %$struct }
        if ref $struct eq "HASH";
    die( "deep copy failed: 'copy_struct_deep' does not know how to " .
         "copy object '" . ref( $struct ) . "'" );
}

#===============================================================#
# Gets symmetry operators if they are not directly represented in the CIF file.

# Accepts
#     option - an option, for example, "hall"
#     param  - according to an option a value given in the CIF file

# Uses @SymopLookup::table =
# (
# {
#     number          => 1,
#     hall            => ' P 1',
#     schoenflies     => 'C1^1',
#     hermann_mauguin => 'P 1',
#     universal_h_m   => 'P 1',
#     symops => [
#         'x,y,z',
#     ],
#     ncsym => [
#         'x,y,z',
#     ]
# },
# );

# Return a reference to symmetry operators.

sub get_symops
{
    my ($option, $param) = @_;

    $param =~ s/ //g;
    $param =~ s/_//g;

    foreach my $hash (@SymopLookup::table)
    {
        my $value = $hash->{$option};
        $value =~ s/ //g;
        $value =~ s/_//g;

        if($value eq $param)
        {
            return $hash->{symops};
        }
    }
    return undef;
}

#===============================================================#
# Makes a decision if atoms are too close to each other, i.e if they
# make a "bump:

# Accepts distance, atom id and a reference to a hash of atom properties
# %atoms = (
#           H => { #(chemical_type)
#                     name => Hydrogen,
#                     period => 1,
#                     group => 1,
#                     block => s,
#                     atomic_number => "1",
#                     atomic_weight => 1.008,
#                     covalent_radius => 0.23,
#                     vdw_radius => 1.09,
#                     valency => [1],
#                     },
#          );

sub test_bump($$$$$$$)
{
    my ( $atom_properties, $chemical_type1, $chemical_type2,
         $atom1_label, $atom2_label,
         $dist, $bump_factor ) = @_;

    my $cov_radius1 = $atom_properties->{$chemical_type1}->{covalent_radius};
    my $cov_radius2 = $atom_properties->{$chemical_type2}->{covalent_radius};

    if( $dist < $bump_factor * ($cov_radius1 + $cov_radius2) &&
        ($dist > $special_position_cutoff ||
         $atom1_label ne $atom2_label)) {
        return 1;
    }

    return 0;
}

#==============================================================#
# Finds translation center of mass and center of mass modulo 1 information.

# Accepts two arrays of coordinates_fract.

# Returns an array of differences between coordinates_fract.

sub translation
{
    my ($coords, $coords_modulo_1) = @_;

    my @translation;
    for(my $i = 0; $i < @{$coords}; $i++)
    {
        push(@translation, ${$coords}[$i] - ${$coords_modulo_1}[$i]);
    }

    return \@translation;
}

#==============================================================#
# Translates an atom according a given translation.
#
# Accepts an atom description and a translation.
#
# Returns a translated atom.

sub translate_atom
{
    my($atom, $translation, $f2o) = @_;

    my $new_atom = copy_atom( $atom );
    my @new_atom_xyz;

    push( @new_atom_xyz, $atom->{"coordinates_fract"}[0] +
          ${$translation}[0] );
    push( @new_atom_xyz, $atom->{"coordinates_fract"}[1] +
          ${$translation}[1] );
    push( @new_atom_xyz, $atom->{"coordinates_fract"}[2] +
          ${$translation}[2] );

    $new_atom->{"coordinates_fract"} = \@new_atom_xyz;
    $new_atom->{coordinates_ortho} =
        mat_vect_mul( $f2o, \@new_atom_xyz );

    $new_atom->{translation} = [
        $new_atom_xyz[0] - modulo_1($new_atom_xyz[0]),
        $new_atom_xyz[1] - modulo_1($new_atom_xyz[1]),
        $new_atom_xyz[2] - modulo_1($new_atom_xyz[2]),
    ];

    $new_atom->{translation_id} =
        ($new_atom->{translation}[0]+5).
        ($new_atom->{translation}[1]+5).
        ($new_atom->{translation}[2]+5);

    if( defined $new_atom->{unity_matrix_applied} &&
        $new_atom->{unity_matrix_applied} &&
        $new_atom->{translation}[0] == 0 &&
        $new_atom->{translation}[1] == 0 &&
        $new_atom->{translation}[2] == 0 ) {
    $new_atom->{name} = $new_atom->{site_label};
    } else {
    $new_atom->{name} =
        $new_atom->{site_label} . "_" .
        $new_atom->{symop_id} . "_" .
        $new_atom->{translation_id};
    }

    return $new_atom;
}

#===============================================================#
# Applies symmetry operator to a given atom.

# The symop_apply_modulo1 subroutine accepts a reference to a hash
# $atom_info = {name=>"C1_2",
#               site_label=>"C1"
#               chemical_type=>"C",
#               coordinates_fract=>[1.0, 1.0, 1.0],
#               unity_matrix_applied=>1} and
# a refernce to an array - symmetry operator
# my $symop = [
#     [ r11 r12 r13 t1 ]
#     [ r21 r22 r23 t1 ]
#     [ r31 r32 r33 t1 ]
#     [   0   0   0  1 ]
# ],
# Returns an above-mentioned hash.
#
sub symop_apply_modulo1
{
    my($atom_info, $symop, $symop_id) = @_;

    my $new_atom_info = copy_atom($atom_info);

    my $atom_xyz = $atom_info->{"coordinates_fract"};

    my @new_atom_xyz =
        map { modulo_1($_) }
        mat_vect_mul( $symop, $atom_xyz );

    $new_atom_info->{"coordinates_fract"} = \@new_atom_xyz;
    delete $new_atom_info->{"coordinates_ortho"};

    return symop_register_applied_symop( $new_atom_info, $symop, $symop_id );
}

#===============================================================#
# Applies symmetry operator to a given atom, without applying a
# modulo_1 shift.
#

# The symop_apply_NO_modulo_1 subroutine accepts a reference to a hash:

# $atom_info = {site_label=>"C1",
#               name=>"C1_2",
#               chemical_type=>"C",
#               coordinates_fract=>[1.0, 1.0, 1.0],
#               unity_matrix_applied=>1} 

# and a refernce to an array - symmetry operator

# my $symop = [
#     [ r11 r12 r13 t1 ]
#     [ r21 r22 r23 t1 ]
#     [ r31 r32 r33 t1 ]
#     [   0   0   0  1 ]
# ],

# Returns an above-mentioned hash.

# The difference from the symop_apply_modulo1() subroutine is that it does not
# apply the mod1 shift.

sub symop_apply_NO_modulo_1
{
    my($atom_info, $symop, $symop_id) = @_;

    my $new_atom_info = copy_atom($atom_info);

    my $atom_xyz = $atom_info->{"coordinates_fract"};

    my @new_atom_xyz =
        mat_vect_mul( $symop, $atom_xyz );

    $new_atom_info->{"coordinates_fract"} = \@new_atom_xyz;
    delete $new_atom_info->{"coordinates_ortho"};

    return symop_register_applied_symop( $new_atom_info, $symop, $symop_id );
}

sub symop_register_applied_symop
{
    my($new_atom_info, $symop, $symop_id) = @_;

    $new_atom_info->{"symop"} = $symop;
    $new_atom_info->{"symop_id"} = $symop_id;
    $new_atom_info->{"unity_matrix_applied"} = symop_is_unity($symop);

    my $atom_xyz = $new_atom_info->{"coordinates_fract"};
    my @translation = (
        int($atom_xyz->[0] - modulo_1($atom_xyz->[0])),
        int($atom_xyz->[1] - modulo_1($atom_xyz->[1])),
        int($atom_xyz->[2] - modulo_1($atom_xyz->[2])),
    );
    $new_atom_info->{"translation"} =
        \@translation;
    $new_atom_info->{"translation_id"} =
        (5+$translation[0]) . (5+$translation[1]) . (5+$translation[2]);

    if( $new_atom_info->{"unity_matrix_applied"} ) {
        $new_atom_info->{"name"} = $new_atom_info->{"site_label"};
    } else {
        $new_atom_info->{"name"} =
            $new_atom_info->{"site_label"} . "_" .
            $new_atom_info->{"symop_id"} . "_" .
            $new_atom_info->{"translation_id"};
    }

    do {
        use Serialise;
        serialiseRef( { atom => $new_atom_info, symop => $symop } );
    } if 0;

    return $new_atom_info;
}

#===============================================================#
# Applies symmetry operator to all atoms in a givel list.
#
# The symop_apply_to_atoms subroutine accepts a reference to an array
# of hash references:
#
# $atom_list = [
#                 {
#                    site_label=>"C1",
#                    name=>"C1_2",
#                    chemical_type=>"C",
#                    coordinates_fract=>[1.0, 1.0, 1.0],
#                    unity_matrix_applied=>1
#                 }, # $atom_info hash
#                 $atom2_info, 
#                 $atom3_info, 
#                 $atom4_info
#              ]
#
# and a refernce to an array - symmetry operator:
#
# my $symop = [
#     [ r11 r12 r13 t1 ]
#     [ r21 r22 r23 t1 ]
#     [ r31 r32 r33 t1 ]
#     [   0   0   0  1 ]
# ],
#
# Returns an list of the above-mentioned atom_info hashes.

sub symop_apply_to_atoms
{
    my($atom_list, $symop, $symop_id) = @_;

    my @sym_atoms = ();
    for my $atom (@$atom_list) {
        push( @sym_atoms, symop_apply_NO_modulo_1( $atom, $symop, $symop_id ));
    }

    return \@sym_atoms;
}

#===============================================================#
# Multiplies an ortho matrix with a vector.

# my $ortho = [
#     [ o11 o12 o13 ]
#     [ 0   o22 o23 ]
#     [ 0   0   o33 ]
# ]
#

sub mat_vect_mul($$)
{
    my($matrix, $vector) = @_;

    my @new_coordinates;

    for(my $i = 0; $i < @{$vector}; $i++)
    {
        $new_coordinates[$i] = 0;
        for(my $j = 0; $j < @{$vector}; $j++)
        {
            $new_coordinates[$i] += ${$matrix}[$i][$j] * ${$vector}[$j];
        }
    }

    if( @$vector == 3 && @$matrix == 4 ) {
        $new_coordinates[0] += $matrix->[0][3];
        $new_coordinates[1] += $matrix->[1][3];
        $new_coordinates[2] += $matrix->[2][3];
    }

    return wantarray ? @new_coordinates : \@new_coordinates;
}

#===============================================================#
# Checks whether atoms are in the same point in space:

sub atoms_coincide($$$)
{
    my ( $old_atom, $new_atom, $f2o ) = @_;

    my $old_coord = [ map { modulo_1($_) } @{$old_atom->{coordinates_fract}} ];
    my $old_xyz = mat_vect_mul( $f2o, $old_coord );

    my $new_coord = [ map { modulo_1($_) } @{$new_atom->{coordinates_fract}} ];

    for my $dx (-1, 0, 1) {
    for my $dy (-1, 0, 1) {
    for my $dz (-1, 0, 1) {
        my $shifted_coord = [
            $new_coord->[0] + $dx,
            $new_coord->[1] + $dy,
            $new_coord->[2] + $dz,
        ];
        my $new_xyz = mat_vect_mul( $f2o, $shifted_coord );
        if( distance( $new_xyz, $old_xyz ) < $special_position_cutoff ) {
            ## local $, = ", ";
            ## print ">>> mapped to self: @{$new_xyz} / @{$old_xyz}\n";
            return 1;
        }
    }}}

    return 0;
}

#===============================================================#
# Generate symmetry equivalents of an atom, exclude duplicates
# on special positions

sub symgen_atom($$$)
{
    my ( $atom, $sym_operators, $f2o ) = @_;

    my( $sym_atoms, $multiplicity, $multiplicity_ratio,
        $symops_mapping_to_self ) =
            symops_apply_modulo1( $atom, $sym_operators, $f2o );

    if( $multiplicity_ratio == 1 ) {
        return @$sym_atoms;
    } else {
        my @unique_atoms;
        my %to_be_deleted;
        for my $i (0..$#$sym_atoms-1) {
            for my $j ($i+1..$#$sym_atoms) {
                if( distance( $sym_atoms->[$i]{coordinates_fract},
                              $sym_atoms->[$j]{coordinates_fract}) < 0.0001 ) {
                    $to_be_deleted{$sym_atoms->[$j]{name}} = 1;
                }
            }
        }
        for my $atom (@$sym_atoms) {
            if( !defined $to_be_deleted{$atom->{name}} ) {
                $atom->{site_symops} = $symops_mapping_to_self;
                push( @unique_atoms, $atom );
            }
        }
        return @unique_atoms;
    }
}

#===============================================================#
# Generate symmetry equivalents of an atom, evaluate atom's
# multiplicity and multiplicity ratio

sub symops_apply_modulo1
{
    my ( $atom, $sym_operators, $f2o ) = @_;

    my @sym_atoms;
    my @symops_mapping_to_self;
    my $gp_multiplicity = int(@$sym_operators);

    my $multiplicity_ratio = 1;

    do {
        use Serialise;
        serialiseRef( $sym_operators );
    } if 0;

    my $n = 1;

    for my $symop ( @{$sym_operators} ) {
        my $new_atom = symop_apply_modulo1( $atom, $symop, $n++ );
        if( !symop_is_unity( $symop ) &&
            atoms_coincide( $atom, $new_atom, $f2o )) {
            push( @symops_mapping_to_self, $symop );
            $multiplicity_ratio ++;
        } else {
            push( @sym_atoms, $new_atom );
        }
    }

    ## print ">>> $gp_multiplicity / $multiplicity_ratio\n";

    if( $gp_multiplicity % $multiplicity_ratio ) {
        die( "Multiplicity ratio $multiplicity_ratio does not divide " .
             "multiplicity of a general position $gp_multiplicity" .
             "-- this can not be." );
    }

    my $multiplicity = $gp_multiplicity / $multiplicity_ratio;

    for my $atom (@sym_atoms) {
        $atom->{multiplicity} = $multiplicity;
        $atom->{multiplicity_ratio} = $multiplicity_ratio;
    }

    return ( \@sym_atoms, $multiplicity, $multiplicity_ratio,
             \@symops_mapping_to_self );
}

#===============================================================#
# Generate symmetry equivalents of all atoms from a list, exclude
# duplicates on special positions

sub symgen_all_atoms($$$)
{
    my ( $atoms, $sym_operators, $f2o ) = @_;

    my @sym_atoms = ();

    for my $atom (@{$atoms}) {
        push( @sym_atoms, symgen_atom( $atom, $sym_operators, $f2o ));
    }

    return \@sym_atoms;
}

#===============================================================#
# Shifts a given atom according shifting params. If shifting params are
# (-1, 0, 1) then 27 shifts are made.

# The shift_atom subroutine accepts a reference to a hash
# $atom_info = {site_label=>"C1",
#               name=>"C1_2",
#               chemical_type=>"C",
#               coordinates_fract=>[1.0, 1.0, 1.0],
#               unity_matrix_applied=>1}, returns an array of references of
# above-mentioned hashes
#
sub shift_atom($$)
{
    my($atom_info, $f2o) = @_;

    my @shifted_atoms;
    my @shifting_params = (0, -1, 1);

    for(my $i = 0; $i < @shifting_params; $i++)
    {
        for(my $j = 0; $j < @shifting_params; $j++)
        {
            for(my $k = 0; $k < @shifting_params; $k++)
            {
                my $new_atom_info = copy_atom($atom_info);
                $new_atom_info->{translation} = [ $shifting_params[$i],
                                                  $shifting_params[$j],
                                                  $shifting_params[$k] ];
                my @new_atom_xyz;
                if($shifting_params[$i] != 0 || $shifting_params[$j] != 0 ||
                   $shifting_params[$k] != 0 ||
                   $atom_info->{"unity_matrix_applied"} != 1)
                {
                    $new_atom_xyz[0] = $atom_info->{"coordinates_fract"}[0] +
                                                           $shifting_params[$i];
                    $new_atom_xyz[1] = $atom_info->{"coordinates_fract"}[1] +
                                                           $shifting_params[$j];
                    $new_atom_xyz[2] = $atom_info->{"coordinates_fract"}[2] +
                                                           $shifting_params[$k];
                    my $shift_label =
                        ($shifting_params[$i]+5).
                        ($shifting_params[$j]+5).
                        ($shifting_params[$k]+5);
                    $new_atom_info->{"coordinates_fract"} = \@new_atom_xyz;
                    $new_atom_info->{"name"} =
                        $atom_info->{"site_label"} . "_" .
                        $atom_info->{"symop_id"} . "_" .
                        $shift_label;
                    $new_atom_info->{"translation_id"} = $shift_label;
                }
                $new_atom_info->{coordinates_ortho} =
                    mat_vect_mul( $f2o, \@new_atom_xyz );
                push(@shifted_atoms, $new_atom_info);
            }
        }
    }

    return @shifted_atoms;
}

#===============================================================#
# Generate symmetry equivalents of an atom, exclude duplicates
# on special positions

sub apply_shifts($$)
{
    my ($atoms, $f2o) = @_;

    my @shifted = ();

    for my $atom (@{$atoms}) {
        push( @shifted, shift_atom( $atom, $f2o ));
    }

    return @shifted;
}

#===============================================================#
# Calculates distance between two given vectors.

# Accepts two arrays of vectors coordinates_fract.

# Returns a distance.

sub distance
{
    my($vector1, $vector2) = @_;
    my $dist = 0;

    for(my $k = 0; $k < @{$vector1}; $k++)
    {
        $dist += (${$vector1}[$k] - ${$vector2}[$k])**2;
    }
    return sqrt($dist);
}

#===============================================================#
# Tests if a symmetry operator is   (1, 0, 0)
#                                   (0, 1, 0)
#                                   (0, 0, 1)

sub symop_is_unity
{
    my($symop) = @_;
    my $eps = 1e-10;

    for(my $i = 0; $i < @{$symop}; $i++)
    {
        for(my $j = 0; $j < @{$symop}; $j++)
        {
            if($i == $j)
            {
                if(abs(${$symop}[$i][$j] - 1) > $eps) {
                    return 0;
                }
            }
            else
            {
                if(abs(${$symop}[$i][$j] - 0) > $eps) {
                    return 0;
                }
            }
        }
    }
    return 1;
}

sub find_voids
{
    my $atom_properties = shift(@_);
    my $symmetric_atoms = shift(@_);
    my $initial_atoms   = shift(@_);
    my $filename        = shift(@_);
    my $dataname        = shift(@_);
    my $ortho_matrix    = shift(@_);

    my %initial_names = map { $_->{name} => 1 } @$initial_atoms;

    my( $voronota_in, $voronota_out, $voronota_err );

    my $voronota_pid = open3( $voronota_in,
                              $voronota_out,
                              $voronota_err,
                              'voronota --mode calculate-vertices -' );

    foreach my $atom (@$symmetric_atoms)
    {
        print $voronota_in join( " ", @{$atom->{coordinates_ortho}} ) . " ";
        print $voronota_in $atom_properties->{$atom->{chemical_type}}
                                             {covalent_radius} . "\n";
    }
    close( $voronota_in );

    if( defined $voronota_err ) {
        while( <$voronota_err> ) { print STDERR $_; }
    }

    my @voids;
    while( <$voronota_out> )
    {
        next if /^\s*$/;
        my( $atom1, $atom2, $atom3, $atom4, $x, $y, $z, $radius ) =
            split( /\s+/, $_ );

        my $contains_initial_atom = 0;
        for my $index ($atom1, $atom2, $atom3, $atom4)
        {
            if( exists $initial_names{$symmetric_atoms->[$index]{name}} ) {
                $contains_initial_atom = 1;
                last;
            }
        }
        if( $contains_initial_atom ) {
            push( @voids,
                {
                    atom1_name => $symmetric_atoms->[$atom1]{name},
                    atom2_name => $symmetric_atoms->[$atom2]{name},
                    atom3_name => $symmetric_atoms->[$atom3]{name},
                    atom4_name => $symmetric_atoms->[$atom4]{name},
                    coordinates_ortho => [ $x, $y, $z ],
                    radius => $radius,
                }
            );
        }
    }

    return @voids;
}

sub dump_atoms_as_cif
{
    my ($datablock_name, $atom_list, $cell) = @_;

    local $\ = "\n";

    print "data_", $datablock_name;

    print "_symmetry_space_group_name_H-M ", "'P 1'";
    print "_cell_length_a ", $$cell[0] if defined $$cell[0];
    print "_cell_length_b ", $$cell[1] if defined $$cell[1];
    print "_cell_length_c ", $$cell[2] if defined $$cell[2];

    print "_cell_angle_alpha ", $$cell[3] if defined $$cell[3];
    print "_cell_angle_beta  ", $$cell[4] if defined $$cell[4];
    print "_cell_angle_gamma ", $$cell[5] if defined $$cell[5];

    print "loop_";
    print "_atom_site_label";
    print "_atom_site_fract_x";
    print "_atom_site_fract_y";
    print "_atom_site_fract_z";

    for my $atom (@$atom_list) {
    print
        $atom->{name}, " ",
        $atom->{coordinates_fract}[0], " ",
        $atom->{coordinates_fract}[1], " ",
        $atom->{coordinates_fract}[2];
    }
}

#===========================================================================
# Extract symmetry operators from a parsed CIF datablock
#
# Returns a list of symmetry operators as ASCII strings with generap
# position formulae (e.g. -y,-x,z+1/2).

sub get_symmetry_operators($$)
{
    my ($dataset, $filename) = @_;
    my $values = $dataset->{values};
    my $sym_data;

    if( exists $values->{"_space_group_symop_operation_xyz"} ) {
        $sym_data = $values->{"_space_group_symop_operation_xyz"};
    } elsif( exists $values->{"_symmetry_equiv_pos_as_xyz"} ) {
        $sym_data = $values->{"_symmetry_equiv_pos_as_xyz"};
    }

    if( exists $values->{"_space_group_name_Hall"} &&
        not defined $sym_data ) {
        my $hall = $values->{"_space_group_name_Hall"}[0];
        $sym_data = get_symops("hall", $hall);

        if( !defined $sym_data )
        {
            error( $0, $filename, $dataset->{name},
                   "incorrect _space_group_name_Hall '$hall'" );
        }
    } elsif( exists $values->{"_symmetry_space_group_name_Hall"} &&
        not defined $sym_data ) {
        my $hall = $values->{"_symmetry_space_group_name_Hall"}[0];
        $sym_data = get_symops("hall", $hall);

        if( !defined $sym_data )
        {
            error( $0, $filename, $dataset->{name},
                   "incorrect _symmetry_space_group_name_Hall '$hall'" );
        }
    }

    if(exists $values->{"_space_group_name_H-M_alt"} &&
       not defined $sym_data)
    {
        my $h_m = $values->{"_space_group_name_H-M_alt"}[0];
        $sym_data = get_symops("hermann_mauguin", $h_m);

        if( !defined $sym_data )
        {
            error( $0, $filename, $dataset->{name},
                   "incorrect _space_group_name_H-M_alt '$h_m'" );
        }
    } elsif(exists $values->{"_symmetry_space_group_name_H-M"} &&
            not defined $sym_data)
    {
        my $h_m = $values->{"_symmetry_space_group_name_H-M"}[0];
        $sym_data = get_symops("hermann_mauguin", $h_m);

        if( !defined $sym_data )
        {
            error( $0, $filename, $dataset->{name},
                   "incorrect _symmetry_space_group_name_H-M '$h_m'" );
        }
    }

    return $sym_data;
}
