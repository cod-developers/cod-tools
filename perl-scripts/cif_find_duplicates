#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Date$
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
#  Find COD numbers for the .cif files in given directories of file lists.
#**

use strict;
use File::Basename;
use CIFParser;
use Formulae::AdHocParser;
use CIFData::CIFCellContents;
use SOptions;
use SUsage;

my $max_cell_length_diff = 0.5; # Angstroems
my $max_cell_angle_diff  = 1.2; # degrees

my $check_bibliography = 1;
my $check_sample_history = 0;

#*Usage:
#*     cif_find_duplicates [options] my-cif-dir1/ my-cif-dir2/files*.cif COD-cif-dir/
#*
#*Options:
#*     --max-cell-difference 0.5
#*        Maximum difference of unit cell lengths allowed for 
#*        entries regarded as the same, in Angstroems.
#*
#*     --max-cell-difference 1.2
#*        Maximum difference of unit cell angles allowed for
#*        entries regarded as the same, in Angstroems.
#*
#*     --check-bibliography
#*        Only CIFs that have different bibliography data are declared different
#*        if all other parameters match (default). CIFs with missing bibliographies
#*        are assumed to have matching bibliographies.
#*
#*     --dont-check-bibliography, --no-check-bibliography
#*        Ignore bibliographic data of all CIFs; thus even files with different
#*        bibliographies will be regared the same if their cells, chemical
#*        formulae and measurement conditions match.
#*
#*     --check-sample-history
#*        Only CIFs that have different sample history data (as recorded
#*        in the _exptl_crystal_thermal_history and _exptl_crystal_pressure_history
#*        tags) are declared different if all other parameters match.
#*
#*     --dont-check-sample-history, --no-check-sample-history,
#*     --disregard-sample-history
#*        Ignore sample history of all CIFs; thus even files with different
#*        sample histories will be regared the same if their cells,
#*        chemical formulae and measurement conditions match.
#*        (default)
#*
#*     --help  print a short usage message (this message) and exit.
#**

@ARGV = getOptions( 
    "--max-cell-length-difference" => \$max_cell_length_diff,
    "--max-cell-angle-difference"  => \$max_cell_angle_diff,

    "--check-bibliography"      => sub { $check_bibliography = 1; },
    "--dont-check-bibliography" => sub { $check_bibliography = 0; },
    "--no-check-bibliography"   => sub { $check_bibliography = 0; },

    "--check-sample-history"      => sub { $check_sample_history = 1; },
    "--dont-check-sample-history" => sub { $check_sample_history = 0; },
    "--no-check-sample-history"   => sub { $check_sample_history = 0; },
    "--disregard-sample-history"  => sub { $check_sample_history = 0; },

    "--help,--usage" => sub { SUsage::usage; exit },
);


my %has_numeric_value = (
    "_journal_year"   => 1,
    "_journal_volume" => 1,
    "_journal_issue"  => 1,
);

my %skip_tag = (
    "_journal_name_full" => 0,
);

my %COD = ();

if( @ARGV < 2 ) {
    print STDERR "$0: please supply two directory names on the command line:\n";
    print STDERR "first directory with the analysed CIF files,\n";
    print STDERR "and the second with the COD CIF files.\n";
    exit -1;
}

my $COD_cif_dir = pop( @ARGV );
my @COD_cif_files = `find $COD_cif_dir -name "*.cif" -o -name "*.CIF" | sort`;

do {
    print int(@COD_cif_files), "\n";
    print "@COD_cif_files";
} if 0;

for my $file (@COD_cif_files) {

    chomp $file;

    my @data;

    eval {
        @data = load_cif_file( $file );
    };
    next if $@;

    if( !@data || !defined $data[0] || !defined $data[0]->{name} ) {
        warn( "file '$file' seems to be empty" );
    }

    my %structures = cif_fill_data( \@data, $file );

    my $basename = File::Basename::basename( $file );
    for my $id (keys %structures) {
        my $formula = $structures{$id}{chemical_formula_sum};

        $formula = '?' unless defined $formula;

        push( @{$COD{$formula}}, $structures{$id} );

        if( exists $structures{$id}{cell_contents} &&
            $structures{$id}{cell_contents} ne $formula ) {
            my $cell_contents = $structures{$id}{cell_contents};
            push( @{$COD{$cell_contents}}, $structures{$id} );
        }
    }

}

do {
    use Serialise;
    serialiseRef( \%COD );
} if 0;

#------------------------------------------------------------------------------

my @cif_files = `find @ARGV -name "*.cif" -o -name "*.CIF" | sort`;

for my $file (@cif_files) {

    chomp $file;

    my @data;

    eval {
        @data = load_cif_file( $file );
    };
    next if $@;

    if( !@data || !defined $data[0] || !defined $data[0]->{name} ) {
        warn( "file '$file' seems to be empty" );
    }

    my %structures = cif_fill_data( \@data, $file );

    for my $id (keys %structures) {
        my $formula = $structures{$id}{chemical_formula_sum};
        my $cell_contents = $structures{$id}{cell_contents};

        $formula = '?' unless defined $formula || defined $cell_contents;

        my $final_formula = $formula;
        $final_formula =~ s/\s/_/g;

        my %structures_found = ();

        if( defined $formula && defined $COD{$formula} ) {
            for my $COD_entry (@{$COD{$formula}}) {
                if( entries_are_the_same( $structures{$id}, $COD_entry )) {
                    my $COD_key = $COD_entry->{filename};
                    $structures_found{$COD_key} = $COD_entry;
                }
            }
        }
        if( defined $cell_contents && defined $COD{$cell_contents} &&
            $formula ne $cell_contents ) {
            ## print ">>> formula: '$formula', contents: '$cell_contents'\n";
            for my $COD_entry (@{$COD{$cell_contents}}) {
                if( entries_are_the_same( $structures{$id}, $COD_entry )) {
                    my $COD_key = $COD_entry->{filename};
                    if( !exists $structures_found{$COD_key} ) {
                        $structures_found{$COD_key} = $COD_entry;
                    }
                }
            }
        }

        my $n = keys %structures_found;

        if( $n > 0 ) {
            for my $key (sort keys %structures_found) {
                my $COD_entry = $structures_found{$key};
                printf
                    "%-35s %15s %3d %s\n",
                    $final_formula, 
                    $COD_entry->{filename}, $n, $file;
            }
        } else {
            printf "%-35s %15s %3d %s\n", $final_formula, "?", 0, $file;
        }
    }
}

#------------------------------------------------------------------------------

sub load_cif_file
{
    my ( $file ) = @_;

    my $parser = new CIFParser;
    my @data = @{$parser->Run($file)};

    if( defined $parser->YYData->{ERRCOUNT} && $parser->YYData->{ERRCOUNT} > 0 ) {
        print STDERR "$0: ", $parser->YYData->{ERRCOUNT},
        " error(s) encountered while parsing file '${file}'\n";
        die;
    }

    return @data;
}

sub cif_fill_data
{
    my ( $data, $file ) = @_;

    my %structures = ();
    my $id;

    for my $dataset ( @$data ) {
        my $values = $dataset->{values};
        my $id = $dataset->{name};

        if( defined $id ) {
            $structures{$id}{id} = $id;
            $structures{$id}{filename} = File::Basename::basename( $file );
        } else {
            next
        }

        if( defined $values->{_chemical_formula_sum} ) {
            my $formula = $values->{_chemical_formula_sum}[0];

            if( $formula ne '?' ) {

                $formula =~ s/^\s*'\s*|\s*'\s*$//g;
                $formula =~ s/^\s*|\s*$//g;
                $formula =~ s/\s+/ /g;

                my $formula_parser = new AdHocParser;

                eval {
                    $formula_parser->ParseString( $formula );
                    if( defined $formula_parser->YYData->{ERRCOUNT} &&
                        $formula_parser->YYData->{ERRCOUNT} > 0 ) {
                        print STDERR "$0: ", $file, " ", $dataset->{name}, ": ",
                        $formula_parser->YYData->{ERRCOUNT},
                        " error(s) encountered while parsing chemical formula ",
                        "sum\n";
                        die;
                    } else {
                        $formula = $formula_parser->SprintFormula;
                    }
                };
                if( $@ ) {
                    print STDERR "$0: ", $file, " ", $dataset->{name}, ": ",
                    "could not parse formula '$formula', resorting to ",
                    "simple split routine\n";
                    $formula = join( " ", sort {$a cmp $b} split( " ", $formula ));
                }
            }
            $structures{$id}{chemical_formula_sum} = $formula;
        }

        my $calculated_formula;
        eval {
            $calculated_formula =
                CIFCellContents::cif_cell_contents( $dataset, $file, undef );
        };

        $structures{$id}{cell_contents} = $calculated_formula
            if defined $calculated_formula;

        for my $key ( qw( _cell_length_a _cell_length_b _cell_length_c
                     _cell_angle_alpha _cell_angle_beta _cell_angle_gamma )) {
            my $val = $values->{$key}[0];
            if( defined $val ) {
                $val =~ s/^\s*'\s*|\s*'\s*$//g;
                $val =~ s/\(.*$//;
                $val =~ s/[()_a-zA-Z]//g;
                $structures{$id}{cell}{$key} = sprintf "%f", $val;
            }
        }
        for my $key ( qw( _cell_measurement_temperature
                          _cell_measurement_temperature_C
                          _diffrn_ambient_temperature
                          _diffrn_ambient_temperature_C
                          _diffrn_ambient_temperature_gt
                          _diffrn_ambient_temperature_lt
                          _pd_prep_temperature
                          _cell_measurement_pressure
                          _cell_measurement_pressure_gPa
                          _cell_wave_vectors_pressure_max
                          _cell_wave_vectors_pressure_min
                          _diffrn_ambient_pressure
                          _diffrn.ambient_pressure
                          _diffrn.ambient_pressure_esd
                          _diffrn_ambient_pressure_gPa
                          _diffrn_ambient_pressure_gt
                          _diffrn.ambient_pressure_gt
                          _diffrn_ambient_pressure_lt
                          _diffrn.ambient_pressure_lt
                          _exptl_crystal_pressure_history
                          _exptl_crystal_thermal_history
                          _pd_prep_pressure )) {
            if( exists $values->{$key} ) {
                my $val = $values->{$key}[0];
                if( defined $val ) {
                    my $parameter;
                    if( $key =~ /history/ ) {
                        $parameter = "history";
                    } elsif( $key =~ /pressure/ ) {
                        $parameter = "pressure";
                    } else {
                        $parameter = "temperature";
                    }
                    $structures{$id}{$parameter}{$key} = $val;
                    $structures{$id}{$parameter}{$key}
                        =~ s/^\s*'\s*|\s*'\s*$//g;
                }
            }
        }

        my @journal_keys =
            grep ! /^_journal_name/,
            grep /^_journal_[^\s]*$/,
            keys %{$values};

        for my $key (@journal_keys) {
            my $val = $values->{$key}[0];
            if( defined $val ) {
                $val =~ s/^['"]|["']$//g;
                $structures{$id}{bibliography}{$key} = $val;
            }
        }
        if( defined $values->{'_[local]_cod_suboptimal_structure'} ||
            defined $values->{_cod_suboptimal_structure} ) {
            my $val = defined $values->{_cod_suboptimal_structure} ?
                $values->{_cod_suboptimal_structure}[0] :
                $values->{'_[local]_cod_suboptimal_structure'}[0];
            ## print ">>>>>> $val\n";
            $structures{$id}{suboptimal} = $val;
        }
    }

    return %structures;
}

#------------------------------------------------------------------------------

sub get_cell($)
{
    my $datablok = $_[0];

    return (
        $datablok->{_cell_length_a},
        $datablok->{_cell_length_b},
        $datablok->{_cell_length_c},
        $datablok->{_cell_angle_alpha},
        $datablok->{_cell_angle_beta},
        $datablok->{_cell_angle_gamma}
    );
}

sub cells_are_the_same($$)
{
    my ($cell1, $cell2) = @_;

    my @cell1 = get_cell( $cell1 );
    my @cell2 = get_cell( $cell2 );

    my $max_length_diff = 0;
    my $max_angle_diff = 0;

    for my $i (0..2) {
        my $length1 = $cell1[$i];
        my $length2 = $cell2[$i];
        if( defined $length1 and defined $length2 ) {
            my $diff = abs( $length1 - $length2 );
            if( $max_length_diff < $diff ) {
                $max_length_diff = $diff;
            }
        }
    }
    for my $i (3..5) {
        my $angle1 = $cell1[$i];
        my $angle2 = $cell2[$i];
        if( defined $angle1 and defined $angle2 ) {
            my $diff = abs( $angle1 - $angle2 );
            if( $max_angle_diff < $diff ) {
                $max_angle_diff = $diff;
            }
        }
    }

    return
        $max_length_diff < $max_cell_length_diff &&
        $max_angle_diff < $max_cell_angle_diff;
}

sub conditions_are_the_same
{
    my ($entry1, $entry2) = @_;

    my $number = '[-+]?([0-9]+(\.[0-9]*)?|\.[0-9]+)([Ee][-+]?[0-9]+)?';

    my @parameters = qw( temperature pressure );
    if( $check_sample_history ) {
        push( @parameters, "history" );
    }

    for my $parameter ( @parameters ) {

        my %tags = map {($_,$_)} ( keys %{$entry1->{$parameter}},
                                   keys %{$entry2->{$parameter}} );
        for my $tag (keys %tags) {
            if( exists $entry1->{$parameter}{$tag} &&
                exists $entry2->{$parameter}{$tag} ) {
                if( $entry1->{$parameter}{$tag} =~ /^${number}$/o ||
                    $entry2->{$parameter}{$tag} =~ /^${number}$/o ) {
                    my $val1 = $entry1->{$parameter}{$tag};
                    my $val2 = $entry2->{$parameter}{$tag};
                    $val1 =~ s/\(\d+\)$//;
                    $val2 =~ s/\(\d+\)$//;
                    if( $val1 != $val2 ) {
                        return 0;
                    }
                } else {
                    if( $entry1->{$parameter}{$tag} ne
                        $entry2->{$parameter}{$tag} ) {
                        return 0;
                    }
                }
            }
        }
    }
    return 1;
}

sub bibliographies_are_the_same($$)
{
    my ($biblio1, $biblio2) = @_;

    my %tags = map {($_,$_)} ( keys %$biblio1, keys %$biblio2 );

    for my $tag ( keys %tags ) {
        next if( $skip_tag{$tag} );
        if( defined $biblio1->{$tag} && defined $biblio2->{$tag} ) {
            if( $has_numeric_value{$tag} ) {
                if( $biblio1->{$tag} != $biblio2->{$tag} ) {
                    return 0;
                }
            } else {
                if( $biblio1->{$tag} ne $biblio2->{$tag} ) {
                    return 0;
                }
            }
        }
    }
    return 1;
}

sub entries_are_the_same
{
    my ($entry1, $entry2) = @_;
    
    ## print ">>> $entry1->{id}, $entry2->{id}, ",
    ## defined $entry1->{suboptimal} ? $entry1->{suboptimal} : "" , " ", 
    ## defined $entry2->{suboptimal} ? $entry2->{suboptimal} : "", "\n";

    if( $check_bibliography ) {
        return
            cells_are_the_same( $entry1->{cell}, $entry2->{cell} ) &&
            conditions_are_the_same( $entry1, $entry2 ) &&
            (!defined $entry1->{suboptimal} || $entry1->{suboptimal} ne "yes") &&
            (!defined $entry2->{suboptimal} || $entry2->{suboptimal} ne "yes") &&
            bibliographies_are_the_same( $entry1->{bibliography},
                                         $entry2->{bibliography} );
    } else {
        return
            cells_are_the_same( $entry1->{cell}, $entry2->{cell} ) &&
            conditions_are_the_same( $entry1, $entry2 ) &&
            (!defined $entry1->{suboptimal} || $entry1->{suboptimal} ne "yes") &&
            (!defined $entry2->{suboptimal} || $entry2->{suboptimal} ne "yes");
    }
}

## sub cell_volume
## {
##     my @cell = @_;
## 
##     if( !defined $cell[0] || !defined $cell[1] || !defined $cell[2] ||
##         !defined $cell[3] || !defined $cell[4] || !defined $cell[5] ) {
##         return -1;
##     }
## 
##     my $Pi = 3.14159265358979;
## 
##     @cell = map { s/\(.*\)//g; $_ } @_;
## 
##     my ($a, $b, $c) = @cell[0..2];
##     my ($alpha, $beta, $gamma) = map {$Pi * $_ / 180} @cell[3..5];
##     my ($ca, $cb, $cg) = map {cos} ($alpha, $beta, $gamma);
##     my $sg = sin($gamma);
##     
##     my $V = $a * $b * $c * sqrt( $sg**2 - $ca**2 - $cb**2 + 2*$ca*$cb*$cg );
## 
##     return $V;
## }
## 
## sub compute_datablock_cell_volume
## {
##     my $values = $_[0];
##     my @cell = get_cell( $values );
##     return cell_volume( @cell );
## }
