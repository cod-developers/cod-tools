#! /bin/sh
#------------------------------------------------------------------------------
#$Author$
#$Date$ 
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
#   Deposit CIFs into COD database using CGI deposition interface.
#
#   Usage: $0 structure1.cif [structure2.cif ...]
#**

TMP_DIR="${TMPDIR}"

set -ue
## set -x

script() { echo "$*"; }
setvar() { eval $1="'$3'"; }

setvar Id = '$Id$'

setvar INPUT_CONFIG    = "${HOME:-.}/.cod_deposit.cfg"
setvar SERVER          = "http://test.crystallography.net"
setvar DEPOSIT_PATH    = "cgi-bin/cif-deposit.pl"
setvar DEPOSIT_URL     = "${SERVER}/${DEPOSIT_PATH}"
setvar DEPOSITION_TYPE = "published"

setvar FILES    = ''
setvar SEPARATE_OUT_DIR = ''
setvar SEPARATOR = ' '
setvar READ_STDIN = false

setvar DEBUG    = false
setvar PROGRESS = false
setvar OUTPUT_MODE  = "html"

setvar BASENAME = "`basename $0`"

# Executables:

curl=curl

#** OPTIONS:
#**
#**  -c, --config config-file-with-password.cfg
#**      Specify which file holds depostor user name and
#**      password (default: ~/.cod_deposit.cfg
#**
#**  -h, --host  test.crystallography.net
#**      Specify host to commit structrues to
#**
#**  -p, --path  cgi-bin/cif-deposit.pl
#**      Specify script path within the host to use for structure upload
#**
#**  -u, --url  http://test.crystallography.net/cgi-bin/cif-deposit.pl
#**      Specify the full URL to use for structure uploading (default:
#**      combine --host and --path values using http:// protocol and /).
#**
#**  -d, --deposition-type published
#**      Specify the deposition type under which the structure is to be 
#**      deposited
#**
#**  -s, --separate-outputs folder-to-put-deposition-outputs/
#**      Specify a folder to put deposition output for each deposited file
#**
#**  -P, --progress
#**      Ask cif-deposit.pl to report progress of the deposition.
#**
#**  --output-mode html
#**      Specify the output mode (from "html" and "stdout")
#**
#**  -D, --debug
#**      Request output of the progress information from cif-deposit.pl to the
#**      HTTP server log.
#**
#**  --help                   print short help message (this message) and exit
while [ $# -gt 0 ]
do
  case $1 in
      -c|--config|--confi|--conf|--con|--co|--co)
          INPUT_CONFIG="$2"
          shift
          ;;
      -h|--host|--hos|--ho|--h)
          SERVER="http://$2"
          DEPOSIT_URL="${SERVER}/${DEPOSIT_PATH}"
          shift
          ;;
      -p|--path)
          DEPOSIT_PATH="$2"
          DEPOSIT_URL="${SERVER}/${DEPOSIT_PATH}"
          shift
          ;;
      -u|--url|--ur|--u)
          DEPOSIT_URL="$2"
          shift
          ;;
      -s|--separate-outputs|--separate)
          SEPARATE_OUT_DIR="$2"
          shift
          ;;
      -d|--deposition-type)
          DEPOSITION_TYPE="$2"
          shift
          ;;
      -r|--read-stdin)
          READ_STDIN=true
          ;;
      -D|--debug|--debu|--deb|--de|--d)
          DEBUG=true
          ;;
      -D-|--no-debug|--no-debu|--no-deb|--no-de|--no-d)
          DEBUG=false
          ;;
      --output-mode)
          OUTPUT_MODE="$2"
          ;;
      -P|--progress|--progres|--progre|--progr|--prog|--pro|--pr|--p)
          PROGRESS=true
          ;;
      -P-|--no-progress|--no-progres|--no-progre|--no-progr|--no-prog|\
      --no-pro|--no-pr|--no-p)
          PROGRESS=false
          ;;
      --script|--scrip|--scri|--scr|--sc|--s)
          curl="script curl"
          ;;
      --run|--ru|--r)
          curl=curl
          ;;
      --help|--hel|--he|--h)
            awk '/#\*/,/#\*\*/ {
                    sub("^ *#[*]?[*]?", ""); \
                    gsub("\\$0","'$0'"); \
                    print $0
                }' $0
	    exit
	    ;;      
      -*) echo "`basename $0`: unknown option $1" >&2 ; exit 1 ;;
      *)  FILES="$FILES $1" ;;
    esac
    shift
done

## echo ${FILES}
eval set -- "${FILES}"

if [ $DEBUG = true ]
then
    DEBUG_ARG='-F debug=1'
else
    DEBUG_ARG=''
fi

if [ $PROGRESS = true ]
then
    PROGRESS_ARG='-F progress=1'
else
    PROGRESS_ARG=''
fi

test -z "${TMP_DIR}" && TMP_DIR="/tmp"
TMP_DIR="${TMP_DIR}/tmp-${BASENAME}-$$"
umask 077
mkdir "${TMP_DIR}"

TMP_USERNAME="${TMP_DIR}/username"
TMP_PASSWRD="${TMP_DIR}/password"
TMP_EMAIL="${TMP_DIR}/user_email"
TMP_AUTHOR_NAME="${TMP_DIR}/author_name"
TMP_AUTHOR_EMAIL="${TMP_DIR}/author_email"
TMP_JOURNAL="${TMP_DIR}/journal"
TMP_CLIENT_IP="${TMP_DIR}/web_client_ip"
TMP_BYPASS_PASSWD="${TMP_DIR}/bypass_password"

perl -lne "print \$1 if /^username=(.*)/" < ${INPUT_CONFIG} > ${TMP_USERNAME}
perl -lne "print \$1 if /^password=(.*)/" < ${INPUT_CONFIG} > ${TMP_PASSWRD}
perl -lne "print \$1 if /^journal=(.*)/"  < ${INPUT_CONFIG} > ${TMP_JOURNAL}
perl -lne "print \$1 if /^user_email=(.*)/"   < ${INPUT_CONFIG} > ${TMP_EMAIL}
perl -lne "print \$1 if /^author_name=(.*)/"  < ${INPUT_CONFIG} > ${TMP_AUTHOR_NAME}
perl -lne "print \$1 if /^author_email=(.*)/" < ${INPUT_CONFIG} > ${TMP_AUTHOR_EMAIL}
perl -lne "print \$1 if /^web_client_ip=(.*)/"   < ${INPUT_CONFIG} > ${TMP_CLIENT_IP}
perl -lne "print \$1 if /^bypass_password=(.*)/" < ${INPUT_CONFIG} > ${TMP_BYPASS_PASSWD}
HOLD_PERIOD=$(perl -lne "print \$1 if /^hold_period=(.*)/" < ${INPUT_CONFIG})

if [ -s ${TMP_JOURNAL} ]
then
    JOURNAL_ARG="-F journal=<${TMP_JOURNAL}"
else
    JOURNAL_ARG=''
fi

if [ -s ${TMP_EMAIL} ]
then
    EMAIL_ARG="-F user_email=<${TMP_EMAIL}"
else
    EMAIL_ARG=''
fi

if [ -s ${TMP_AUTHOR_NAME} ]
then
    AUTHOR_NAME_ARG="-F author_name=<${TMP_AUTHOR_NAME}"
else
    AUTHOR_NAME_ARG=''
fi

if [ -s ${TMP_AUTHOR_EMAIL} ]
then
    AUTHOR_EMAIL_ARG="-F author_email=<${TMP_AUTHOR_EMAIL}"
else
    AUTHOR_EMAIL_ARG=''
fi

if [ -s ${TMP_CLIENT_IP} ]
then
    WEB_CLIENT_IP_ARG="-F web_client_ip=<${TMP_CLIENT_IP}"
else
    WEB_CLIENT_IP_ARG=''
fi

if [ -s ${TMP_BYPASS_PASSWD} ]
then
    BYPASS_PASSWD_ARG="-F bypass_check_password=<${TMP_BYPASS_PASSWD}"
else
    BYPASS_PASSWD_ARG=''
fi

if [ -n "${HOLD_PERIOD}" ]
then
    HOLD_PERIOD_ARG="-F hold_period=${HOLD_PERIOD}"
else
    HOLD_PERIOD_ARG=''
fi

DEPOSIT_LOGGER="cat"

if [ ${READ_STDIN} = true ]
then
    while read line
    do
        CIF=${line%${SEPARATOR}*}
        HKL=${line#*${SEPARATOR}}
        echo ${BASENAME}: ${CIF}: NOTE: Deposition started at $(date)
        CIF_ARG="-F cif=@${CIF};filename=$(basename ${CIF})"
        HKL_ARG=""
        if [ "${line}" != "${line/${SEPARATOR}/}" ]
            then HKL_ARG="-F hkl=@${HKL};filename=$(basename ${HKL})"
        fi
        if [ -n "${SEPARATE_OUT_DIR}" ]
        then
            DEPOSIT_LOGGER="cat > \"${SEPARATE_OUT_DIR}/$(basename $i .cif).html\""
        fi
        ${curl} \
            ${DEBUG_ARG} \
            ${PROGRESS_ARG} \
            -F "output_mode=${OUTPUT_MODE}" \
            -F "username=<${TMP_USERNAME}" \
            -F "password=<${TMP_PASSWRD}" \
            ${JOURNAL_ARG} \
            ${EMAIL_ARG} \
            ${AUTHOR_NAME_ARG} \
            ${AUTHOR_EMAIL_ARG} \
            ${WEB_CLIENT_IP_ARG} \
            ${BYPASS_PASSWD_ARG} \
            ${HOLD_PERIOD_ARG} \
            ${CIF_ARG} \
            ${HKL_ARG} \
            -F "deposition_type=${DEPOSITION_TYPE}" \
            ${DEPOSIT_URL} \
            | eval ${DEPOSIT_LOGGER}
        echo ${BASENAME}: ${CIF}: NOTE: Deposition finished at $(date)
    done
else
    for i in ${FILES}
    do
        echo ${BASENAME}: $i: NOTE: Deposition started at $(date)
        if [ -n "${SEPARATE_OUT_DIR}" ]
        then
            DEPOSIT_LOGGER="cat > \"${SEPARATE_OUT_DIR}/$(basename $i .cif).html\""
        fi
        ${curl} \
            ${DEBUG_ARG} \
            ${PROGRESS_ARG} \
            -F "output_mode=${OUTPUT_MODE}" \
            -F "username=<${TMP_USERNAME}" \
            -F "password=<${TMP_PASSWRD}" \
            ${JOURNAL_ARG} \
            ${EMAIL_ARG} \
            ${AUTHOR_NAME_ARG} \
            ${AUTHOR_EMAIL_ARG} \
            ${WEB_CLIENT_IP_ARG} \
            ${BYPASS_PASSWD_ARG} \
            ${HOLD_PERIOD_ARG} \
            -F "cif=@$i;filename=$(basename $i)" \
            -F "deposition_type=${DEPOSITION_TYPE}" \
            ${DEPOSIT_URL} \
            | eval ${DEPOSIT_LOGGER}
        echo ${BASENAME}: $i: NOTE: Deposition finished at $(date)
    done
fi

which wipe >/dev/null 2>&1
if [ $? = 0 ]
then
    wipe -rf "${TMP_DIR}"
else
    rm -rf "${TMP_DIR}"
fi
