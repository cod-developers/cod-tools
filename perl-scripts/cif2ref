#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Date$ 
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
#  Parse a CIF file and print out the essential information in the COD
#  REF format
#**

use strict;
use lib "./lib/perl5";
use STAR::Parser;
use Unicode2CIF;

my $filename = @ARGV > 0 ? shift(@ARGV) : "-";
my $biblio = @ARGV > 0 ? shift(@ARGV) : undef;
my @data;

@data = STAR::Parser->parse(-file=>$filename);

my $n = 0;

binmode( STDOUT, ":utf8" );

for my $dataset (@data) {

    next unless defined $dataset->{DATA};

    my $compounds = $dataset->{DATA};
    my @names = keys %{$compounds};

    ## print int(@data), "\n"; exit;

    my $compound_name = $names[0];
    my $compound = $compounds->{$compound_name};
    my $category = defined $compound ? $compound->{"-"} : undef;
    my $datablok = defined $category ? $category->{"-"} : undef;

    next if !defined $datablok;
    
    # Make sure all tags are present in their lowercase form:

    foreach my $key (keys %$datablok) {
        my $value = $datablok->{$key};
        my $lc_key = lc( $key );
        if( $lc_key ne $key ) {
            $datablok->{$lc_key} = $value;
        }
    }

    next if !defined $datablok->{_atom_site_label};

    print "\n" if $n > 0;

    # Chemical formula:
    my $formula = $datablok->{_chemical_formula_sum}[0];
    if( defined $formula ) {
        $formula =~ s/^\s*|\s*$//g;
    } else {
        $formula = "?";
    }
    $formula =~ s/\n/ /g;
    $formula =~ s/\s+/ /g;

    # Cell constants:
    my $a = $datablok->{_cell_length_a}[0];
    my $b = $datablok->{_cell_length_b}[0];
    my $c = $datablok->{_cell_length_c}[0];
    my $alpha = $datablok->{_cell_angle_alpha}[0];
    my $beta  = $datablok->{_cell_angle_beta}[0];
    my $gamma = $datablok->{_cell_angle_gamma}[0];

    # Spacegroup:
    my $spacegroup = $datablok->{"_symmetry_space_group_name_h-m"}[0];

    # Atom records:

    my $atom = $datablok->{_atom_site_label};

    my $x = $datablok->{_atom_site_fract_x};
    my $y = $datablok->{_atom_site_fract_y};
    my $z = $datablok->{_atom_site_fract_z};

    my $q = $datablok->{_atom_site_occupancy};
    my $U = $datablok->{_atom_site_u_iso_or_equiv};
    
    if( !defined $U ) {
        $U = $datablok->{_atom_site_uiso_or_biso};
    }

    if( !defined $U && defined $datablok->{_atom_site_b_iso_or_equiv} ) {
        my $B = $datablok->{_atom_site_b_iso_or_equiv};
        my $Pi = 3.14159265358979;
        for my $i ( 0..$#{$B} ) {
            my $b = $B->[$i];
            $b =~ s/\(.*\)$//;
            $datablok->{_atom_site_u_iso_or_equiv}[$i] = $b/(8*$Pi**2);
        }
        $U = $datablok->{_atom_site_u_iso_or_equiv};
    }

    my $multiplicity = $datablok->{_atom_site_symmetry_multiplicity};

    if( !defined $multiplicity ) {
        $multiplicity = $datablok->{_atom_site_symetry_multiplicity};
    }

    my $Wyckoff_sym = $datablok->{_atom_site_wyckoff_symbol};

    # Print it out:

    if( defined $biblio ) {
        open( BIBLIO, $biblio ) or
            die( "Could not open file '$biblio' for reading: $!" );
        my $reference;
        if( $biblio =~ /\.ref/ ) {
            $reference = <BIBLIO>; # read the first line
        } elsif( $biblio =~ /\.xrf/ ) {
            my @reference = grep !/^\#/, <BIBLIO>;
            $reference = $reference[0]; # read the first non-comment line
        } else {
            local $/ = undef; # read the whole file
            $reference = <BIBLIO>;
        }
        close BIBLIO;
        chomp $reference;
        $reference =~ s/\n/ /g;
        print $reference, "\n";
    } else {
        my $text = get_cif_description( $datablok );
        if( defined $text ) {
            print $text, "\n";
        } else {
            print "Bibliography ...\n";
        }
    }

    do {
        local $, = " ";
        local $\ = "\n";

        print $formula;

        ## $a =~ s/\(.*\)//g;
        ## $b =~ s/\(.*\)//g;
        ## $c =~ s/\(.*\)//g;
        ## $alpha =~ s/\(.*\)//g;
        ## $beta  =~ s/\(.*\)//g;
        ## $gamma =~ s/\(.*\)//g;

        $a = '?' unless defined $a;
        $b = '?' unless defined $b;
        $c = '?' unless defined $c;
        $alpha = '?' unless defined $alpha;
        $beta  = '?' unless defined $beta;
        $gamma = '?' unless defined $gamma;

        $alpha =~ s/^(\d+)\.$/$1/;
        $beta  =~ s/^(\d+)\.$/$1/;
        $gamma =~ s/^(\d+)\.$/$1/;

        print $a, $b, $c, $alpha, $beta, $gamma;

        $spacegroup = "?" unless defined $spacegroup;
        $spacegroup =~ s/[\s()~_]//g;
        print $spacegroup;

        for my $i (0..$#{$x}) {
            $atom->[$i] =~ s/\s//g;
            print
                $atom->[$i],
                defined $multiplicity ? $multiplicity->[$i] : "?",
                defined $Wyckoff_sym ? $Wyckoff_sym->[$i] : "?",
                $x->[$i], $y->[$i], $z->[$i],
                defined $q ? $q->[$i] : "?",
                defined $U ? $U->[$i] : "?";
        }
    };

    $n ++;
}

sub get_cif_description
{
    my $datablok = $_[0];

    my $text;

    my $separator = " ";

    for my $tag (qw(
                    _chemical_name_mineral
                    _chemical_name_common
                    _chemical_name_systematic
                    _publ_author_name
                    _publ_section_title
                    _journal_name_full
                    _journal_year
                    _journal_volume
                    _journal_issue
                    _journal_page_first
                    _journal_page_last
                )) {
        my $val = "";
        if( exists $datablok->{$tag} ) {
            $val = join( "; ", @{$datablok->{$tag}} );
            $val =~ s/^\s*|\s*$//g;
        }
        if( $tag eq "_journal_issue" && $val ne "" ) {
            $val = "(" . $val . ")";
        }
        if( defined $text ) {
            $text .= $separator . $val;
        } else {
            $text = $val;
        }
        if( $tag eq "_journal_year" || $tag eq "_journal_issue" ) {
            $separator = " ";
        } elsif( $tag eq "_journal_volume" ) {
            $separator = "";
        } elsif( $tag eq "_chemical_name_common" ) {
            $separator = "|";
        }
    }
    if( defined $text ) {
        $text =~ s/\n/ /g;
        $text =~ s/\s+/ /g;
        $text =~ s/^\s*|\s*$//g;
        $text = Unicode2CIF::cif2unicode( $text );
    }
    return $text;
}
