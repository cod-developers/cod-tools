#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Date$ 
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
#  Parse a CIF file
#**

use strict;
use lib "./lib/perl5";
use lib "./CIFParser";
use CIFParser;
use ShowStruct;
use Spacegroups::SpacegroupNames;
use File::Basename;

my %spacegroups = map {
    my $generated_key = $_->[2];
    $generated_key =~ s/\s//g;
    ($_->[2], $_->[1], $generated_key, $_->[2] )
} @SpacegroupNames::names;

for my $filename (@ARGV) {
    my $parser = new CIFParser;
    my $data = $parser->Run($filename);

    if( defined $parser->YYData->{ERRCOUNT} && $parser->YYData->{ERRCOUNT} > 0 ) {
	print STDERR File::Basename::basename($0), ": " ,
	$parser->YYData->{ERRCOUNT},
	" error(s) encountered while parsing file '${filename}'\n";
	exit -1;
    }

    my $warnings = 0;
    for my $dataset (@$data) {
	$warnings += check_bibliography( $dataset, $filename );
	$warnings += check_chemical_formula_sum( $dataset, $filename );
	$warnings += check_spacegroup_info( $dataset, $filename );
    }
    printf "%-30s: OK\n", $filename if $warnings == 0;
}

sub check_bibliography
{
    my ($dataset,$filename) = @_;

    my $warnings = 0;
    if( !defined $dataset->{values} ) {
	print "$0: $filename: no values?!\n";
	$warnings ++;
    }
    my $values = $dataset->{values};
    if( !defined $values->{_journal_name_full} ) {
	print "$0: $filename: _journal_name_full is undefined\n";
	$warnings ++;
    }
    if( !defined $values->{_journal_year} &&
	!defined $values->{_journal_volume} ) {
	print "$0: $filename: neither _journal_year nor " .
	    "_journal_volume is defined\n";
	$warnings ++;
    }
    if( !defined $values->{_journal_page_first} ) {
	print "$0: $filename: _journal_page_first is undefined\n";
	$warnings ++;
    }
    if( !defined $values->{_publ_author_name} ) {
	print "$0: $filename: no _publ_author_name\n";
	$warnings ++;
    }
    return $warnings;
}

sub check_chemical_formula_sum
{
    my ($dataset, $filename) = @_;

    my $formula = $dataset->{values}{_chemical_formula_sum}[0];

    my $formula_component = "[a-zA-Z]{1,2}[0-9.]*";

    if( !defined $formula ) {
	print "$0: $filename: no _chemical_formula_sum\n";
	return 1;
    } elsif( $formula !~ /^\s*($formula_component\s+)*($formula_component)\s*$/ ) {
	print "$0: chemical formula '$formula' could not be parsed in the " .
	      "file '$filename':\n" .
	      "it does not consist of space-seprated chemical element names " .
	      "with optional numeric quantities (e.g. 'C2 H6 O')";
	return 1;
    } else {
	return 0;
    }
}

sub check_spacegroup_info
{
    my ($dataset, $filename ) = @_;

    my $values = $dataset->{values};

    my @spacegroup_tags = qw (
        _symmetry_space_group_name_H-M
        _symmetry_space_group_name_Hall
        _space_group_name_H-M_alt
        _space_group.name_H-M_full
        _space_group_name_Hall
        _space_group_ssg_name
        _space_group_ssg_name_IT
        _space_group_ssg_name_WJJ
    );

    my $warnings = 0;
    my $spacegroup_found;
    my $spacegroup;

    for my $sg_tag (@spacegroup_tags) {
	if( exists $values->{$sg_tag} ) {
	    $spacegroup = $values->{$sg_tag}[0];
	    if( $sg_tag =~ /H-M/ ) {
		if( defined $spacegroup &&
		    !exists $spacegroups{$spacegroup} ) {
		    print "$0: $filename: unrecognised spacegroup $spacegroup\n";
		    $warnings ++;
		}
	    }
	    last
	}
    }
    if( !defined $spacegroup ) {
	print "$0: $filename: no spacegroup information found\n";
	$warnings ++;
    }
    return $warnings;
}
