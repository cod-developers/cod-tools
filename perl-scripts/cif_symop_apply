#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Date$ 
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
#  Apply symmetry operator(s) to all atoms in a CIF.
#**

use strict;
use lib "./lib/perl5";
use lib "./CIFParser";
use lib "./CCIFParser";
use lib "./CIFTags";
use lib ".";
use File::Basename;
use CIFParser;
use Spacegroups::SymopParse;
use Spacegroups::SymopAlgebra;
use CIFTags::CIFTagPrint;
use SOptions;
use SUsage;

my $use_parser = "c";

my @symops = ();

#* USAGE:
#*     $0 [options] input1.cif input*.cif
#* 
#* OPTIONS:
#*    -s, --symop, --symmetry-operator -x,-y,z
#*        Apply the specified symmetry operator.
#*
#*    -a, --add-symop, --add-symmetry-operator -x,-y,z
#*        Add the specified symmetry operator to the applied operato list.
#*
#*    --use-perl-parser  Use development CIF parser written in Perl
#*    --use-c-parser     Use faster C/Yacc CIF parser (default)
#*
#*    --help,--usage         Print a short usage message (this message) and exit.
#**

@ARGV = getOptions( 
    "-s,--symop,--symmetry-operator" => sub { @symops = (&get_value) },
    "-a,--add-symop,--add-symmetry-operator" => \@symops,
    "--use-perl-parser"  => sub{ $use_parser = "perl" },
    "--use-c-parser"     => sub{ $use_parser = "c" },

    "--help,--usage"     => sub { SUsage::usage; exit },
);

@ARGV = ( "-" ) unless @ARGV;

my $symop_matrix = SymopParse::symop_from_string( "x,y,z");

for my $symop (@symops) {
    $symop_matrix = SymopAlgebra::symop_mul
        ( $symop_matrix, SymopParse::symop_from_string( $symop ));
}

for my $filename (@ARGV) {

    my( $data, $error_count );

    if( $use_parser eq "perl" ) {
        my $parser = new CIFParser;

        $data = $parser->Run( $filename );

        if( defined $parser->YYData->{ERRCOUNT} ) {
            $error_count = $parser->YYData->{ERRCOUNT};
        }
    } else {
        require CCIFParser;
        ( $data, $error_count ) = CCIFParser::parse( $filename );
    }

    if( defined $error_count && $error_count > 0 ) {
        print STDERR "$0: ", $error_count,
        " error(s) encountered while parsing file '${filename}'\n";
        die;
    }

    if( !@$data || !defined $data->[0] || !defined $data->[0]{name} ) {
        warn( "file '$filename' seems to be empty" );
        next;
    }

    for my $datablock (@$data) {
        my $values = $datablock->{values};
        for( my $i = 0; $i <= $#{$values->{_atom_site_fract_x}}; $i ++ ) {
            my @xyz = (
                $values->{_atom_site_fract_x}[$i],
                $values->{_atom_site_fract_y}[$i],
                $values->{_atom_site_fract_z}[$i],
                );

            my $new_xyz = SymopAlgebra::symop_apply( $symop_matrix, \@xyz );

            $values->{_atom_site_fract_x}[$i] = $new_xyz->[0];
            $values->{_atom_site_fract_y}[$i] = $new_xyz->[1];
            $values->{_atom_site_fract_z}[$i] = $new_xyz->[2];
        }
        do {
            local $, = " ";
            local $\ = "\n";
            print @{$datablock->{tags}};
        } if 0;
        CIFTagPrint::print_cif( $datablock, {
            dictionary_tags => $datablock->{values},
            dictionary_tag_list => $datablock->{tags},
        });
    }
}
